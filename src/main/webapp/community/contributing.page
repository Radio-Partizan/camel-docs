---
title: Contributing
page_version: 16
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
There are many ways you can help make Camel a better piece of software - please dive in and help\!

Try surf the documentation - if somethings confusing or not clear, let us know.  Download the code & try it out and see what you think. Browse the source code. Got an itch to scratch, want to tune some operation or add some feature?

Want to do some hacking on Camel? Try surfing the our [issue tracker|http://issues.apache.org/activemq/browse/CAMEL] for open issues or features that need to be implemented, take ownership of an issue and try fix it.

If you'd rather a more gentle introduction to working on the Camel project, how about you try look at the
{link:test coverage report|http://nemo.sonar.codehaus.org/project/index/82889} and help us get it even more green by supplying more test cases to get us closer to 100% coverage.

h2. Getting in touch

There are various ways of communicating with the Camel community.
- join us on the [Discussion Forums] and take part in any conversations
- pop by on
{link:IRC|irc://irc.codehaus.org/camel} and say hi
- add some comments to the [wiki|Navigation]

h2. Improving the documentation

Documentation is massively important to help users make the most of Apache Camel and its probably the area that needs the most help\!

So if you are interested in helping the documentation effort; whether its just to fix a page here or there, correct a link or even write a tutorial or improve what documentation is already there please do dive in and help\!

All of the documentation is stored on the wiki. See [How does the website work] or [How do I edit the website] for more details.

To be able to edit the wiki you need to mail the [dev list|Mailing Lists] asking for an account (to prevent spam we only offer access to the wiki by folks sending mail to the mailing list).

h2. If you find a bug or problem

Please raise a new issue in our [issue tracker|http://issues.apache.org/activemq/browse/CAMEL]

If you can create a JUnit test case then your issue is more likely to be resolved quicker.
e.g. take a look at some of the existing [unit tests cases|https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/]

Then we can add your issue to Subversion and then we'll know when its really fixed and we can ensure that the problem stays fixed in future releases.

h2. Working on the code

Grab the [Source] and create a project in your IDE. e.g. if you are using Eclipse the following should do the trick...
{code}
svn co https://svn.apache.org/repos/asf/camel/trunk camel
cd camel
mvn eclipse:eclipse
{code}
Build the project.
{code}
mvn install
{code}
PS: You might need to build multiple times (if you get a build error) because sometimes maven fails to download all the files.

Then import the projects into your workspace.

h2. Creating patches

We gladly accept patches if you can find ways to improve, tune or fix Camel in some way.

Most IDEs can create nice patches now very easily. e.g. in Eclipse just right click on a file/directory and select Team \-> Create Patch. Then just save the patch as a file and then submit it. (You may have to click on Team \-> Share... first to enable the Subversion options). Incidentally if you are an Eclipse user you should install the [subclipse|http://subclipse.tigris.org/] plugin.

If you're a command line person try the following to create the patch
{code}
diff -u Main.java.orig Main.java >> patchfile.txt
{code}
or
{code}
svn diff Main.java >> patchfile.txt
{code}

h2. Submitting patches

The easiest way to submit a patch is to
* [create a new JIRA issue|http://issues.apache.org/activemq/browse/CAMEL] (you will need to register),
* attach the patch or tarball as an attachment
* *tick the Patch Attached* button on the issue
* fire off an email to the [Discussion Forums] linking to the JIRA

When a ticket is create in JIRA it automatically sends an email to the developer forum but an email always helps alert folks (as lots of emails are generated from every change to every JIRA).

Remember to create and attach the patch in two steps, as JIRA does not support granting ASF license to the patch in the create ticket wizard. So after creating the ticket, then attach the patch and remember to tick off the grant ASF license, otherwise we can not commit the patch. We prefer patches has unit tests as well and that these unit tests have proper assertions as well, so remember to replace your system.out or logging with an assertion instead\!

h2. Becoming a committer

Once you've got involved as above, we may well invite you to be a committer. See [How do I become a committer] for more details.

h2. Using the issue tracker

Before you can raise an issue in the [issue tracker|http://issues.apache.org/activemq/browse/CAMEL] you need to register with it. This is quick & painless.

If you want to have a go at fixing an issue you need to be in the list of activemq-developers on the issue tracker. To join the group, please mail the {{dev@camel.apache.org}} mail list with the email address you used to register with the issue tracker and we'll add you to the group.

h2. Becomming a committer

The first step is contributing to the project; if you want to take that a step forward and become a fellow committer on the project then see the [Committer Guide|http://activemq.apache.org/becoming-a-committer.html]