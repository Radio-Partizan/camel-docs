h2. How do I configure endpoints?

There are a few different approaches to configuring components and endpoints. 

h3. Using Java Code

You can explicitly configure a [Component] using Java code as shown in this [example|Walk through an Example] 

Or you can explicitly get hold of an [Endpoint] and configure it using Java code as shown in the [Mock endpoint examples|Mock].

{code}
SomeEndpoint endpoint = (SomeEndpoint) camelContext.getEndpoint("someURI");
endpoint.setSomething("aValue");
{code}

h3. Using Guice

You can also use [Guice] as the dependency injection framework. For example see the [Guice JMS Example]

h3. Using Spring XML

You can configure your [Component] or [Endpoint] instances in your [Spring] XML as follows. 

{snippet:id=example|lang=xml|url=camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/jmsRouteUsingSpring.xml}

Which allows you to configure a component using some name (activemq in the above example), then you can refer to the component using *activemq:\[queue:\|topic:\]destinationName*. This works by the SpringCamelContext lazily fetching components from the spring context for the scheme name you use for [Endpoint] [URIs]

h3. Using Endpoint URIs

Another approach is to use the URI syntax. The URI syntax supports the query notation. So for example with the [Mail] component you can configure the password property via the URI

{code}
pop3://host:port?password=foo
{code}

h4. Referring beans from Endpoint URIs 
*Available as of Camel 2.0*

When configuring endpoints using URI syntax you can now refer to beans in the [Registry] using the # notation.
If the parameter value starts with a {{#}} sign then Camel will lookup in the [Registry] for a bean of the given type. For instance:
{code}
file://inbox?sorter=#mySpecialFileSorter
{code}
Will lookup a bean with the id *mySpecialFileSorter* in the [Registry].

h2. See Also

* [How do I add a component]
* [Spring]
* [URIs]
