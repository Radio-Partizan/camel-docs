---
title: Content Filter
page_version: 12
page_creator: jstrachan
page_modifier: premiergeneration@yahoo.com
--- pipeline:conf
h3. Content Filter

Camel supports the [Content Filter|http://www.enterpriseintegrationpatterns.com/ContentFilter.html] from the [EIP patterns|Enterprise Integration Patterns] using one of the following mechanisms in the routing logic to transform content from the inbound message.

* [Message Translator]
* invoking a [Java bean|Bean Integration] 
* [Processor] object 

!http://www.enterpriseintegrationpatterns.com/img/ContentFilter.gif!

A common way to filter messages is to use an [Expression] in the [DSL] like [XQuery], [SQL] or one of the supported [Scripting Languages].

*Using the [Fluent Builders]*

Here is a simple example using the [DSL] directly
{snippet:id=example|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformViaDSLTest.java}

In this example we add our own [Processor]
{snippet:id=example|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformTest.java}

For further examples of this pattern in use you could look at one of the JUnit tests

* [TransformTest|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformTest.java?view=markup]
* [TransformViaDSLTest|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformViaDSLTest.java?view=markup]

*Using Spring XML*

{code}
<route>
  <from uri="activemq:Input"/>
  <bean ref="myBeanName" method="doTransform"/>
  <to uri="activemq:Output"/>
</route>
{code}

You can also use XPath to filter out part of the message you are interested in:

{code}
<route>
  <from uri="activemq:Input"/>
  <setBody><xpath resultType="org.w3c.dom.Document">//foo:bar</xpath></setBody>
  <to uri="activemq:Output"/>
</route> 
{code}

{include:Using This Pattern}
