---
title: Composed Message Processor
page_version: 4
page_creator: janstey
page_modifier: janstey
--- pipeline:conf
h3. Composed Message Processor

The [Composed Message Processor|http://www.enterpriseintegrationpatterns.com/DistributionAggregate.html] from the [EIP patterns|Enterprise Integration Patterns] allows you to process a composite message by splitting it up, routing the sub-messages to appropriate destinations and the re-aggregating the responses back into a single message. 

!http://www.enterpriseintegrationpatterns.com/img/DistributionAggregate.gif!

Available in Camel 1.5.

h4. Example

In this example we want to check that a multipart order can be filled. Each part of the order requires a check at a different inventory. 

{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/ComposedMessageProcessorTest.java}

To do this we split up the order using a [Splitter]. The [Splitter] then sends individual {{OrderItems}} to a [Content Based Router] which checks the item type. Widget items get sent for checking in the {{widgetInventory}} bean and gadgets get sent to the {{gadgetInventory}} bean. Once these {{OrderItems}} have been validated by the appropriate bean, they are sent on to the [Aggregator] which collects and re-assembles the validated {{OrderItems}} into an order again.

When an order is sent it contains a header with the order id. We use this fact when we aggregate, as we configure this {{.header("orderId")}} on the {{aggregate}} DSL to instruct Camel to use the header with the key {{orderId}} as correlation expression. 

For full details, check the example source here:

[camel-core/src/test/java/org/apache/camel/processor/ComposedMessageProcessorTest.java|http://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/ComposedMessageProcessorTest.java]

{include:Using This Pattern}