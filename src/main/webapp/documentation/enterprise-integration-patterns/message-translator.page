---
title: Message Translator
page_version: 18
page_creator: jstrachan
page_modifier: hadrian@apache.org
--- pipeline:conf
h3. Message Translator

Camel supports the [Message Translator|http://www.enterpriseintegrationpatterns.com/MessageTranslator.html] from the [EIP patterns|Enterprise Integration Patterns] by using an arbitrary [Processor] in the routing logic, by using a [bean|Bean Integration] to perform the transformation, or by using transform() in the DSL. You can also use a [Data Format] to marshal and unmarshal messages in different encodings.

!http://www.enterpriseintegrationpatterns.com/img/MessageTranslator.gif!

*Using the [Fluent Builders]*

You can transform a message using Camel's [Bean Integration] to call any method on a bean in your [Registry] such as your [Spring] XML configuration file as follows

{code}
from("activemq:SomeQueue").
  beanRef("myTransformerBean", "myMethodName").
  to("mqseries:AnotherQueue");
{code}

Where the "myTransformerBean" would be defined in a Spring XML file or defined in JNDI etc. You can omit the method name parameter from beanRef() and the [Bean Integration] will try to deduce the method to invoke from the message exchange.

or you can add your own explicit [Processor] to do the transformation
{snippet:id=example|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformTest.java}

or you can use the DSL to explicitly configure the transformation
{snippet:id=example|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformProcessorTest.java}

*Use Spring XML*

You can also use [Spring XML Extensions] to do a transformation. Basically any [Expression] language can be substituted inside the transform element as shown below
{snippet:id=example|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/transformWithExpressionContext.xml}

Or you can use the [Bean Integration] to invoke a bean

{code}
<route>
  <from uri="activemq:Input"/>
  <bean ref="myBeanName" method="doTransform"/>
  <to uri="activemq:Output"/>
</route>
{code}

You can also use [Templating] to consume a message from one destination, transform it with something like [Velocity] or [XQuery] and then send it on to another destination. For example using InOnly (one way messaging)

{code}
from("activemq:My.Queue").
  to("velocity:com/acme/MyResponse.vm").
  to("activemq:Another.Queue");
{code}

If you want to use InOut (request-reply) semantics to process requests on the *My.Queue* queue on [ActiveMQ] with a template generated response, then sending responses back to the JMSReplyTo Destination you could use this.

{code}
from("activemq:My.Queue").
  to("velocity:com/acme/MyResponse.vm");
{code}

For further examples of this pattern in use you could look at one of the JUnit tests

* [TransformTest|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformTest.java?view=markup]
* [TransformViaDSLTest|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformViaDSLTest.java?view=markup]
* [TransformProcessorTest|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformProcessorTest.java?view=markup]
* [TransformWithExpressionTest|https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/processor/TransformWithExpressionTest.java?view=markup] ([test resource|https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/transformWithExpressionContext.xml?view=markup])

{include:Using This Pattern}