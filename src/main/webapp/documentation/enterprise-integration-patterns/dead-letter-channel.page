---
title: Dead Letter Channel
page_version: 40
page_creator: jstrachan
page_modifier: joed
--- pipeline:conf
h2. Dead Letter Channel

Camel supports the [Dead Letter Channel|http://www.enterpriseintegrationpatterns.com/DeadLetterChannel.html] from the [EIP patterns|Enterprise Integration Patterns] using the [DeadLetterChannel|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/processor/DeadLetterChannel.html] processor which is an [Error Handler]. 

!http://www.enterpriseintegrationpatterns.com/img/DeadLetterChannelSolution.gif!

{tip:title=Difference between Dead Letter Channel and Default Error Handler}
The major difference is that [Dead Letter Channel] has a dead letter queue that whenever an [Exchange] could not be processed is moved to. It will *always* moved failed exchanges to this queue. 

Unlike the [Default Error Handler|DefaultErrorHandler] that does *not* have a dead letter queue. So whenever an [Exchange] could not be processed the error is propagated back to the client.

*Notice:* You can adjust this behavior of whether the client should be notified or not with the *handled* option.
{tip}

h3. Redelivery 

It is common for a temporary outage or database deadlock to cause a message to fail to process; but the chances are if its tried a few more times with some time delay then it will complete fine. So we typically wish to use some kind of redelivery policy to decide how many times to try redeliver a message and how long to wait before redelivery attempts.

The [RedeliveryPolicy|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/processor/RedeliveryPolicy.html] defines how the message is to be redelivered. You can customize things like

* how many times a message is attempted to be redelivered before it is considered a failure and sent to the dead letter channel
* the initial redelivery timeout
* whether or not exponential backoff is used (i.e. the time between retries increases using a backoff multiplier)
* whether to use collision avoidance to add some randomness to the timings
* delay pattern a new option in Camel 2.0, see below for details.

Once all attempts at redelivering the message fails then the message is forwarded to the dead letter queue.

h3. About moving Exchange to dead letter queue and using handled
*Handled* on [Dead Letter Channel] was introduced in Camel 2.0, this feature does not exist in Camel 1.x

When all attempts of redelivery have failed the [Exchange] is moved to the dead letter queue (the dead letter endpoint). The exchange is then complete and from the client point of view it was processed. As such the [Dead Letter Channel] have handled the [Exchange]. 

For instance configuring the dead letter channel as:
{code:java}
errorHandler(deadLetterChannel("jms:queue:dead")
    .maximumRedeliveries(3).redeliverDealy(5000));
{code}

The [Dead Letter Channel] above will clear the caused exception when the [Exchange] is moved to the {{jms:queue:dead}} destination and the client will not notice the failure. 

By default handled is {{true}}.

h4. How to let the client notice the error?
If you want to move the message to the dead letter queue *and* also let the client notice the error, then you can configure the [Dead Letter Channel] to *not* handle the error. For example:
{code:java}
errorHandler(deadLetterChannel("jms:queue:dead")
    .maximumRedeliveries(3).redeliverDealy(5000).handled(false));
{code}

When all attempts of redelivery have failed the [Exchange] is moved to the dead letter queue (the dead letter endpoint). As the [Dead Letter Channel] 
is configured to *not* handle it, it will mark the [Exchange] as failed so the client will be notified of this error.

{tip:title=Handled}
See also [Exception Clause] for more details on the *handled* policy as this feature was first introduced here and thus we have more docuemntation and samples there.
{tip}

h3. About moving Exchange to dead letter queue and using the original message
*Available as of Camel 2.0*
The option *useOriginalMessage* is used for routing the original input message instead of the current message that potentially is modified during routing.

For instance if you have this route:
{code}
   from("jms:queue:order:input")
       .to("bean:validateOrder");
       .to("bean:transformOrder")
       .to("bean:handleOrder");
{code}
The route listen for JMS messages and validates, transforms and handle it. During this the [Exchange] payload is transformed/modified. So in case something goes wrong and we want to move the message to another JMS destination, then we can configure our [Dead Letter Channel] with the *useOriginalBody* option. But when we move the [Exchange] to this destination we do not know in which state the message is in. Did the error happen in before the transformOrder or after? So to be sure we want to move the original input message we received from {{jms:queue:order:input}}. So we can do this by enabling the *useOriginalMessage* option as shown below:
{code:java}
    // will use original body
    errorHandler(deadLetterChannel("jms:queue:dead")
       .useOriginalMessage().mamimumRedeliveries(5).redeliverDelay(5000);
{code}

Then the messages routed to the {{jms:queue:dead}} is the original input. If we want to manually retry we can move the JMS message from the failed to the input queue, with no problem as the message is the same as the original we received.


h3. OnRedelivery
*Available in Camel 1.6.0 onwards*

When [Dead Letter Channel] is doing redeliver its possible to configure a [Processor] that is executed just *before* every redelivery attempt. This can be used for the situations where you need to alter the message before its redelivered. See below for sample. 

{tip:title=onException and onRedeliver}
In Camel 2.0 we also added support for per [*onException*|Exception Clause] to set a *onRedeliver*. That means you can do special on redelivery for different exceptions, as opposed to onRedelivery set on [Dead Letter Channel] can be viewed as a global scope.
{tip}


h3. Redelivery default values
In *Camel 2.0* redelivery is disabled by default, as opposed to Camel 1.x in which [Dead Letter Channel] is configured with {{maximumRedeliveries=5}}.

The default redeliver policy will use the following values:
* maximumRedeliveries=0 (in Camel 1.x the default value is 5)
* redeliverDelay=1000L (1 second, *new as of Camel 2.0*)
** use initialRedeliveryDelay for previous versions
* maximumRedeliveryDelay = 60 * 1000L (60 seconds)
* And the exponential backoff and collision avoidance is turned off.
* The retriesExhaustedLogLevel are set to LoggingLevel.ERROR 
* The retryAttemptedLogLevel are set to LoggingLevel.DEBUG
* Stack traces is logged for exhausted messages from Camel 2.2 onwards.
* Handled exceptions is not logged from Camel 2.3 onwards

The maximum redeliver delay ensures that a delay is never longer than the value, default 1 minute. This can happen if you turn on the exponential backoff.

The maximum redeliveries is the number of *re* delivery attempts. By default Camel will try to process the exchange 1 + 5 times. 1 time for the normal attempt and then 5 attempts as redeliveries.
Setting the maximumRedeliveries to a negative value such as -1 will then always redelivery (unlimited).
Setting the maximumRedeliveries to 0 will disable any re delivery attempt.

Camel will log delivery failures at the DEBUG logging level by default. You can change this by specifying retriesExhaustedLogLevel and/or retryAttemptedLogLevel. See [ExceptionBuilderWithRetryLoggingLevelSetTest|http://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/builder/ExceptionBuilderWithRetryLoggingLevelSetTest.java] for an example. 

In Camel 2.0 you can turn logging of stack traces on/off. If turned off Camel will still log the redelivery attempt. Its just much less verbose.

h4. Redeliver Delay Pattern
*Available as of Camel 2.0*
Delay pattern is used as a single option to set a range pattern for delays. If used then the following options does not apply: (delay, backOffMultiplier, useExponentialBackOff, useCollisionAvoidance, maximumRedeliveryDelay).

The idea is to set groups of ranges using the following syntax: {{limit:delay;limit 2:delay 2;limit 3:delay 3;...;limit N:delay N}}

Each group has two values separated with colon
- limit = upper limit
- delay = delay in millis
And the groups is again separated with semi colon.
The rule of thumb is that the next groups should have a higher limit than the previous group.

Lets clarify this with an example:
{{delayPattern=5:1000;10:5000;20:20000}}

That gives us 3 groups:
- 5:1000
- 10:5000
- 20:20000

Resulting in these delays for redelivery attempt:
- Attempt number 0..4 = 0 millis (as the first group start with 5)
- Attempt number 5..9 = 1000 millis (the first group)
- Attempt number 10..19 = 5000 millis (the second group)
- Attempt number 20.. = 20000 millis (the last group)

You can start a group with limit 0 to eg have a starting delay: {{delayPattern=0:1000;5:5000}}
- Attempt number 0..4 = 1000 millis (the first group)
- Attempt number 5.. = 5000 millis (the last group)

There is no requirement that the next delay should be higher than the previous. You can use any delay value you like. For example with {{delayPattern=0:5000;3:1000}} we start with 5 sec delay and then later reduce that to 1 second.

h3. Redelivery header

When a message is redelivered the [DeadLetterChannel|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/DeadLetterChannel.html] will append a customizable header to the message to indicate how many times its been redelivered. 
In Camel 1.x: The header is *org.apache.camel.redeliveryCount*.
In Camel 2.0: The header is *CamelRedeliveryCounter*, which is also defined on the {{Exchange.REDELIVERY_COUNTER}}.

And a boolean flag whether it is being redelivered or not (first attempt)
In Camel 1.x: The header *org.apache.camel.Redelivered* contains a boolean if the message is redelivered or not.
In Camel 2.0: The header *CamelRedelivered* contains a boolean if the message is redelivered or not, which is also defined on the {{Exchange.REDELIVERED}}.

h4. Which endpoint failed
*Available as of Camel 2.1*

When Camel routes messages it will decorate the [Exchange] with a property that contains the *last* endpoint Camel send the [Exchange] to:
{code}
String lastEndpointUri = exchange.getProperty(Exchange.TO_ENDPOINT, String.class);
{code}
The {{Exchange.TO_ENDPOINT}} have the constant value {{CamelToEndpoint}}.

This information is updated when Camel sends a message to any endpoint. So if it exists its the *last* endpoint which Camel send the Exchange to.

When for example processing the [Exchange] at a given [Endpoint] and the message is to be moved into the dead letter queue, then Camel also decorates the Exchange with another property that contains that *last* endpoint:
{code}
String failedEndpointUri = exchange.getProperty(Exchange.FAILURE_ENDPOINT, String.class);
{code}
The {{Exchange.FAILURE_ENDPOINT}} have the constant value {{CamelFailureEndpoint}}.

This allows for example you to fetch this information in your dead letter queue and use that for error reporting.
This is useable if the Camel route is a bit dynamic such as the dynamic [Recipient List] so you know which endpoints failed.

*Notice:* These information is kept on the Exchange even if the message was successfully processed by a given endpoint, and then later fails for example in a local [Bean] processing instead. So beware that this is a hint that helps pinpoint errors.

{code}
from("activemq:queue:foo")
    .to("http://someserver/somepath")
    .beanRef("foo");
{code}

Now suppose the route above and a failure happens in the {{foo}} bean. Then the {{Exchange.TO_ENDPOINT}} and {{Exchange.FAILURE_ENDPOINT}} will still contain the value of {{http://someserver/somepath}}.


h3. Samples
The following example shows how to configure the Dead Letter Channel configuration using the [DSL]
{snippet:id=e3|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java}

You can also configure the [RedeliveryPolicy|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/processor/RedeliveryPolicy.html] as this example shows
{snippet:id=e4|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java}

h3. How can I modify the Exchange before redelivery?
In *Camel 1.6.0* we added support directly in [Dead Letter Channel] to set a [Processor] that is executed *before* each redelivery attempt. 

When [Dead Letter Channel] is doing redeliver its possible to configure a [Processor] that is executed just *before* every redelivery attempt. This can be used for the situations where you need to alter the message before its redelivered.  

Here we configure the [Dead Letter Channel] to use our processor {{MyRedeliveryProcessor}} to be executed before each redelivery.
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelOnRedeliveryTest.java}

And this is the processor {{MyRedeliveryProcessor}} where we alter the message. 
{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelOnRedeliveryTest.java}

{include:Using This Pattern}
- [Error Handler]
- [Exception Clause]
