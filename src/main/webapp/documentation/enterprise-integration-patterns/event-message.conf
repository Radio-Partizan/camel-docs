h2. Event Message

Camel supports the [Event Message|http://www.enterpriseintegrationpatterns.com/EventMessage.html] from the [EIP patterns|Enterprise Integration Patterns] by supporting the [Exchange Pattern] on a [Message] which can be set to *InOnly* to indicate a oneway event message. Camel [Components] then implement this pattern using the underlying transport or protocols.

!http://www.enterpriseintegrationpatterns.com/img/EventMessageSolution.gif!

The default behaviour of many [Components] is InOnly such as for [JMS] or [SEDA]

h3. Explicitly specifying InOnly

If you are using a component which defaults to InOut you can override the [Exchange Pattern] for an endpoint using the pattern property.

{code}
foo:bar?exchangePattern=InOnly
{code}

From 2.0 onwards on Camel you can specify the [Exchange Pattern] using the dsl.

{code}
from("mq:someQueue").
  inOnly().
  bean(Foo.class);
{code}

or you can invoke an endpoint with an explicit pattern

{code}
from("mq:someQueue").
  inOnly("mq:AnotherQueue");
{code}

{include:Using This Pattern}