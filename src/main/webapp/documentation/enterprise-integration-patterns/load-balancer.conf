h3. Load Balancer

The Load Balancer Pattern allows you to delegate to one of a number of endpoints using a variety of different load balancing policies.

h3. Build in load balancing policies

Camel has out of the box the following policies:
|| Policy || Description ||
| [Round Robin|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/loadbalancer/RoundRobinLoadBalancer.html] | The exchanges is selected in a round robin fashion. This is a well known and classic policy. This spreads the load even. |
| [Random|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/loadbalancer/RandomLoadBalancer.html] | A random endpoint is selected for each exchange |
| [Sticky|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/loadbalancer/StickyLoadBalancer.html] | Sticky load balancing using an Expression to calculate a correlation key to perform the sticky load balancing; rather like jsessionid in the web or JMSXGroupID in JMS. |
| [Topic|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/loadbalancer/TopicLoadBalancer.html] | Topic which sends to all destinations (rather like JMS Topics) |
| [Failover|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/loadbalancer/FailOverLoadBalancer.html] | *Camel 2.0:* In case of failures the exchange is tried on the next endpoint. |

h3. Round Robin

*Camel 1.x behavior*
The round robin load balancer can actually be used to failover with Camel 1.x. This is no longer possible in Camel 2.x as the underlying [Error Handler] foundation has been significantly overhauled in Camel 2.x. Frankly the round robin load balancer in Camel 1.x was not thought to be used in a failover scenario.

*Camel 2.x behavior*
The round robin load balancer is not meant to work with failover, for that you should use the dedicated *failover* load balancer. The round robin load balancer will only change to next endpoint per message.

The round robin load balancer is statefull as it keeps state which endpoint to use next time.

*Using the [Fluent Builders]*
{snippet:id=example|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/RoundRobinLoadBalanceTest.java}

*Using the Spring configuration*
{code:language=xml}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <route>
    <from uri="direct:start"/>
    <loadBalance>        
        <roundRobin/>
        <to uri="mock:x"/>        
        <to uri="mock:y"/>       
        <to uri="mock:z"/>                 
    </loadBalance>
  </route>
</camelContext>
{code}

So the above example will load balance requests from *direct:start* to one of the available *mock endpoint* instances, in this case using a round robbin policy.
For further examples of this pattern in use you could look at the [junit test case|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/LoadBalanceTest.java?view=markup]

h3. Failover
*Available as of Camel 2.0*
The {{failover}} load balancer is capable of trying the next processor in case an [Exchange] failed with an {{exception}} during processing.
You can configure the {{failover}} with a list of specific exception to only failover. If you do not specify any exceptions it will failover over any exceptions. It uses the same strategy for matching exceptions as the [Exception Clause] does for the *onException*.

It has the following options:
|| Option || Type || Default || Description ||
| inheritErrorHandler | boolean | true | *Camel 2.3:* Whether or not the [Error Handler] configured on the route should be used or not. You can disable it if you want the failover to trigger immediately and failover to the next endpoint. On the other hand if you have this option enabled, then Camel will first let the [Error Handler] try to process the message. The [Error Handler] may have been configured to redelivery and use delays between attempts. If you have enabled a number of redeliveries then Camel will try to redeliver to the *same* endpoint, and only failover to the next endpoint, when the [Error Handler] is exhausted. |
| maximumFailoverAttempts | int | -1 | *Camel 2.3:* A value to indicate after X failver attempts we should exhaust (give up). Use -1 to indicate newer give up and always try to failover. Use 0 to newer failover. And use e.g. 3 to failover at most 3 times before giving up. This option can be used whether or not round robin is enabled or not. |
| roundRobin | boolean | false | *Camel 2.3:* Whether or not the {{failover}} load balancer should operate in round robin mode or not. If not, then it will *always* start from the first endpoint when a new message is to be processed. In other words it restart from the top for every message. If round robin is enabled, then it keeps state and will continue with the next endpoint in a round robin fashion. When using round robin it will not _stick_ to last known good endpoint, it will always pick the next endpoint to use. |

*Camel 2.2 or older behavior*
The current implement of failover load balancer is a simple logic which *always* tries the first endpoint, and in case of an exception being thrown it tries the next in the list, and so forth. It has no state, and the next message will thus *always* start with the first endpoint.

*Camel 2.3 onwards behavior*
The {{failover}} load balancer now supports round robin mode, which allows you to failover in a round robin fashion. See the {{roundRobin}} option.

{note:title=Redelivery must be enabled}
In Camel 2.2 or older the failover load balancer requires you have enabled Camel [Error Handler] to use redelivery. In Camel 2.3 onwards this is not required as such, as you can mix and match. See the {{inheritErrorHandler}} option.
{note}

Here is a sample to failover only if a {{IOException}} related exception was thrown:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/FailOverNotCatchedExceptionTest.java} 

You can specify multiple exceptions to failover as the option is varargs, for instance:
{code:java}
// enable redelivery so failover can react
errorHandler(defaultErrorHandler().maximumRedeliveries(5));

from("direct:foo").
    loadBalance().failover(IOException.class, MyOtherException.class)
        .to("direct:a", "direct:b");
{code}

h4. Using failover in Spring DSL
Failover can also be used from Spring DSL and you configure it as:
{code:xml}
   <route errorHandlerRef="myErrorHandler">
      <from uri="direct:foo"/>
      <loadBalance>
          <failover>
              <exception>java.io.IOException</exception>
              <exception>com.mycompany.MyOtherException</exception>
          </failover>
          <to uri="direct:a"/>
          <to uri="direct:b"/>
      </loadBalance>
    </route>
{code}

h4. Using failover in round robin mode

An example using Java DSL:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/FailoverRoundRobinTest.java} 

And the same example using Spring XML:
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/FailoverRoundRobinTest.xml} 

{tip:title=Disabled inheritErrorHandler}
You can configure {{inheritErrorHandler=false}} if you want to failover to the next endpoint as fast as possible. By disabling the [Error Handler] you ensure it does not _intervene_ which allows the {{failover}} load balancer to handle failover asap. By also enabling {{roundRobin}} mode, then it will keep retrying until it success. You can then configure the {{maximumFailoverAttempts}} option to a high value to let it eventually exhaust (give up) and fail.
{tip}

{include:Using This Pattern}