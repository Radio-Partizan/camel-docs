h2. Sort
*Available as of Camel 2.0*

Sort can be used to sort a message. Imagine you consume text files and before processing each file you want to be sure the content is sorted.

Sort will by default sort the body using a default comparator that handles numeric values or uses the string representation. You can provide your own comparator, and even an expression to return the value to be sorted. Sort requires the value returned from the expression evaluation is convertible to {{java.util.List}} as this is required by the JDK sort operation.


h3. Using from Java DSL
In the route below it will read the file content and tokenize by line breaks so each line can be sorted. 
{code}
from("file://inbox").sort(body().tokenize("\n")).to("bean:MyServiceBean.processLine");
{code}

You can pass in your own comparator as a 2nd argument:
{code}
from("file://inbox").sort(body().tokenize("\n"), new MyReverseComparator()).to("bean:MyServiceBean.processLine");
{code}


h3. Using from Spring DSL
In the route below it will read the file content and tokenize by line breaks so each line can be sorted. 
{code:xml}
<route>
  <from uri="file://inbox"/>
  <sort>
    <tokenizer token="\n"/>
  </sort>
  <beanRef ref="myServiceBean" method="processLine"/>
</route>
{code}

And to use our own comparator we can refer to it as a spring bean:
{code:xml}
<route>
  <from uri="file://inbox"/>
  <sort comparatorRef="myReverseComparator">
    <tokenizer token="\n"/>
  </sort>
  <beanRef ref="MyServiceBean" method="processLine"/>
</route>

<bean id="myReverseComparator" class="com.mycompany.MyReverseComparator"/>
{code}


{include:Using This Pattern}