---
title: Pipes and Filters
page_version: 7
page_creator: jstrachan
page_modifier: hadrian@apache.org
--- pipeline:conf
h3. Pipes and Filters

Camel supports the [Pipes and Filters|http://www.enterpriseintegrationpatterns.com/PipesAndFilters.html] from the [EIP patterns|Enterprise Integration Patterns] in various ways.

!http://www.enterpriseintegrationpatterns.com/img/PipesAndFilters.gif!

With Camel you can split your processing across multiple independent [Endpoint] instances which can then be chained together.

h4. Using Routing Logic

You can create pipelines of logic using multiple [Endpoint] or [Message Translator] instances as follows

{snippet:id=example|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/PipelineTest.java}

Though pipeline is the default mode of operation when you specify multiple outputs in Camel. The opposite to pipeline is multicast; which fires the same message into each of its outputs. (See the example below).

In Spring XML you can use the <pipeline/> element as of 1.4.0 onwards

{code}
<route>
  <from uri="activemq:SomeQueue"/>
  <pipeline>
    <bean ref="foo"/>
    <bean ref="bar"/>
    <to uri="activemq:OutputQueue"/>
  </pipeline>
</route>
{code}

In the above the pipeline element is actually unnecessary, you could use this...

{code}
<route>
  <from uri="activemq:SomeQueue"/>
  <bean ref="foo"/>
  <bean ref="bar"/>
  <to uri="activemq:OutputQueue"/>
</route>
{code}

Its just a bit more explicit. However if you wish to use <multicast/> to avoid a pipeline - to send the same message into multiple pipelines - then the <pipeline/> element comes into its own.

{code}
<route>
  <from uri="activemq:SomeQueue"/>
  <multicast>
    <pipeline>
      <bean ref="something"/>
      <to uri="log:Something"/>
    </pipeline>
    <pipeline>
      <bean ref="foo"/>
      <bean ref="bar"/>
      <to uri="activemq:OutputQueue"/>
    </pipeline>
  </multicast>
</route>
{code}




In the above example we are routing from a single [Endpoint] to a list of different endpoints specified using [URIs]. If you find the above a bit confusing, try reading about the [Architecture] or try the [Examples]

{include:Using This Pattern}