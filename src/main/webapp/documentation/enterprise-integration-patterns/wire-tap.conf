h3. Wire Tap

The [Wire Tap|http://www.enterpriseintegrationpatterns.com/WireTap.html] from the [EIP patterns|Enterprise Integration Patterns] allows you to route messages to a separate tap location while it is forwarded to the ultimate destination.

!http://www.enterpriseintegrationpatterns.com/img/WireTap.gif!

h3. WireTap node
*Available as of Camel 2.0*

In Camel 2.0 we have introduced a new *wireTap* node for properly doing wire taps. Camel will copy the original [Exchange] and set its [Exchange Pattern] to *InOnly* as we want the tapped [Exchange] to be sent as a _fire and forget_ style. The tapped [Exchange] is then send in a separate thread so it can run in parallel with the original 

We have extended the *wireTap* to support two flavors when tapping an [Exchange]
- send a copy of the original [Exchange] (the traditional wire tap)
- send a new [Exchange], allowing you to populate the [Exchange] beforehand

h4. Sending a copy (traditional wire tap)
*Using the [Fluent Builders]*
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/WireTapTest.java}

*Using the [Spring XML Extensions]*
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringWireTapTest.xml}

h4. Sending a new [Exchange]
*Using the [Fluent Builders]*
Camel supports either a processor or an [Expression] to populate the new [Exchange]. Using processor gives you full power how the [Exchange] is populated as you can set properties, headers etc. The [Expression] can only be used to set the IN body. 

From *Camel 2.3* onwards the [Expression] or [Processor] is pre populated with a copy of the original [Exchange] which allows you to access the original message when you prepare the new [Exchange] to be sent. You can use the {{copy}} option to indicate if you want this or not (default is enabled). If your turn {{copy=false}} then it works as in Camel 2.2 or older, where the [Exchange] always will be empty.

Below is the processor variation shown. This example is from Camel 2.3, where we disable {{copy}} by passing in {{false}}. This will create a new empty [Exchange]. 
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/WireTapUsingFireAndForgetTest.java}

And the [Expression] variation. This example is from Camel 2.3, where we disable {{copy}} by passing in {{false}}. This will create a new empty [Exchange]. 
{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/WireTapUsingFireAndForgetTest.java}

*Using the [Spring XML Extensions]*
The processor variation, notice we use a *processorRef* attribute to refer to a spring bean with this id: 
{snippet:id=e2|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringWireTapUsingFireAndForgetTest.xml}

And the [Expression] variation, where the expression is defined in the *body* tag: 
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringWireTapUsingFireAndForgetTest.xml}

And this variation accesses the body of the original message and creates a new [Exchange] which is based on the [Expression].
It will create a new Exchange and have the body contain {{"Bye ORIGINAL BODY MESSAGE HERE"}}
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/SpringWireTapUsingFireAndForgetCopyTest.xml}

h3. Camel 1.x
The following example shows how to route a request from an input *queue:a* endpoint to the wire tap location *queue:tap* it is received by *queue:b*

*Using the [Fluent Builders]*
{snippet:id=e6|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}

*Using the [Spring XML Extensions]*
{snippet:id=example|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildWireTap.xml}

h4. Further Example

For another example of this pattern in use you could look at the [wire tap test case|http://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/WireTapTest.java].

{include:Using This Pattern}