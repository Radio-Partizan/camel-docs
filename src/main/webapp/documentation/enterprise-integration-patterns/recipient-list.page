---
title: Recipient List
page_version: 32
page_creator: jstrachan
page_modifier: joed
--- pipeline:conf
h3. Recipient List

The [Recipient List|http://www.enterpriseintegrationpatterns.com/RecipientList.html] from the [EIP patterns|Enterprise Integration Patterns] allows you to route messages to a number of dynamically specified recipients.

!http://www.enterpriseintegrationpatterns.com/img/RecipientList.gif!

The recipients will receive a copy of the *same* [Exchange] and Camel will execute them sequentially.

h4. Static Recipient List

The following example shows how to route a request from an input *queue:a* endpoint to a static list of destinations

*Using Annotations*
You can use the [RecipientList Annotation] on a POJO to create a Dynamic Recipient List. For more details see the [Bean Integration].

*Using the [Fluent Builders]*
{snippet:id=multicast|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}

*Using the [Spring XML Extensions]*
{snippet:id=example|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildStaticRecipientList.xml}

h4. Dynamic Recipient List

Usually one of the main reasons for using the [Recipient List|http://www.enterpriseintegrationpatterns.com/RecipientList.html] pattern is that the list of recipients is dynamic and calculated at runtime. The following example demonstrates how to create a dynamic recipient list using an [Expression] (which in this case it extracts a named header value dynamically) to calculate the list of endpoints which are either of type [Endpoint|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/Endpoint.html] or are converted to a String and then resolved using the endpoint [URIs].

*Using the [Fluent Builders]*
{snippet:id=e9|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}

The above assumes that the header contains a list of endpoint URIs. The following takes a single string header and tokenizes it
{snippet:id=example|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/RecipientListTest.java}

h5. Iteratable value
The dynamic list of recipients that are defined in the header must be iteratable such as:
- {{java.util.Collection}}
- {{java.util.Iterator}}
- arrays
- {{org.w3c.dom.NodeList}}
- *Camel 1.6.0:* a single String with values separated with comma
- any other type will be regarded as a single value

*Using the [Spring XML Extensions]*
{snippet:id=example|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/xml/buildDynamicRecipientList.xml}

For further examples of this pattern in use you could look at one of the [junit test case|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/RecipientListTest.java?view=markup]

h5. Using delimiter in Spring XML
*Available as of Camel 1.6.0*
In Spring DSL you can set the {{delimiter}} attribute for setting a delimiter to be used if the header value is a single String with multiple separated endpoints. By default Camel uses comma as delimiter, but this option lets you specify a customer delimiter to use instead.

{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/recipientListWithStringDelimitedHeader.xml}

So if *myHeader* contains a String with the value {{"activemq:queue:foo, activemq:topic:hello , log:bar"}} then Camel will split the String using the delimiter given in the XML that was comma, resulting into 3 endpoints to send to. You can use spaces between the endpoints as Camel will trim the value when it lookup the endpoint to send to. 

Note: In Java DSL you use the {{tokenizer}} to archive the same. The route above in Java DSL:
{code}
    from("direct:a").recipientList(header("myHeader").tokenize(","));
{code}

In *Camel 2.1* its a bit easier as you can pass in the delimiter as 2nd parameter:
{code}
    from("direct:a").recipientList(header("myHeader"), "#");
{code}

h3. Sending to multiple recipients in parallel
*Available as of Camel 2.2*

The [Recipient List] now supports {{parallelProcessing}} that for example [Splitter] also supports. You can use it to use a thread pool to have concurrent tasks sending the [Exchange] to multiple recipients concurrently.

{code}
    from("direct:a").recipientList(header("myHeader")).parallelProcessing();
{code}

And in Spring XML its an attribute on the recipient list tag.

{code}
   <route>
       <from uri="direct:a"/>
       <recipientList parallelProcessing="true">
           <header>myHeader</header>
       </recipientList>
   </route>
{code}

h3. Stop continuing in case one recipient failed
*Available as of Camel 2.2*

The [Recipient List] now supports {{stopOnException}} that for example [Splitter] also supports. You can use it to stop sending to any further recipients in case any recipient failed. 

{code}
    from("direct:a").recipientList(header("myHeader")).stopOnException();
{code}

And in Spring XML its an attribute on the recipient list tag.

{code}
   <route>
       <from uri="direct:a"/>
       <recipientList stopOnException="true">
           <header>myHeader</header>
       </recipientList>
   </route>
{code}

*Note:* You can combine {{parallelProcessing}} and {{stopOnException}} and have them both {{true}}.

h3. Ignore invalid endpoints
*Available as of Camel 2.3*

The [Recipient List] now supports {{ignoreInvalidEndpoints}} which the [Routing Slip] also supports. You can use it to skip endpoints which is invalid.

{code}
    from("direct:a").recipientList(header("myHeader")).ignoreInvalidEndpoints();
{code}

And in Spring XML its an attribute on the recipient list tag.

{code}
   <route>
       <from uri="direct:a"/>
       <recipientList ignoreInvalidEndpoints="true">
           <header>myHeader</header>
       </recipientList>
   </route>
{code}

Then lets say the {{myHeader}} contains the following two endpoints {{direct:foo,xxx:bar}}. The first endpoint is valid and works. However the 2nd is invalid and will just be ignored. Camel logs at INFO level about, so you can see why the endpoint was invalid.


h3. Using custom {{AggregationStrategy}}
*Available as of Camel 2.2*

You can now use you own {{AggregationStrategy}} with the [Recipient List]. However its not that often you need that. What its good for is that in case you are using [Request Reply] messaging then the replies from the recipient can be aggregated. By default Camel uses {{UseLatestAggregationStrategy}} which just keeps that last received reply. What if you must remember all the bodies that all the recipients send back, then you can use your own custom aggregator that keeps those. Its the same principle as with the [Aggregator] EIP so check it out for details.

{code}
    from("direct:a")
        .recipientList(header("myHeader")).aggregationStrategy(new MyOwnAggregationStrategy())
        .to("direct:b");
{code}


And in Spring XML its an attribute on the recipient list tag.

{code}
   <route>
       <from uri="direct:a"/>
       <recipientList strategyRef="myStrategy">
           <header>myHeader</header>
       </recipientList>
       <to uri="direct:b"/>
   </route>

   <bean id="myStrategy" class="com.mycompany.MyOwnAggregationStrategy"/>
{code}

h3. Using custom thread pool
*Available as of Camel 2.2*

This is only needed when you use {{parallelProcessing}}. By default Camel uses a thread pool with 10 threads. Notice this is subject to change when we overhaul thread pool management and configuration later (hopefully in Camel 2.2).

You configure this just as you would with the custom aggregation strategy.

h3. Using method call as recipient list
You can use a [Bean] to provide the recipients, for example:
{code}
from("activemq:queue:test").recipientList().method(MessageRouter.class, "routeTo");
{code}

And then {{MessageRouter}}:
{code}
public class MessageRouter {

    public String routeTo() {
        String queueName = "activemq:queue:test2";
        return queueName;
    }
}
{code}

When you use a [Bean] then do *not* also use the {{@RecipientList}} annotation as this will in fact add yet another recipient list, so you end up having two. Do *not* do like this.

{code}
public class MessageRouter {

    @RecipientList
    public String routeTo() {
        String queueName = "activemq:queue:test2";
        return queueName;
    }
}
{code}

Well you should only do like that above (using {{@RecipientList}}) if you route just route to a [Bean] which you then want to act as a recipient list.
So the original route can be changed to:
{code}
from("activemq:queue:test").bean(MessageRouter.class, "routeTo");
{code}
Which then would invoke the routeTo method and detect its annotated with {{@RecipientList}} and then act accordingly as if it was a recipient list EIP.


h3. Using timeout
*Available as of Camel 2.5*

If you use {{parallelProcessing}} then you can configure a total {{timeout}} value in millis. Camel will then process the messages in parallel until the timeout is hit. This allows you to continue processing if one message is slow. For example you can set a timeout value of 20 sec.

For example in the unit test below you can see we multicast the message to 3 destinations. We have a timeout of 2 seconds, which means only the last two messages can be completed within the timeframe. This means we will only aggregate the last two which yields a result aggregation which outputs {{"BC"}}.
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/MulticastParallelTimeoutTest.java}

{tip:title=Timeout in other EIPs}
This {{timeout}} feature is also supported by [Splitter] and both {{multicast}} and {{recipientList}}.
{tip}

By default if a timeout occurs the {{AggregationStrategy}} is not invoked. However you can implement a specialized version
{code:java:title=TimeoutAwareAggregationStrategy}
public interface TimeoutAwareAggregationStrategy extends AggregationStrategy {

    /**
     * A timeout occurred
     *
     * @param oldExchange  the oldest exchange (is <tt>null</tt> on first aggregation as we only have the new exchange)
     * @param index        the index
     * @param total        the total
     * @param timeout      the timeout value in millis
     */
    void timeout(Exchange oldExchange, int index, int total, long timeout);
{code}

This allows you to deal with the timeout in the {{AggregationStrategy}} if you really need to. 

{info:title=Timeout is total}
The timeout is total, which means that after X time, Camel will aggregate the messages which has completed within the timeframe. The remainders will be cancelled. Camel will also only invoke the {{timeout}} method in the {{TimeoutAwareAggregationStrategy}} once, for the first index which caused the timeout.
{info}

{include:Using This Pattern}
