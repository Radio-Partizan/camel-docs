---
title: Transactional Client
page_version: 23
page_creator: chirino
page_modifier: davsclaus
--- pipeline:conf
h3. Transactional Client
Camel recommends supporting the [Transactional Client|http://www.enterpriseintegrationpatterns.com/TransactionalClient.html] from the [EIP patterns|Enterprise Integration Patterns] using spring transactions.

!http://www.enterpriseintegrationpatterns.com/img/TransactionalClientSolution.gif!

Transaction Oriented Endpoints ([Camel Toes|What is a Camel TOE]) like [JMS] support using a transaction for both inbound and outbound message exchanges.  Endpoints that support transactions will participate in the current transaction context that they are called from.

{info:title=Convention over configuration}
In Camel 2.0 onwards we have improved the default configuration reducing the number of Spring XML gobble you need to configure.
In this wiki page we provide the Camel 1.x examples and the same 2.0 example that requires less XML setup.
{info}

{tip:title=Configuration of Redelivery}
The redelivery in transacted mode is *not* handled by Camel but by the backing system (the transaction manager). In such cases you should resort to the backing system how to configure the redelivery. 
{tip}

You should use the [SpringRouteBuilder|http://camel.apache.org/maven/camel-spring/apidocs/org/apache/camel/spring/SpringRouteBuilder.html] to setup the routes since you will need to setup the spring context with the [TransactionTemplate|http://www.springframework.org/docs/api/org/springframework/transaction/support/TransactionTemplate.html]s that will define the transaction manager configuration and policies.

For inbound endpoint to be transacted, they normally need to be configured to use a Spring [PlatformTransactionManager|http://www.springframework.org/docs/api/org/springframework/transaction/PlatformTransactionManager.html].  In the case of the JMS component, this can be done by looking it up in the spring context.

You first define needed object in the spring configuration.

{code:xml}
  <bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
    <property name="connectionFactory" ref="jmsConnectionFactory" />
  </bean>
  
  <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="tcp://localhost:61616"/>
  </bean>
{code}

Then you look them up and use them to create the JmsComponent.

{code:java}
  PlatformTransactionManager transactionManager = (PlatformTransactionManager) spring.getBean("jmsTransactionManager");
  ConnectionFactory connectionFactory = (ConnectionFactory) spring.getBean("jmsConnectionFactory");
  JmsComponent component = JmsComponent.jmsComponentTransacted(connectionFactory, transactionManager);
  component.getConfiguration().setConcurrentConsumers(1);
  ctx.addComponent("activemq", component);
{code}


h4. Transaction Policies

Outbound endpoints will automatically enlist in the current transaction context.  But what if you do not want your outbound endpoint to enlist in the same transaction as your inbound endpoint?  The solution is to add a Transaction Policy to the processing route.  You first have to define transaction policies that you will be using.  The policies use a spring [TransactionTemplate|http://www.springframework.org/docs/api/org/springframework/transaction/support/TransactionTemplate.html] under the covers for declaring the transaction demarcation to use.  So you will need to add something like the following to your spring xml:

{code:xml}
  <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
    <property name="transactionManager" ref="jmsTransactionManager"/>
  </bean>

  <bean id="PROPAGATION_REQUIRES_NEW" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
    <property name="transactionManager" ref="jmsTransactionManager"/>
    <property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW"/>
  </bean>
{code}

Then in your [SpringRouteBuilder|http://camel.apache.org/maven/camel-spring/apidocs/org/apache/camel/spring/SpringRouteBuilder.html], you just need to create new SpringTransactionPolicy objects for each of the templates.

{code:java}
public void configure() {
   ...
   Policy requried = bean(SpringTransactionPolicy.class, "PROPAGATION_REQUIRED"));
   Policy requirenew = bean(SpringTransactionPolicy.class, "PROPAGATION_REQUIRES_NEW"));
   ...
}
{code}

Once created, you can use the Policy objects in your processing routes:
{code:java}

   // Send to bar in a new transaction
   from("activemq:queue:foo").policy(requirenew).to("activemq:queue:bar");

   // Send to bar without a transaction.
   from("activemq:queue:foo").policy(notsupported ).to("activemq:queue:bar");

{code}

h3. Camel 1.x - Database Sample
In this sample we want to ensure that two endpoints is under transaction control. These two endpoints inserts data into a database.
The sample is in its full as a [unit test|http://svn.apache.org/viewvc/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTest.java?view=log].

First of all we setup the usual spring stuff in its configuration file. Here we have defined a DataSource to the HSQLDB and a most importantly
the Spring DataSoruce TransactionManager that is doing the heavy lifting of ensuring our transactional policies. You are of course free to use any
of the Spring based TransactionMananger, eg. if you are in a full blown J2EE container you could use JTA or the WebLogic or WebSphere specific managers.

We use the required transaction policy that we define as the {{PROPOGATION_REQUIRED}} spring bean. And as last we have our book service bean that does the business logic
and inserts data in the database as our core business logic.
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/transactionalClientDataSource.xml}

In our Camel route that is Java DSL based we setup the transactional policy, wrapped as a Policy.
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTest.java}

Then we are ready to define our Camel routes. We have two routes: 1 for success conditions, and 1 for a forced rollback condition.
This is after all based on a unit test.
{snippet:id=e2|lang=java|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTest.java}

As its a unit test we need to setup the database and this is easily done with Spring JdbcTemplate
{snippet:id=e5|lang=java|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTest.java}

And our core business service, the book service, will accept any books except the Donkeys.
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/BookService.java}

Then we are ready to fire the tests. First to commit condition:
{snippet:id=e3|lang=java|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTest.java}

And lastly the rollback condition since the 2nd book is a Donkey book:
{snippet:id=e4|lang=java|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTest.java}

h3. Camel 1.x - JMS Sample
In this sample we want to listen for messages on a queue and process the messages with our business logic java code and send them along. Since its based on a [unit test|http://svn.apache.org/viewvc/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/JMSTransactionalClientTestjava?view=log] the destination is a mock endpoint.

This time we want to setup the camel context and routes using the Spring XML syntax.
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMSTransactionalClientTest.xml}

Since the rest is standard XML stuff its nothing fancy now for the reader:
{snippet:id=e2|lang=xml|url=camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/JMSTransactionalClientTest.xml}

Our business logic is set to handle the incomming messages and fail the first two times. When its a success it responds with a {{Bye World}} message.
{snippet:id=e2|lang=java|url=camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/JMSTransactionalClientTest.java}

And our unit test is tested with this java code. Notice that we expect the {{Bye World}} message to be delivered at the 3rd attempt.
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/JMSTransactionalClientTest.java}

h3. Camel 1.x - Spring based configuration
In Camel 1.4 we have introduced the concept of configuration of the error handlers using spring XML configuration. The sample below demonstrates that you can configure transaction error handlers in Spring XML as spring beans. These can then be set as global, per route based or per policy based error handler. The latter has been demonstrated in the samples above. This sample is the database sample configured in Spring XML.

Notice that we have defined two error handler, one per route. The first route uses the transaction error handler, and the 2nd uses no error handler at all.

{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactionErrorHandlerBuilderAsSpringBeanTest.xml}

The following snippet is the Spring XML configuration to setup the error handlers in pure spring XML:
{snippet:id=e2|lang=xml|url=camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactionErrorHandlerBuilderAsSpringBeanTest.xml}

h4. DelayPolicy (@deprecated)
[DelayPolicy|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/DelayPolicy.html] is a new policy introduced in Camel 1.5, to replaces the RedeliveryPolicy used in Camel 1.4. Notice the {{transactionErrorHandler}} can be configured with a DelayPolicy to set a fixed delay in millis between each redelivery attempt. Camel does this by sleeping the delay until transaction is marked for rollback and the caused exception is rethrown.

This allows a simple redelivery interval that can be configured for development mode or light production to avoid a rapid redelivery strategy that can exhaust a system that constantly fails. 

The DelayPolicy is @deprecated and removed in Camel 2.0. All redelivery configuration should be configured on the back system.

*We strongly recommend that you configure the backing system for correct redelivery policy in your environment.*

h3. Camel 2.0 - Database Sample
In this sample we want to ensure that two endpoints is under transaction control. These two endpoints inserts data into a database.
The sample is in its full as a [unit test|http://svn.apache.org/viewvc/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceMinimalConfigurationTest.java?view=log].

First of all we setup the usual spring stuff in its configuration file. Here we have defined a DataSource to the HSQLDB and a most importantly
the Spring DataSoruce TransactionManager that is doing the heavy lifting of ensuring our transactional policies. You are of course free to use any
of the Spring based TransactionMananger, eg. if you are in a full blown J2EE container you could use JTA or the WebLogic or WebSphere specific managers.

As we use the new convention over configuration we do *not* need to configure a transaction policy bean, so we do not have any {{PROPAGATION_REQUIRED}} beans.
All the beans needed to be configured is *standard* Spring beans only, eg. there are no Camel specific configuration at all.
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/springTransactionalClientDataSourceMinimalConfiguration.xml}

Then we are ready to define our Camel routes. We have two routes: 1 for success conditions, and 1 for a forced rollback condition.
This is after all based on a unit test. Notice that we mark each route as transacted using the *transacted* tag.
{snippet:id=e2|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/springTransactionalClientDataSourceMinimalConfiguration.xml}

That is all that is needed to configure a Camel route as being transacted. Just remember to use the *transacted* DSL. The rest is standard Spring XML to setup the transaction manager.

h3. Camel 2.0 - JMS Sample
In this sample we want to listen for messages on a queue and process the messages with our business logic java code and send them along. Since its based on a [unit test|http://svn.apache.org/viewvc/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/tx/TransactionMinimalConfigurationTest.java?view=log] the destination is a mock endpoint.

First we configure the standard Spring XML to declare a JMS connection factory, a JMS transaction manager and our ActiveMQ component that we use in our routing.
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactionMinimalConfigurationTest.xml}

And then we configure our routes. Notice that all we have to do is mark the route as transacted using the *transacted* tag.
{snippet:id=e2|lang=xml|url=camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/tx/TransactionMinimalConfigurationTest.xml}

{tip:title=Transaction error handler}
When a route is marked as transacted using *transacted* Camel will automatic use the [TransactionErrorHandler] as [Error Handler]. It supports basically the same feature set as the [DefaultErrorHandler], so you can for instance use [Exception Clause] as well.
{tip}

h2. Using multiple routes with different propagation behaviors
*Available as of Camel 2.2*
Suppose you want to route a message through two routes and by which the 2nd route should run in its own transaction. How do you do that? You use propagation behaviors for that where you configure it as follows:
- The first route use {{PROPAGATION_REQUIRED}}
- The second route use {{PROPAGATION_REQUIRES_NEW}}

This is configured in the Spring XML file:
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/interceptor/MixedTransactionPropagationTest.xml}

Then in the routes you use transacted DSL to indicate which of these two propagations it uses.
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/MixedTransactionPropagationTest.java}

Notice how we have configured the {{onException}} in the 2nd route to indicate in case of any exceptions we should handle it and just rollback this transaction. 
This is done using the {{markRollbackOnlyLast}} which tells Camel to only do it for the current transaction and not globally.

h4. See Also
* [Error handling in Camel]
* [TransactionErrorHandler]
* [Error Handler]
* [JMS]

{include:Using This Pattern}