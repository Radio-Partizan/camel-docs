h3. Content Enricher

Camel supports the [Content Enricher|http://www.enterpriseintegrationpatterns.com/DataEnricher.html] from the [EIP patterns|Enterprise Integration Patterns] using a [Message Translator], an artibrary [Processor] in the routing logic or using the [enrich|#enrich-dsl] DSL element to enrich the message.

!http://www.enterpriseintegrationpatterns.com/img/DataEnricher.gif!

h4. Content enrichment using a Message Translator or a Processor

*Using the* *[Fluent Builders]*

You can use [Templating] to consume a message from one destination, transform it with something like [Velocity] or [XQuery] and then send it on to another destination. For example using InOnly (one way messaging)
{code}
from("activemq:My.Queue").
  to("velocity:com/acme/MyResponse.vm").
  to("activemq:Another.Queue");
{code}
If you want to use InOut (request-reply) semantics to process requests on the *My.Queue* queue on [ActiveMQ] with a template generated response, then sending responses back to the JMSReplyTo Destination you could use this.
{code}
from("activemq:My.Queue").
  to("velocity:com/acme/MyResponse.vm");
{code}
Here is a simple example using the [DSL] directly to transform the message body
{snippet:id=example|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformViaDSLTest.java}
In this example we add our own [Processor] using explicit Java code
{snippet:id=example|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformTest.java}
Finally we can use [Bean Integration] to use any Java method on any bean to act as the transformer
{code}
from("activemq:My.Queue").
  beanRef("myBeanName", "myMethodName").
  to("activemq:Another.Queue");
{code}
For further examples of this pattern in use you could look at one of the JUnit tests
* [TransformTest|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformTest.java?view=markup]
* [TransformViaDSLTest|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/TransformViaDSLTest.java?view=markup]

*Using Spring XML*
{code}
<route>
  <from uri="activemq:Input"/>
  <bean ref="myBeanName" method="doTransform"/>
  <to uri="activemq:Output"/>
</route>
{code}

{anchor:enrich-dsl}
h4. Content enrichment using the {{enrich}} DSL element

Camel comes with two flavors of content enricher in the DSL
- {{enrich}}
- {{pollEnrich}}

{{enrich}} is using a {{Producer}} to obtain the additional data. It is usually used for [Request Reply] messaging, for instance to invoke an external web service.
{{poolEnrich}} on the other hand is using a [Polling Consumer] to obtain the additional data. It is usually used for [Event Message] messaging, for instance to read a file or download a [FTP|FTP2] file.

This feature is available since Camel 2.0

*Using the* *[Fluent Builders]*

{code}
AggregationStrategy aggregationStrategy = ...

from("direct:start")
.enrich("direct:resource", aggregationStrategy)
.to("direct:result");

from("direct:resource")
...
{code}

The content enricher ({{enrich}}) retrieves additional data from a _resource endpoint_ in order to enrich an incoming message (contained in the _orginal exchange_). An aggregation strategy is used to combine the original exchange and the _resource exchange_. The first parameter of the {{AggregationStrategy.aggregate(Exchange, Exchange)}} method corresponds to the the original exchange, the second parameter the resource exchange. The results from the resource endpoint are stored in the resource exchange's out-message. Here's an example template for implementing an aggregation strategy.

{code:java}
public class ExampleAggregationStrategy implements AggregationStrategy {

    public Exchange aggregate(Exchange original, Exchange resource) {
        Object originalBody = original.getIn().getBody();
        Object resourceResponse = resource.getOut().getBody();
        Object mergeResult = ... // combine original body and resource response
        if (original.getPattern().isOutCapable()) {
            original.getOut().setBody(mergeResult);
        } else {
            original.getIn().setBody(mergeResult);
        }
        return original;
    }
    
}
{code}

Using this template the original exchange can be of any pattern. The resource exchange created by the enricher is always an in-out exchange.

*Using Spring XML*

The same example in the Spring DSL

{code:xml}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <route>
    <from uri="direct:start"/>
    <enrich uri="direct:resource" strategyRef="aggregationStrategy"/>
    <to uri="direct:result"/>
  </route>
  <route>
    <from uri="direct:resource"/>
    ...
  </route>
</camelContext>

<bean id="aggregationStrategy" class="..." />
{code}

h4. Aggregation strategy is optional
The aggregation strategy is optional. If you do not provide it Camel will by default just use the body obtained from the resource.
{code}
from("direct:start")
  .enrich("direct:resource")
  .to("direct:result");
{code}
In the route above the message send to the {{direct:result}} endpoint will contain the output from the {{direct:resource}} as we do not use any custom aggregation.

And in Spring DSL you just omit the {{strategyRef}} attribute:
{code:xml}
  <route>
    <from uri="direct:start"/>
    <enrich uri="direct:resource"/>
    <to uri="direct:result"/>
  </route>
{code}

h4. Content enrich using {{pollEnrich}}
The {{pollEnrich}} works just as the {{enrich}} however as it uses a [Polling Consumer] we have 3 methods when polling
- receive
- receiveNoWait
- receive(timeout)

By default Camel will use the {{receiveNoWait}}. 
If there is no data then the {{newExchange}} in the aggregation strategy is {{null}}. 

You can pass in a timeout value that determines which method to use
- timeout is -1 or negative then {{receive}} is selected
- timeout is 0 then {{receiveNoWait}} is selected
- otherwise {{receive(timeout)}} is selected

The timeout values is in millis.

{warning:title=Data from current Exchange not used}
{{pollEnrich}} does *not* access any data from the current [Exchange] which means when polling it cannot use any of the existing headers you may have set on the [Exchange]. For example you cannot set a filename in the {{Exchange.FILE_NAME}} header and use {{pollEnrich}} to consume only that file. For that you *must* set the filename in the endpoint URI.
{warning}

{include:Using This Pattern}