h2. Log

How can I log processing a [Message]?

Camel provides many ways to log processing a message. Here is just some examples:
- You can use the [Log] component which logs the Message content. 
- You can use the [Tracer] which trace logs message flow.
- You can also use a [Processor] or [Bean] and log from Java code.
- You can use the {{log}} DSL.

h3. Using log DSL

And in *Camel 2.2* you can use the {{log}} DSL which allows you to use [Simple] language to construct a dynamic message which gets logged.
For example you can do

{code}
from("direct:start").log("Processing ${id}").to("bean:foo");
{code}

Which will construct a String message at runtime using the [Simple] language. The log message will by logged at {{INFO}} level using the route id as the log name. By default a route is named {{route-1}}, {{route-2}} etc. But you can use the {{routeId("myCoolRoute")}} to set a route name of choice.

{info:title=Difference between log in the DSL and [Log] component}
The {{log}} DSL is much lighter and meant for logging human logs such as {{Starting to do ...}} etc. It can only log a message based on the [Simple] language. On the other hand [Log] component is a full fledged component which involves using endpoints and etc. The [Log] component is meant for logging the Message itself and you have many URI options to control what you would like to be logged.
{info} 


The log DSL have overloaded methods to set the logging level and/or name as well.

{code}
from("direct:start").log(LoggingLevel.DEBUG, "Processing ${id}").to("bean:foo");
{code}

For example you can use this to log the file name being processed if you consume files.
{code}
from("file://target/files").log(LoggingLevel.DEBUG, "Processing file ${file:name}").to("bean:foo");
{code}

h4. Using log DSL from Spring
In Spring DSL its also easy to use log DSL as shown below:
{code:xml}
        <route id="foo">
            <from uri="direct:foo"/>
            <log message="Got ${body}"/>
            <to uri="mock:foo"/>
        </route>
{code}

The log tag has attributes to set the {{message}}, {{loggingLevel}} and {{logName}}. For example:
{code:xml}
        <route id="baz">
            <from uri="direct:baz"/>
            <log message="Me Got ${body}" loggingLevel="FATAL" logName="cool"/>
            <to uri="mock:baz"/>
        </route>
{code}


{include:Using This Pattern}