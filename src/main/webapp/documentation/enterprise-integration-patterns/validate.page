---
title: Validate
page_version: 1
page_creator: muellerc
page_modifier: muellerc
--- pipeline:conf
h2. Validate
*Available as of Camel 2.3*

Validate can be used to validate a message. Imagine you consume text files and before processing each file you want to be sure the content is valid.

You can use the validate DSL with all kind of Predicates and Expressions. Validate will just evaluated the Predicate/Expression and if its false an PredicateValidationException is thrown.

h3. Using from Java DSL
In the route below it will read the file content and validate it against a regular expression. 
{code}
from("file://inbox")
  .validate(body(String.class).regex("^\\w{10}\\,\\d{2}\\,\\w{24}$"))
.to("bean:MyServiceBean.processLine");
{code}

Validate is not limited to the message body. You can also validate the message header.
{code}
from("file://inbox")
  .validate(header("bar").isGreaterThan(100))
.to("bean:MyServiceBean.processLine");
{code}

And sure, you can use validate together with [simple|http://camel.apache.org/simple.html].
{code}
from("file://inbox")
  .validate(simple("${in.header.bar} == 100"))
.to("bean:MyServiceBean.processLine");
{code}


h3. Using from Spring DSL

To use validate in the Spring DSL, the easiest way is to use [simple|http://camel.apache.org/simple.html].
{code:xml}
<route>
  <from uri="file://inbox"/>
  <validate>
    <simple>${body} regex ^\\w{10}\\,\\d{2}\\,\\w{24}$</simple>
  </validate>
  <beanRef ref="myServiceBean" method="processLine"/>
</route>

<bean id="myServiceBean" class="com.mycompany.MyServiceBean"/>
{code}

The XML DSL to validate the message header would looks like this.
{code:xml}
<route>
  <from uri="file://inbox"/>
  <validate>
    <simple>${in.header.bar} == 100</simple>
  </validate>
  <beanRef ref="myServiceBean" method="processLine"/>
</route>

<bean id="myServiceBean" class="com.mycompany.MyServiceBean"/>
{code}

{include:Using This Pattern}