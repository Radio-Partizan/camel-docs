---
title: Idempotent Consumer
page_version: 16
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
h3. Idempotent Consumer

The [Idempotent Consumer|http://www.enterpriseintegrationpatterns.com/IdempotentReceiver.html] from the [EIP patterns|Enterprise Integration Patterns] is used to filter out duplicate messages. 

This pattern is implemented using the [IdempotentConsumer|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/idempotent/IdempotentConsumer.html] class. This uses an [Expression] to calculate a unique message ID string for a given message exchange; this ID can then be looked up in the [MessageIdRepository|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/idempotent/MessageIdRepository.html] to see if it has been seen before; if it has the message is consumed; if its not then the message is processed and the ID is added to the repository.

The Idempotent Consumer essentially acts like a [Message Filter] to filter out duplicates.

Camel will add the message id eagerly to the repository to detect duplication also for Exchanges currently in progress.
On completion Camel will remove the message id from the repository if the Exchange failed, otherwise it stays there.

h3. Options
The Idempotent Consumer has the following options:

|| Option || Default || Description ||
| eager | true | *Camel 2.0:* Eager controls whether Camel adds the message to the repository before or after the exchange has been processed. If enabled before then Camel will be able to detect duplicate messages even when messages are currently in progress. By disabling Camel will only detect duplicates when a message has successfully been processed. |

*Using the [Fluent Builders]*

The following example will use the header *myMessageId* to filter out duplicates

{snippet:id=idempotent|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}

The above [example|https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java] will use an in-memory based [MessageIdRepository|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/idempotent/MessageIdRepository.html] which can easily run out of memory and doesn't work in a clustered environment. So you might prefer to use the JPA based implementation which uses  a database to store the message IDs which have been processed

{snippet:id=idempotent|lang=java|url=camel/trunk/components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaIdempotentConsumerTest.java}

In the above [example|https://svn.apache.org/repos/asf/camel/trunk/components/camel-jpa/src/test/java/org/apache/camel/processor/jpa/JpaIdempotentConsumerTest.java] we are using the header *messageId* to filter out duplicates and using the collection *myProcessorName* to indicate the Message ID Repository to use. This name is important as you could process the same message by many different processors; so each may require its own logical Message ID Repository.

For further examples of this pattern in use you could look at the [junit test case|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/IdempotentConsumerTest.java?view=markup]

{include:Using This Pattern}
