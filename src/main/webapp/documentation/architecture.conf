h2. Architecture

{excerpt}Camel uses a Java based [Routing Domain Specific Language (DSL)|DSL] or an [Xml Configuration] to configure [routing and mediation rules|Routes] which are added to a [CamelContext|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/CamelContext.html] to implement the various [Enterprise Integration Patterns]. 

At a high level Camel consists of a [CamelContext|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/CamelContext.html] which contains a collection of [Component] instances. A [Component] is essentially a factory of [Endpoint] instances. You can explicitly configure [Component] instances in Java code or an IoC container like Spring or Guice, or they can be auto-discovered using [URIs]. 

An [Endpoint] acts rather like a URI or URL in a web application or a Destination in a JMS system; you can communicate with an endpoint; either sending messages to it or consuming messages from it. You can then create a [Producer|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Producer.html] or [Consumer|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Consumer.html] on an [Endpoint] to exchange messages with it.

The [DSL] makes heavy use of pluggable [Languages] to create an [Expression] or [Predicate] to make a truly powerful DSL which is extensible to the most suitable language depending on your needs. The following languages are supported
{excerpt}
{include:Languages Supported}

h2. Contents

The following links are to the individual parts of the Architecture.

{children:sort=title}

h2. Diagram

!camel-components.png!

