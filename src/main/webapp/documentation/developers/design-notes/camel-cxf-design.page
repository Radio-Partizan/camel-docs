---
title: Camel CXF Design
page_version: 6
page_creator: njiang
page_modifier: joed
--- pipeline:conf
h1. Camel CXF Design

h2. Integrating CXF into Camel

Camel provides a component API , after defined the [endpoint URI format|CXF],  we just need implement the Camel component API by using CXF as a library to create the client and server for camel-cxf component's consumer and producer.
 
h3. CXFConsumer
[CXFConsumer|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java] works as the CXF server, so we create the CXF server with the [CXFEndpoint|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java] which holds the cxf endpoint information such as SEI class, wsdl location, service name and endpoint name etc. You can configure the cxf endpoint according to this [schema|https://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/resources/schema/cxfEndpoint.xsd] in spring.
Now we just leverage the CXF's [invoker|CXF20DOC:Invokers] to override the default invoker by setting a [CamelInvoker|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CamelInvoker.java] to the [ServerFactoryBean|CXF20DOC:Server, Service, and Client FactoryBeans].

h3. CXFProducer
CXF [Client|CXF20DOC:Server, Service, and Client FactoryBeans] is used to send out the incoming message from the [CXFProducer|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java] and pass the response back. 
To support the client which just sends the stream request , we write the [CxfClient|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/CxfClient.java] and [CxfClientFactoryBean|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/invoker/CxfClientFactoryBean.java].

h3. DataFormat
camel-cxf component supports to handle the CXF message with different [DataFormat|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/DataFormat.java].

To get the best reuse of the CXF generic message layer, we use the CXF [feature|CXF20DOC:Features] API to setup the interceptors for different types message handling.
{code:java}
if (!dataFormat.equals(DataFormat.POJO)...) {
   List<AbstractFeature> features = new ArrayList<AbstractFeature>();
   // adding the logging feature here for debug
   features.add(new LoggingFeature());

   if (dataFormat.equals(DataFormat.PAYLOAD)) {
       features.add(new PayLoadDataFormatFeature());       
   }
   
   if (dataFormat.equals(DataFormat.MESSAGE)) {
       features.add(new MessageDataFormatFeature());
   }
   
  // set the feature to the ServerFactoryBean or ClientFactoryBean 
  ...
}

{code}

 
h2. Integrate Camel into CXF
Currently , we introduce [Camel Transport for CXF] to integrate the Camel as an transport library in CXF. 

h3. Binding the conduit and destination with the context endpoint 
As [CXF transport API|CXF20DOC:CXF Architecture] side, CXF transport API includes [Conduit|http://svn.apache.org/repos/asf/cxf/trunk/api/src/main/java/org/apache/cxf/transport/Conduit.java] and [Destination|http://svn.apache.org/repos/asf/cxf/trunk/api/src/main/java/org/apache/cxf/transport/Destination.java] that we need to implement with Camel.
We use the the [CamelTemplate|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/CamelTemplate.html] to send out the message for a certain endpoint in the [CamelConduit|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelConduit.java], and bind a consumer process for the [CamelDestination|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java].  
When you specify the endpoint URI that start with camel in [CamelConduit|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelConduit.java] or [CamelDestination|http://svn.apache.org/repos/asf/camel/trunk/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelDestination.java] the endpoint address, Camel transport will bind it to the endpoint which is in the [CamelContext|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/CamelContext.html].

Here are some [examples|CXF Example] of configuring the Camel transport.



