h2. Building 

Camel uses [Maven|http://maven.apache.org/] as its build tool. If you don't fancy using Maven you can use your IDE directly or [Download] a distribution or JAR.

h3. Prequisites

*Required:*
* Download and [install Maven|http://maven.apache.org/download.html]. (Maven 2.2.1 is required to build Camel 2.5 onwards)
* Get the latest [Source] 
* Java 1.5 or better (Java 1.5 is being @deprecated, and Camel 3.0 requires Java 1.6 or better)

*Optional:*
* [Prince|http://www.princexml.com/download/] should be in the executable PATH to generate the PDF documentation

h3. Maven options

To build camel maven has to be configured to use more memory

{code}
set MAVEN_OPTS=-Xmx512m -XX:MaxPermSize=128m
{code}

h3. A normal build

{code}
mvn install
{code}

h3. Doing a Quick Build

The following avoids running all the unit test cases, we just skip the test running phase and not the building part
{code}
mvn -DskipTests clean install 
{code}

h3. Using an IDE

If you prefer to use an IDE then you can auto-generate the IDE's project files using maven plugins. e.g.

{code}
mvn eclipse:eclipse
{code}

or

{code}
mvn idea:idea
{code}

h4. Adding Camel Eclipse templates to your workspace

{code}
mvn -Psetup.eclipse -Declipse.workspace.dir=/path/to/your/workspace
{code}

You can also find some helpful notes on usage [here|http://janstey.blogspot.com/2008/08/eclipse-templates-for-apache-camel.html]. 

h4. Importing into Eclipse
If you have not already done so, you will need to make Eclipse aware of the Maven repository so that it can build everything. In the preferences, go to Java->Build Path->Classpath and define a new Classpath Variable named M2_REPO that points to your local Maven repository (i.e., {{~/.m2/repository}} on Unix and {{c:\Documents and Settings\<user>\.m2\repository}} on Windows).

You can also get Maven to do this for you:
{code}
mvn eclipse:add-maven-repo -Declipse.workspace=/path/to/the/workspace/ 
{code}

h3. Building with checkstyle

To enable source style checking with checkstyle, build Camel with the -Psourcecheck parameter

{code}
mvn -Psourcecheck clean install
{code}

h3. Building source jars
If you want to build jar files with the source code, that for instance Eclipse can important so you can debug the Camel code as well. Then you can run this command from the camel root folder:
{code}
mvn clean source:jar install -Dtest=false
{code}

h3. Building with Spring 2.5.6
From Camel 2.4.0, we switch the default Spring version to 3.0.x, If you want Camel to be build against Spring 2.5.6 you have to build with the maven profile {{spring-2.x}}.
{code}
mvn clean install -Pspring-2.x
{code}

You may want to skip testing and do a fast build
{code}
mvn clean install -Pspring-2.x -Dtest=false
{code}

h3. Working with features
If you change anything in the features.xml from {{platform/karaf}} you can run a validation step to ensure the generated features.xml file is correct. You can do this running the following maven goal from the {{platform}} directory.
{code}
mvn clean install -Pvalidate
{code}

h3. See Also

* [Running Unit Tests]
* [Source]
* [Examples]

