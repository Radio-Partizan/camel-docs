---
title: Writing Components
page_version: 17
page_creator: jstrachan
page_modifier: tabish121
--- pipeline:conf
h2. Writing Components

Apache Camel is designed to make it very easy to drop in new components whether they be routing components, transformers, transports etc. The idea of a component is to be a factory and manager of [Endpoints|Endpoint].

Here are the main steps to writing a component.

* write a POJO which implements the [Component|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Component.html] interface. The simplest approach is just to derive from [DefaultComponent|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/impl/DefaultComponent.html]
* to support auto-discovery of your component add a file to _META-INF/services/org/apache/camel/component/FOO_ where FOO is the URI scheme for your component and any related endpoints created on the fly

Users can then either explicitly create your component, configure it and register with a [CamelContext|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/CamelContext.html] or users can use a URI which auto-creates your component.

h3. Writing Endpoints

When implementing an [Endpoint] you typically may implement one or more of the following methods
* [createProducer()|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Endpoint.html#createProducer()] will create a [Producer|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Producer.html] for sending message exchanges to the endpoint
* [createConsumer()|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Endpoint.html#createConsumer(org.apache.camel.Processor)] implements the [Event Driven Consumer] pattern for consuming message exchanges from the endpoint via a [Processor|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Processor.html] when creating a [Consumer|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Consumer.html] 
* [createPollingConsumer()|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Endpoint.html#createPollingConsumer()] implements the [Polling Consumer] pattern for consuming message exchanges from the endpoint via a [PollingConsumer|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/PollingConsumer.html]  

Typically you just derive from [DefaultEndpoint|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/impl/DefaultEndpoint.html] and implement the [createProducer()|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Endpoint.html#createProducer()] and / or [createConsumer()|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Endpoint.html#createConsumer(org.apache.camel.Processor)] methods. The [createPollingConsumer()|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Endpoint.html#createPollingConsumer()] method will be created by default for you in the [DefaultEndpoint|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/impl/DefaultEndpoint.html] class.

If your endpoint is a polling-centric component you can derive from [DefaultPollingEndpoint|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/impl/DefaultPollingEndpoint.html] and then implement [createPollingConsumer()|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Endpoint.html#createPollingConsumer()]; the [createConsumer()|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Endpoint.html#createConsumer(org.apache.camel.Processor)]  method will be created for you which avoids you having to write any polling code.

h3. Using a Processor

If you are writing a simple endpoint which just processes messages in some way, you can just implement a [Processor] and [use that to create an endpoint|Processor].

h3. Dependency injection and auto-discovery

When using auto-discovery the CamelContext will default to its [Injector] implementation to inject any required or optional dependencies on the component. This allows you to use auto-discovery of components via [URIs] while still getting the benefits of dependency injection.

For example your component can depend on a JDBC DataSource or JMS ConnectionFactory which can be provided in the ApplicationContext in Spring or Module in Guice.

So you can if you prefer configure your Component using an IoC framework like Spring or Guice; then add it to the CamelContext. Or you can let the Component auto-inject itself as the endpoints are auto-discovered.

h3. Options

If your component has options you can let it have public getters/setters and Camel will automatically set the properties when the endpoint is created. If you however want to take the matter in your own hands, then you must remove the option from the given parameter list as Camel will validate that all options are used. If not Camel will throw a ResolveEndpointFailedException stating some of the options are unknown.

The parameters is provided by Camel in the createEndpoint method from DefaultComponent:
{code}
protected abstract Endpoint<E> createEndpoint(String uri, String remaining, Map parameters)
{code}

The code is an example from the SEDA component that removes the size parameter:
{code}
    public BlockingQueue<Exchange> createQueue(String uri, Map parameters) {
        int size = 1000;
        Object value = parameters.remove("size");
        if (value != null) {
            Integer i = convertTo(Integer.class, value);
            if (i != null) {
                size = i;
            }
        }
        return new LinkedBlockingQueue<Exchange>(size);
    }
{code}

h3. See Also

* [Configuring Camel]
* [Endpoint]
* [Component]