h2. Mock Component

{include:Testing Summary Include}

The Mock component provides a powerful declarative testing mechanism, which is similar to [jMock|http://jmock.org] in that it allows declarative expectations to be created on any Mock endpoint before a test begins. Then the test is run, which typically fires messages to one or more endpoints, and finally the expectations can be asserted in a test case to ensure the system  worked as expected. 

This allows you to test various things like:
* The correct number of messages are received on each endpoint,
* The correct payloads are received, in the right order,
* Messages arrive on an endpoint in order, using some [Expression] to create an order testing function,
* Messages arrive match some kind of [Predicate] such as that specific headers have certain values, or that parts of the messages match some predicate, such as by evaluating an [XPath] or [XQuery] [Expression].

*Note* that there is also the [Test endpoint|Test] which is a Mock endpoint, but which uses a second endpoint to provide the list of expected message bodies and automatically sets up the Mock endpoint assertions. In other words, it's a Mock endpoint that automatically sets up its assertions from some sample messages in a [File] or [database|JPA], for example.

h3. URI format

{code}
mock:someName[?options]
{code}

Where *someName* can be any string that uniquely identifies the endpoint.

You can append query options to the URI in the following format, {{?option=value&option=value&...}}

h3. Options

|| Option || Default || Description ||
| {{reportGroup}} | {{null}} | A size to use a [throughput logger|Log] for reporting |

h3. Simple Example

Here's a simple example of Mock endpoint in use. First, the endpoint is resolved on the context. Then we set an expectation, and then, after the test has run, we assert that our expectations have been met.

{code}
MockEndpoint resultEndpoint = context.resolveEndpoint("mock:foo", MockEndpoint.class);

resultEndpoint.expectedMessageCount(2);

// send some messages
...

// now lets assert that the mock:foo endpoint received 2 messages
resultEndpoint.assertIsSatisfied();
{code}

You typically always call the [assertIsSatisfied() method|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#assertIsSatisfied()] to test that the expectations were met after running a test.

Camel will by default wait 20 seconds when the {{assertIsSatisfied()}} is invoked. This can be configured by setting the {{setResultWaitTime(millis)}} method.

h3. Setting expectations

You can see from the javadoc of [MockEndpoint|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html] the various helper methods you can use to set expectations. The main methods are as follows: 

|| Method || Description ||
| [expectedMessageCount(int)|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#expectedMessageCount(int)] | To define the expected message count on the endpoint. |
| [expectedMinimumMessageCount(int)|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#expectedMinimumMessageCount(int)] | To define the minimum number of expected messages on the endpoint. |
| [expectedBodiesReceived(...)|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#expectedBodiesReceived(java.lang.Object...)] | To define the expected bodies that should be received (in order). |
| [expectedHeaderReceived(...)|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#expectedHeaderReceived(java.lang.String,%20java.lang.String)] | To define the expected header that should be received |
| [expectsAscending(Expression)|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#expectsAscending(org.apache.camel.Expression)] | To add an expectation that messages are received in order, using the given [Expression] to compare messages. |
| [expectsDescending(Expression)|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#expectsDescending(org.apache.camel.Expression)] | To add an expectation that messages are received in order, using the given [Expression] to compare messages. |
| [expectsNoDuplicates(Expression)|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#expectsNoDuplicates(org.apache.camel.Expression)] | To add an expectation that no duplicate messages are received; using an [Expression] to calculate a unique identifier for each message. This could be something like the {{JMSMessageID}} if using JMS, or some unique reference number within the message. |

Here's another example:

{code}
resultEndpoint.expectedBodiesReceived("firstMessageBody", "secondMessageBody", "thirdMessageBody");
{code}

h4. Adding expectations to specific messages

In addition, you can use the [message(int messageIndex)|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#message(int)] method to add assertions about a specific message that is received.

For example, to add expectations of the headers or body of the first message (using zero-based indexing like {{java.util.List}}), you can use the following code:

{code}
resultEndpoint.message(0).header("foo").isEqualTo("bar");
{code}

There are some examples of the Mock endpoint in use in the [camel-core processor tests|http://svn.apache.org/viewvc/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/].

{include:Endpoint See Also}
* [Spring Testing]
* [Testing]