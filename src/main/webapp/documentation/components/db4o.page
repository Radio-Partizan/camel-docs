---
title: Db4o
page_version: 3
page_creator: hekonsek
page_modifier: davsclaus
--- pipeline:conf
h2. Db4o Component
*Available as of Camel 2.5*

The *db4o:* component allows you to work with [db4o|http://www.db4o.com] NoSQL database. The camel-db4o library is provided by the [Camel Extra|http://code.google.com/p/camel-extra/] project which hosts all *GPL related components for Camel.

h3. Sending to the endpoint

Sending POJO object to the db4o endpoint adds and saves object into the database. The body of the message is assumed to be a POJO that has to be saved into the db40 database store.

h3. Consuming from the endpoint

Consuming messages removes (or updates) POJO objects in the database. This allows you to use a Db4o datastore as a logical queue; consumers take messages from the queue and then delete them to logically remove them from the queue.

If you do not wish to delete the object when it has been processed, you can specify {{consumeDelete=false}} on the URI. This will result in the POJO being processed each poll.

h3. URI format

{code}
db4o:className[?options]
{code}

You can append query options to the URI in the following format, {{?option=value&option=value&...}}

h3. Options
{div:class=confluenceTableSmall}
|| Name || Default Value || Description ||
|{{consumeDelete}} | {{true}} |	Option for {{Db4oConsumer}} only. Specifies whether or not the entity is deleted after it is consumed.|
| {{consumer.delay}} | {{500}} | Option for HibernateConsumer only. Delay in millis between each poll. |
| {{consumer.initialDelay}} | {{1000}} | Option for HibernateConsumer only. Millis before polling starts. |
| {{consumer.userFixedDelay}} | {{false}} | Option for HibernateConsumer only. Set to {{true}} to use fixed delay between polls, otherwise fixed rate is used. See [ScheduledExecutorService|http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ScheduledExecutorService.html] in JDK for details. |
{div}

{include:Endpoint See Also}