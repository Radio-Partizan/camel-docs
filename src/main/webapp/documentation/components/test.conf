h2. Test Component

{include:Testing Summary Include}

The *test* component extends the [Mock] component to support pulling messages from another endpoint on startup to set the expected message bodies on the underlying [Mock] endpoint. That is, you use the test endpoint in a route and messages arriving on it will be implicitly compared to some expected messages extracted from some other location.

So you can use, for example, an expected set of message bodies as files. This will then set up a properly configured [Mock] endpoint, which is only valid if the received messages match the number of expected messages and their message payloads are equal.


h3. URI format

{code}
test:expectedMessagesEndpointUri
{code}

Where *expectedMessagesEndpointUri* refers to some other [Component] URI that the expected message bodies are pulled from before starting the test. 

h3. Example

For example, you could write a test case as follows:

{code}
from("seda:someEndpoint").
  to("test:file://data/expectedOutput?noop=true");
{code}

If your test then invokes the [MockEndpoint.assertIsSatisfied(camelContext) method|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/mock/MockEndpoint.html#assertIsSatisfied(org.apache.camel.CamelContext)], your test case will perform the necessary assertions.

Here is a [real example test case using Mock and Spring|http://svn.apache.org/viewvc/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/component/test/TestEndpointTest.java?view=markup] along with its [Spring XML|https://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/component/test/TestEndpointTest-context.xml].

To see how you can set other expectations on the test endpoint, see the [Mock] component.

{include:Endpoint See Also}
* [Spring Testing]