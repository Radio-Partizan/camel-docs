---
title: HL7
page_version: 20
page_creator: davsclaus
page_modifier: davsclaus
--- pipeline:conf
h2. HL7 Component

The *hl7* component is used for working with the HL7 MLLP protocol and the [HL7 model|http://www.hl7.org/] using the [HAPI library|http://hl7api.sourceforge.net].

This component supports the following:
- HL7 MLLP codec for [Mina|http://mina.apache.org/]
- Agnostic data format using either plain String objects or HAPI HL7 model objects.
- [Type Converter] from/to HAPI and String
- HL7 DataFormat using HAPI library
- Even more easy-of-use as its integrated well with the [camel-mina|Mina] component.

Maven users will need to add the following dependency to their {{pom.xml}} for this component:
{code:xml}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-hl7</artifactId>
    <version>x.x.x</version>
    <!-- use the same version as your Camel core version -->
</dependency>
{code}

h3. HL7 MLLP protocol
HL7 is often used with the HL7 MLLP protocol that is a text based TCP socket based protocol. This component ships with a Mina Codec that conforms to the MLLP protocol so you can easily expose a HL7 listener that accepts HL7 requests over the TCP transport. 

To expose a HL7 listener service we reuse the existing [camel-mina|Mina] component where we just use the {{HL7MLLPCodec}} as codec.

The HL7 MLLP codec has the following options:
{div:class=confluenceTableSmall}
|| Name || Default Value || Description ||
| {{startByte}} | {{0x0b}} | The start byte spanning the HL7 payload. Is the HL7 default value of {{0x0b}} (11 decimal). |
| {{endByte1}} | {{0x1c}} | The first end byte spanning the HL7 payload. Is the HL7 default value of {{0x1c}} (28 decimal). |
| {{endByte2}} | {{0x0d}} | The 2nd end byte spanning the HL7 payload. Is the HL7 default value of {{0x0d}} (13 decimal). |
| {{charset}} | JVM Default | The encoding (is a [charset name|http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html]) to use for the codec. If not provided, Camel will use the [JVM default Charset|http://java.sun.com/j2se/1.5.0/docs/api/java/nio/charset/Charset.html#defaultCharset()]. |
| {{convertLFtoCR}} | {{true}} | Will convert {{\n}} to {{\r}} ({{0x0d}}, 13 decimal) as HL7 usually uses {{\r}} as segment terminators. The HAPI library requires the use of {{\r}}. |
| {{validate}} | {{true}} | *Camel 2.0:* Whether HAPI Parser should validate or not. |
{div}

h4. Exposing a HL7 listener
In our Spring XML file, we configure an endpoint to listen for HL7 requests using TCP:
{code:xml}
        <endpoint id="hl7listener" uri="mina:tcp://localhost:8888?sync=true&amp;codec=#hl7codec"/>
{code}
Notice we configure it to use [camel-mina|Mina] with TCP on the {{localhost}} on port {{8888}}. We use *sync=true* to indicate that this listener is synchronous and therefore will return a HL7 response to the caller. Then we setup mina to use our HL7 codec with *codec=#hl7codec*. Notice that {{hl7codec}} is just a Spring bean ID, so we could have named it {{mygreatcodecforhl7}} or whatever. The codec is also set up in the Spring XML file:
{code:xml}
    <bean id="hl7codec" class="org.apache.camel.component.hl7.HL7MLLPCodec">
        <property name="charset" value="iso-8859-1"/>
    </bean>
{code}
And here we configure the charset encoding to use, and {{iso-8859-1}} is commonly used.

The endpoint *hl7listener* can then be used in a route as a consumer, as this java DSL example illustrates:
{code:java}
    from("hl7socket").to("patientLookupService");
{code}
This is a very simple route that will listen for HL7 and route it to a service named *patientLookupService* that is also a Spring bean ID we have configured in the Spring XML as:
{code:xml}
    <bean id="patientLookupService" class="com.mycompany.healtcare.service.PatientLookupService"/>
{code}
And another powerful feature of Camel is that we can have our busines logic in POJO classes that is not at all tied to Camel as shown here:
{code:java}
public class PatientLookupService {
    public Message lookupPatient(Message input) throws HL7Exception {
        QRD qrd = (QRD)input.get("QRD");
        String patientId = qrd.getWhoSubjectFilter(0).getIDNumber().getValue();

        // find patient data based on the patient id and create a HL7 model object with the response
        Message response = ... create and set response data
        return response
    }
{code}
Notice that this class is just using imports from the HAPI library and *none* from Camel.

h3. HL7 Model using java.lang.String
The HL7MLLP codec uses plain {{String}} as data format. And Camel uses [Type Converter] to convert from/to strings to the HAPI HL7 model objects. However, you can use the plain {{String}} objects if you prefer, for instance if you need to parse the data yourself.

See samples for such an example.

h3. HL7 Model using HAPI
The HL7 model is Java objects from the HAPI library. Using this library, we can encode and decode from the EDI format (ER7) that is mostly used with HL7.
With this model you can code with Java objects instead of the EDI based HL7 format that can be hard for humans to read and understand.

The ER7 sample below is a request to lookup a patient with the patient ID, {{0101701234}}.
{code}
MSH|^~\\&|MYSENDER|MYRECEIVER|MYAPPLICATION||200612211200||QRY^A19|1234|P|2.4
QRD|200612211200|R|I|GetPatient|||1^RD|0101701234|DEM||
{code}

Using the HL7 model we can work with the data as a {{ca.uhn.hl7v2.model.Message.Message}} object.
To retrieve the patient ID for the patient in the ER7 above, you can do this in java code:
{code:java}
Message msg = exchange.getIn().getBody(Message.class);
QRD qrd = (QRD)msg.get("QRD");
String patientId = qrd.getWhoSubjectFilter(0).getIDNumber().getValue();
{code}

Camel has built-in type converters, so when this operation is invoked:
{code:java}
Message msg = exchange.getIn().getBody(Message.class);
{code}
Camel will convert the received HL7 data from {{String}} to {{Message}}. This is powerful when combined with the HL7 listener, then you as the end-user don't have to work with {{byte[]}}, {{String}} or any other simple object formats. You can just use the HAPI HL7 model objects.

{include:HL7 DataFormat}

h3. Message Headers
The *unmarshal* operation adds these MSH fields as headers on the Camel message:

h4. Camel 1.x
{div:class=confluenceTableSmall}
|| Key || MSH field || Example ||
| {{hl7.msh.sendingApplication}} | {{MSH-3}} | {{MYSERVER}} |
| {{hl7.msh.sendingFacility}} | {{MSH-4}} | {{MYSERVERAPP}} |
| {{hl7.msh.receivingApplication}} | {{MSH-5}} | {{MYCLIENT}} |
| {{hl7.msh.receivingFacility}} | {{MSH-6}} | {{MYCLIENTAPP}} |
| {{hl7.msh.timestamp}} | {{MSH-7}} | {{20071231235900}} |
| {{hl7.msh.security}} | {{MSH-8}} | {{null}} |
| {{hl7.msh.messageType}} | {{MSH-9-1}} | {{ADT}} |
| {{hl7.msh.triggerEvent}} | {{MSH-9-2}} | {{A01}} |
| {{hl7.msh.messageControl}} | {{MSH-10}} | {{1234}} |
| {{hl7.msh.processingId}} | {{MSH-11}} | {{P}} |
| {{hl7.msh.versionId}} | {{MSH-12}} | {{2.4}} |
{div}

h4. Camel 2.0
{div:class=confluenceTableSmall}
|| Key || MSH field || Example ||
| {{CamelHL7SendingApplication}} | {{MSH-3}} | {{MYSERVER}} |
| {{CamelHL7SendingFacility}} | {{MSH-4}} | {{MYSERVERAPP}} |
| {{CamelHL7ReceivingApplication}} | {{MSH-5}} | {{MYCLIENT}} |
| {{CamelHL7ReceivingFacility}} | {{MSH-6}} | {{MYCLIENTAPP}} |
| {{CamelHL7Timestamp}} | {{MSH-7}} | {{20071231235900}} |
| {{CamelHL7Security}} | {{MSH-8}} | {{null}} |
| {{CamelHL7MessageType}} | {{MSH-9-1}} | {{ADT}} |
| {{CamelHL7TriggerEvent}} | {{MSH-9-2}} | {{A01}} |
| {{CamelHL7MessageControl}} | {{MSH-10}} | {{1234}} |
| {{CamelHL7ProcessingId}} | {{MSH-11}} | {{P}} |
| {{CamelHL7VersionId}} | {{MSH-12}} | {{2.4}} |
{div}

All headers are {{String}} types. If a header value is missing, its value is {{null}}.

h3. Options
The HL7 Data Format supports the following options:
{div:class=confluenceTableSmall}
|| Option || Default || Description ||
| validate | true | *Camel 2.0*: Whether the HAPI Parser should validate. |
{div}

h3. Dependencies

To use HL7 in your camel routes you need to add a dependency on *camel-hl7*, which implements this data format. 

If you use Maven, you could just add the following to your {{pom.xml}}, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-hl7</artifactId>
  <version>2.2.0</version>
</dependency>
{code}

Since HAPI 0.6, the library has been split into a [base library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-base/1.0/] and several structures libraries, one for each HL7v2 message version:

* [v2.1 structures library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-structures-v21/1.0/]
* [v2.2 structures library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-structures-v22/1.0/]
* [v2.3 structures library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-structures-v23/1.0/]
* [v2.3.1 structures library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-structures-v231/1.0/]
* [v2.4 structures library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-structures-v24/1.0/]
* [v2.5 structures library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-structures-v24/1.0/]
* [v2.5.1 structures library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-structures-v251/1.0/]
* [v2.6 structures library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-structures-v26/1.0/]

By default {{camel-hl7}} only references the HAPI [base library|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-base/1.0/]. Applications are responsible for including structures libraries themselves. For example, if a application works with HL7v2 message versions 2.4 and 2.5 then the following dependencies must be added:

{code:xml}
<dependency>
    <groupId>ca.uhn.hapi</groupId>
    <artifactId>hapi-structures-v24</artifactId>
    <version>1.0</version>
</dependency>
<dependency>
    <groupId>ca.uhn.hapi</groupId>
    <artifactId>hapi-structures-v25</artifactId>
    <version>1.0</version>
</dependency>
{code}

h4. OSGi

An OSGi bundle containing the base library, all structures libraries and required dependencies (on the bundle classpath) can be downloaded from the [HAPI Maven repository|http://hl7api.sourceforge.net/m2/ca/uhn/hapi/hapi-osgi-base/] as well. 

{code:xml}
<dependency>
    <groupId>ca.uhn.hapi</groupId>
    <artifactId>hapi-osgi-base</artifactId>
    <version>1.0.1</version>
</dependency>
{code}

h3. Samples
In the following example we send a HL7 request to a HL7 listener and retrieves a response. We use plain {{String}} types in this example:
{snippet:id=e2|lang=java|url=camel/trunk/components/camel-hl7/src/test/java/org/apache/camel/component/hl7/HL7MLLPCodecTest.java}

In the next sample, we want to route HL7 requests from our HL7 listener to our business logic. We have our business logic in a plain POJO that we have registered in the registry as {{hl7service}} = for instance using Spring and letting the bean id = {{hl7service}}.

Our business logic is a plain POJO only using the HAPI library so we have these operations defined:
{snippet:id=e2|lang=java|url=camel/trunk/components/camel-hl7/src/test/java/org/apache/camel/component/hl7/HL7RouteTest.java}

Then we set up the Camel routes using the {{RouteBuilder}} as follows:
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-hl7/src/test/java/org/apache/camel/component/hl7/HL7RouteTest.java}

Notice that we use the HL7 DataFormat to enrich our Camel Message with the MSH fields preconfigued on the Camel Message. This lets us much more easily define our routes using the fluent builders.
If we do not use the HL7 DataFormat, then we do not gains these headers and we must resort to a different technique for computing the MSH trigger event (= what kind of HL7 message it is). This is a big advantage of the HL7 DataFormat over the plain HL7 type converters.

h4. Sample using plain String objects
In this sample we use plain {{String}} objects as the data format, that we send, process and receive. As the sample is part of a unit test, there is some code for assertions, but you should be able to understand what happens. First we send the plain string, {{Hello World}}, to the {{HL7MLLPCodec}} and receive the response as a plain string, {{Bye World}}.
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-hl7/src/test/java/org/apache/camel/component/hl7/HL7MLLPCodecPlainStringTest.java}

Here we process the incoming data as plain String and send the response also as plain String:
{snippet:id=e2|lang=java|url=camel/trunk/components/camel-hl7/src/test/java/org/apache/camel/component/hl7/HL7MLLPCodecPlainStringTest.java}

{include:Endpoint See Also}