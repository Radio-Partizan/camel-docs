---
title: Freemarker
page_version: 10
page_creator: davsclaus
page_modifier: davsclaus
--- pipeline:conf
h2. Freemarker
*Available as of Camel 1.6*

The *freemarker:* component allows you to process a message using a [Freemarker|http://freemarker.org/] template. This can be ideal when using [Templating] to generate responses for requests.

Maven users will need to add the following dependency to their {{pom.xml}} for this component:
{code:xml}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-freemarker</artifactId>
    <version>x.x.x</version>
    <!-- use the same version as your Camel core version -->
</dependency>
{code}

h3. URI format

{code}
freemarker:templateName[?options]
{code}

Where *templateName* is the classpath-local URI of the template to invoke; or the complete URL of the remote template (eg: file://folder/myfile.ftl).

You can append query options to the URI in the following format, {{?option=value&option=value&...}}

h3. Options
{div:class=confluenceTableSmall}
|| Option || Default || Description ||
| {{contentCache}} | {{true}} | Cache for the resource content when its loaded. |
| {{encoding}} | {{null}} | Character encoding of the resource content. |
{div}

h3. Headers
Camel will store a reference to the resource in the message header in the key {{org.apache.camel.freemarker.resource}}. The Resource is an {{org.springframework.core.io.Resource}} object. And the key {{org.apache.camel.freemarker.resourceUri}} holds the *templateName* as a String object. 

*Note* From Camel 2.1 and Camel 1.6.2, freemarker endpoint will not store these headers into to message, as these header will cause some side effect on the dynamic templates feature. 

Headers set during the Freemarker evaluation are returned to the message and added as headers. Then its kinda possible to return values from Freemarker to the Message.

An example: Set the header value of {{fruit}} in the Freemarker template:
{code}
${request.setHeader('fruit', 'Apple')}
{code}

The header, {{fruit}}, is now accessible from the {{message.out.headers}}.

h3. Freemarker Context
Camel will provide exchange information in the Freemarker context (just a {{Map}}). The {{Exchange}} is transfered as:
{div:class=confluenceTableSmall}
|| key || value ||
| {{exchange}} | The Exchange itself. |
| {{headers}} | The headers of the In message. |
| {{camelContext}} | The Camel Context. |
| {{request}} | The In message. |
| {{body}} | The In message body. | 
| {{response}} | The Out message (only for InOut message exchange pattern). |
{div}

h3. Hot reloading
The Freemarker template resource is by default *not* hot reloadable for both file and classpath resources (expanded jar). If you set {{contentCache=false}}, then Camel will not cache the resource and hot reloading is thus enabled. This scenario can be used in development.

h3. Dynamic templates
*Available as of Camel 2.1*
Camel provides two headers by which you can define a different resource location for a template or the template content itself. If any of these headers is set then Camel uses this over the endpoint configured resource. This allows you to provide a dynamic template at runtime.
{div:class=confluenceTableSmall}
|| Header || Type || Description ||
| CamelFreemarkerResourceUri | String | *Camel 2.1:* A URI for the template resource to use instead of the endpoint configured. |
| CamelFreemarkerTemplate | String | *Camel 2.1:* The template to use instead of the endpoint configured. |
{div}

h3. Samples

For example you could use something like:

{code}
from("activemq:My.Queue").
  to("freemarker:com/acme/MyResponse.ftl");
{code}

To use a Freemarker template to formulate a response for a message for InOut message exchanges (where there is a {{JMSReplyTo}} header).

If you want to use InOnly and consume the message and send it to another destination you could use:

{code}
from("activemq:My.Queue").
  to("freemarker:com/acme/MyResponse.ftl").
  to("activemq:Another.Queue");
{code}

And to disable the content cache, e.g. for development usage where the {{.ftl}} template should be hot reloaded:

{code}
from("activemq:My.Queue").
  to("freemarker:com/acme/MyResponse.ftl?contentCache=false").
  to("activemq:Another.Queue");
{code}

And a file-based resource:
{code}
from("activemq:My.Queue").
  to("freemarker:file://myfolder/MyResponse.ftl?contentCache=false").
  to("activemq:Another.Queue");
{code}

In *Camel 2.1* it's possible to specify what template the component should use dynamically via a header, so for example:
{code}
from("direct:in").
  setHeader("CamelFreemarkerResourceUri").constant("path/to/my/template.ftl").
  to("freemarker:dummy");
{code}

h3. The Email Sample
In this sample we want to use Freemarker templating for an order confirmation email. The email template is laid out in Freemarker as:
{code}
Dear ${headers.lastName}, ${headers.firstName}

Thanks for the order of ${headers.item}.

Regards Camel Riders Bookstore
${body}
{code}

And the java code:

{snippet:id=e1|lang=java|url=camel/trunk/components/camel-freemarker/src/test/java/org/apache/camel/component/freemarker/FreemarkerLetterTest.java}

{include:Endpoint See Also}