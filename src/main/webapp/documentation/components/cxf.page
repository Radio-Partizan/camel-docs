---
title: CXF
page_version: 94
page_creator: jstrachan
page_modifier: njiang
--- pipeline:conf
h2. CXF Component

{note}
When using CXF as a consumer, the [CAMEL:CXF Bean Component] allows you to factor out how message payloads are received from their processing as a RESTful or SOAP web service. This has the potential of using a multitude of transports to consume web services. The bean component's configuration is also simpler and provides the fastest method to implement web services using Camel and CXF.
{note}

The *cxf:* component provides integration with [Apache CXF|http://cxf.apache.org] for connecting to JAX-WS services hosted in CXF.

{toc}

Maven users will need to add the following dependency to their {{pom.xml}} for this component:
{code}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-cxf</artifactId>
    <version>x.x.x</version>
    <!-- use the same version as your Camel core version -->
</dependency>
{code}

{tip:title=CXF dependencies}
If you want to learn about CXF dependencies you can checkout the {{[WHICH-JARS|http://svn.apache.org/repos/asf/cxf/trunk/distribution/src/main/release/lib/WHICH_JARS]}} text file.
{tip}

h3. URI format

{code}
cxf:bean:cxfEndpoint[?options]
{code}
Where *cxfEndpoint* represents a bean ID that references a bean in the Spring bean registry. With this URI format, most of the endpoint details are specified in the bean definition.
{code}
cxf://someAddress[?options]
{code}
Where *someAddress* specifies the CXF endpoint's address. With this URI format, most of the endpoint details are specified using options.

For either style above, you can append options to the URI as follows:
{code}
cxf:bean:cxfEndpoint?wsdlURL=wsdl/hello_world.wsdl&dataFormat=PAYLOAD
{code}

h3. Options
{div:class=confluenceTableSmall}
|| Name || Description || Example || Required? || Default Value ||
| {{wsdlURL}} | The location of the WSDL. | [file://local/wsdl/hello.wsdl] or {{wsdl/hello.wsdl}} | No | WSDL is obtained from endpoint address by default. |
| {{serviceClass}} | The name of the SEI (Service Endpoint Interface) class.  This class can have, but does not require, JSR181 annotations.&nbsp; \\
*Since 2.0,* this option is only required by POJO mode.&nbsp;&nbsp; If the wsdlURL option is provided, serviceClass is not required for PAYLOAD and MESSAGE mode.&nbsp; When wsdlURL option is used without serviceClass, the serviceName and portName (endpointName for Spring configuration) options *MUST* be provided. \\
\\
*Since 2.0*, it is possible to use {{\#}} notation to reference a {{serviceClass}} object instance from the registry.&nbsp; E.g. {{serviceClass=#beanName}}. \\
\\
*Please be advised that the referenced object cannot be a Proxy (Spring AOP Proxy is OK)* as it relies on {{Object.getClass().getName()}} method for non Spring AOP Proxy. \\ | {{org.apache.camel.Hello}} | Yes | |
| {{serviceClassInstance}} | *In 1.6 or later (will be deprecated in 2.0)*, {{serviceClassInstance}} works like {{serviceClass=#beanName}}, which looks up a {{serviceObject}} instance from the registry. | {{serviceClassInstance=beanName}} | No (use either {{serviceClass}} or {{serviceClassInstance}}) | |
| {{serviceName}} | The service name this service is implementing, it maps to the {{wsdl:service@name}}. | \{http:?//org.apache.camel}ServiceName | Only if more than one {{serviceName}} in WSDL present, and it is required for camel-cxf consumer since camel 2.2 | |
| {{portName}} | The port name this service is implementing, it maps to the {{wsdl:port@name}}. | \{http:?//org.apache.camel}PortName | Only if more than one {{portName}} under the {{serviceName}} is present, and it is required for camel-cxf consumer since camel 2.2 | |
| {{dataFormat}} | Which data type messages the CXF endpoint supports | {{POJO}}, {{PAYLOAD}}, {{MESSAGE}} | No | {{POJO}} |
| {{relayHeaders}} | Available since 1.6.1. Please see the *Description of* {{{*}relayHeaders{*}}} *option* section for this option in 2.0.  Should a CXF endpoint relay headers along the route. Currently only available when {{dataFormat=POJO}} | {{true}}, {{false}} | No | {{true}} |
| {{wrapped}} | Which kind of operation that CXF  endpoint producer will invoke | {{true}}, {{false}} | No | {{false}} |
| {{wrappedStyle}} | *New in 2.5.0* The WSDL style that describes how parameters are represented in the SOAP body. If the value is false, CXF will chose the document-literal unwrapped style, If the value is true, CXF will chose the document-literal wrapped style | {{true}}, {{false}} | No | {{Null}} |
| {{setDefaultBus}} | Will set the default bus when CXF endpoint create a bus by itself | {{true}}, {{false}} | No | {{false}} |
| {{bus}} | New in 2.0, use {{\#}} notation to reference a bus object from the registry. The referenced object must be an instance of {{org.apache.cxf.Bus}}. \\ | {{bus=#busName}} | No | Default bus created by CXF Bus Factory \\ |
| {{cxfBinding}} | New in 2.0, use {{\#}} notation to reference a CXF binding object from the registry. The referenced object must be an instance of {{org.apache.camel.component.cxf.CxfBinding}}. | {{cxfBinding=#bindingName}} \\ | No \\ | An instance of {{org.apache.camel.component.cxf.DefaultCxfBinding}} \\ |
| {{headerFilterStrategy}} | New in 2.0, use {{\#}} notation to reference a header filter strategy object from the registry. The referenced object must be an instance of {{org.apache.camel.spi.HeaderFilterStrategy}}. | {{headerFilterStrategy=#strategyName}} | No \\ | An instance of {{org.apache.camel.component.cxf.CxfHeaderFilterStrategy}} \\ |
| {{loggingFeatureEnabled}} | New in 2.3, this option enables CXF Logging Feature which writes inbound and outbound SOAP messages to log. | {{loggingFeatureEnabled{}}}{{=true}} | No \\ | false \\ |
| {{defaultOperationName}} | New in 2.4, this option will set the default operationName that will be used by the CxfProducer which invokes the remote service. | {{defaultOperationName{}}}{{=greetMe}} | No \\ | null |
| {{defaultOperationNameSpace}} | New in 2.4, this option will set the default operationNamespace that will be used by the CxfProducer which invokes the remote service. | {{defaultOperationNamespace{}}}{{=[http://apache.org/hello_world_soap_http]}} | No \\ | null |
| {{synchronous}} | New in 2.5, this option will let cxf endpoint decide to use sync or async API to do the underlying work. The default value is false which means camel-cxf endpoint will try to use async API by default. | synchronous=true | No \\ | false | 
| {{publishedEndpointUrl}} | New in 2.5, this option can override the endpointUrl that published from the WSDL which can be accessed with service address url plus ?wsdl. | publshedEndpointUrl=http://example.com/service | NO \\ | null  |
{div}

The {{serviceName}} and {{portName}} are [QNames|http://en.wikipedia.org/wiki/QName], so if you provide them be sure to prefix them with their \{namespace\} as shown in the examples above.

*NOTE* From CAMEL 1.5.1 , the {{serviceClass}} for a CXF producer (that is, the {{to}} endpoint) should be a Java interface.

h4. The descriptions of the dataformats

{div:class=confluenceTableSmall}
|| DataFormat || Description ||
| {{POJO}} | POJOs (Plain old Java objects) are the Java parameters to the method being invoked on the target server.  Both Protocol and Logical JAX-WS handlers are supported. |
| {{PAYLOAD}} | {{PAYLOAD}} is the message payload (the contents of the {{soap:body}}) after message configuration in the CXF endpoint is applied.  Only Protocol JAX-WS handler is supported.  Logical JAX-WS handler is not supported. |
| {{MESSAGE}} | {{MESSAGE}} is the raw message that is received from the transport layer.  JAX-WS handler is not supported. |

You can determine the data format mode of an exchange by retrieving the exchange property, {{CamelCXFDataFormat}}.  The exchange key constant is defined in {{org.apache.camel.component.cxf.CxfConstants.DATA_FORMAT_PROPERTY}}.
{div}

h5. How to enable CXF's LoggingOutInterceptor in MESSAGE mode

CXF's {{LoggingOutInterceptor}} outputs outbound message that goes on the wire to logging system (Java Util Logging).  Since the {{LoggingOutInterceptor}} is in {{PRE_STREAM}} phase (but {{PRE_STREAM}} phase is removed in {{MESSAGE}} mode), you have to configure {{LoggingOutInterceptor}} to be run during the {{WRITE}} phase.  The following is an example.
{snippet:id=enableLoggingOutInterceptor|lang=xml|url=camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/LoggingInterceptorInMessageModeTest-context.xml}

h4. Description of relayHeaders option

There are _in-band_ and _out-of-band_ on-the-wire headers from the perspective of a JAXWS WSDL-first developer.

The _in-band_ headers are headers that are explicitly defined as part of the WSDL binding contract for an endpoint such as SOAP headers.

The _out-of-band_ headers are headers that are serialized over the wire, but are not explicitly part of the WSDL binding contract.

Headers relaying/filtering is bi-directional.

When a route has a CXF endpoint and the developer needs to have on-the-wire headers, such as SOAP headers, be relayed along the route to be consumed say by another JAXWS endpoint, then {{relayHeaders}} should be set to {{true}}, which is the default value.

h5. Available in Release 1.6.1 and after (only in POJO mode)

The {{relayHeaders=true}} express an intent to relay the headers. The actual decision on whether a given header is relayed is delegated to a pluggable instance that implements the {{MessageHeadersRelay}} interface. A concrete implementation of {{MessageHeadersRelay}} will be consulted to decide if a header needs to be relayed or not. There is already an implementation of {{SoapMessageHeadersRelay}} which binds itself to well-known SOAP name spaces. Currently only out-of-band headers are filtered, and in-band headers will always be relayed when {{relayHeaders=true}}. If there is a header on the wire, whose name space is unknown to the runtime, then a fall back {{DefaultMessageHeadersRelay}} will be used, which simply allows all headers to be relayed.

The {{relayHeaders=false}} setting asserts that all headers in-band and out-of-band will be dropped.

You can plugin your own {{MessageHeadersRelay}} implementations overriding or adding additional ones to the list of relays. In order to override a preloaded relay instance just make sure that your {{MessageHeadersRelay}} implementation services the same name spaces as the one you looking to override. Also note, that the overriding relay has to service all of the name spaces as the one you looking to override, or else a runtime exception on route start up will be thrown as this would introduce an ambiguity in name spaces to relay instance mappings.
{code:xml}
<cxf:cxfEndpoint ...>
   <cxf:properties>
     <entry key="org.apache.camel.cxf.message.headers.relays">
       <list>
         <ref bean="customHeadersRelay"/>
       </list>
     </entry>
   </cxf:properties>
 </cxf:cxfEndpoint>
 <bean id="customHeadersRelay" class="org.apache.camel.component.cxf.soap.headers.CustomHeadersRelay"/>
{code}
Take a look at the tests that show how you'd be able to relay/drop headers here:

[https://svn.apache.org/repos/asf/camel/branches/camel-1.x/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest.java]





h5. Changes since Release 2.0

* {{POJO}} and {{PAYLOAD}} modes are supported.  In {{POJO}} mode, only out-of-band message headers are available for filtering as the in-band headers have been processed and removed from header list by CXF.  The in-band headers are incorporated into the {{MessageContentList}} in POJO mode.  The {{camel-cxf}} component does make any attempt to remove the in-band headers from the {{MessageContentList}} as it does in 1.6.1.  If filtering of in-band headers is required, please use {{PAYLOAD}} mode or plug in a (pretty straightforward) CXF interceptor/JAXWS Handler to the CXF endpoint.
* The Message Header Relay mechanism has been merged into {{CxfHeaderFilterStrategy}}.  The {{relayHeaders}} option, its semantics, and default value remain the same, but it is a property of {{CxfHeaderFilterStrategy}}.
Here is an example of configuring it.
{snippet:id=dropAllMessageHeadersStrategy|lang=xml|url=camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest-context.xml}
Then, your endpoint can reference the {{CxfHeaderFilterStrategy}}.
{snippet:id=noRelayRoute|lang=xml|url=camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest-context.xml}
* The {{MessageHeadersRelay}} interface has changed slightly and has been renamed to {{MessageHeaderFilter}}.  It is a property of {{CxfHeaderFilterStrategy}}.  Here is an example of configuring user defined Message Header Filters:
{snippet:id=customMessageFilterStrategy|lang=xml|url=camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest-context.xml}
* Other than {{relayHeaders}}, there are new properties that can be configured in {{CxfHeaderFilterStrategy}}.
{div:class=confluenceTableSmall}
|| Name || Description || type || Required? || Default value ||
| {{relayHeaders}} | All message headers will be processed by Message Header Filters | {{boolean}} | No | {{true}} (1.6.1 behavior) |
| {{relayAllMessageHeaders}} | All message headers will be propagated (without processing by Message Header Filters) | {{boolean}} | No | {{false}} (1.6.1 behavior) |
| {{allowFilterNamespaceClash}} | If two filters overlap in activation namespace, the property control how it should be handled.  If the value is {{true}}, last one wins.  If the value is {{false}}, it will throw an exception | {{boolean}} | No | {{false}} (1.6.1 behavior) |
{div}

h3. Configure the CXF endpoints with Spring

You can configure the CXF endpoint with the Spring configuration file shown below, and you can also embed the endpoint into the {{camelContext}} tags.  When you are invoking the service endpoint, you can set the {{operationName}} and {{operationNameSpace}} headers to explicitly state which operation you are calling.
{code:xml}
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:cxf="http://activemq.apache.org/camel/schema/cxfEndpoint"
        xsi:schemaLocation="
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                http://activemq.apache.org/camel/schema/cxfEndpoint http://activemq.apache.org/camel/schema/cxf/camel-cxf-1.6.0.xsd
                http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd     ">
     <cxf:cxfEndpoint id="routerEndpoint" address="http://localhost:9003/CamelContext/RouterPort"
     		serviceClass="org.apache.hello_world_soap_http.GreeterImpl"/>
     <cxf:cxfEndpoint id="serviceEndpoint" address="http://localhost:9000/SoapContext/SoapPort"
     		wsdlURL="testutils/hello_world.wsdl"
     		serviceClass="org.apache.hello_world_soap_http.Greeter"
     		endpointName="s:SoapPort"
     		serviceName="s:SOAPService"
     	xmlns:s="http://apache.org/hello_world_soap_http" />
     <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">
       <route>
         <from uri="cxf:bean:routerEndpoint" />
         <to uri="cxf:bean:serviceEndpoint" />
       </route>
    </camelContext>
  </beans>
{code}
*NOTE* In Camel 2.x we change to use {{http:?//camel.apache.org/schema/cxf}} as the CXF endpoint's target namespace.
{code:xml}
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:cxf="http://camel.apache.org/schema/cxf"
        xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
        http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd     ">
 ...
{code}
Be sure to include the JAX-WS {{schemaLocation}} attribute specified on the root beans element. This allows CXF to validate the file and is required.  Also note the namespace declarations at the end of the {{<cxf:cxfEndpoint/>}} tag--these are required because the combined {{\{namespace}localName}} syntax is presently not supported for this tag's attribute values.

The {{cxf:cxfEndpoint}} element supports many additional attributes:
{div:class=confluenceTableSmall}
|| Name || Value ||
| {{PortName}} | The endpoint name this service is implementing, it maps to the {{wsdl:port@name}}. In the format of {{ns:PORT_NAME}} where {{ns}} is a namespace prefix valid at this scope. |
| {{serviceName}} | The service name this service is implementing, it maps to the {{wsdl:service@name}}. In the format of {{ns:SERVICE_NAME}} where {{ns}} is a namespace prefix valid at this scope. |
| {{wsdlURL}} | The location of the WSDL. Can be on the classpath, file system, or be hosted remotely. |
| {{bindingId}} | The {{bindingId}} for the service model to use. |
| {{address}} | The service publish address. |
| {{bus}} | The bus name that will be used in the JAX-WS endpoint. |
| {{serviceClass}} | The class name of the SEI (Service Endpoint Interface) class which could have JSR181 annotation or not. |

It also supports many child elements:
|| Name || Value ||
| {{cxf:inInterceptors}} | The incoming interceptors for this endpoint. A list of {{<bean>}} or {{<ref>}}. |
| {{cxf:inFaultInterceptors}} | The incoming fault interceptors for this endpoint.  A list of {{<bean>}} or {{<ref>}}. |
| {{cxf:outInterceptors}} | The outgoing interceptors for this endpoint. A list of {{<bean>}} or {{<ref>}}. |
| {{cxf:outFaultInterceptors}} | The outgoing fault interceptors for this endpoint. A list of {{<bean>}} or {{<ref>}}. |
| {{cxf:properties}} | A properties map which should be supplied to the JAX-WS endpoint. See below. |
| {{cxf:handlers}} | A JAX-WS handler list which should be supplied to the JAX-WS endpoint. See below. |
| {{cxf:dataBinding}} | You can specify the which {{DataBinding}} will be use in the endpoint. This can be supplied using the Spring {{<bean class="MyDataBinding"/>}} syntax. |
| {{cxf:binding}} | You can specify the {{BindingFactory}} for this endpoint to use.  This can be supplied using the Spring {{<bean class="MyBindingFactory"/>}} syntax. |
| {{cxf:features}} | The features that hold the interceptors for this endpoint. A list of {{<bean>}}s or {{<ref>}}s |
| {{cxf:schemaLocations}} | The schema locations for endpoint to use. A list of {{<schemaLocation>}}s |
| {{cxf:serviceFactory}} | The service factory for this endpoint to use. This can be supplied using the Spring {{<bean class="MyServiceFactory"/>}} syntax |
{div}

You can find more advanced examples which show how to provide interceptors , properties and handlers here:
[http://cwiki.apache.org/CXF20DOC/jax-ws-configuration.html]


*NOTE*
You can use cxf:properties to set the camel-cxf endpoint's dataFormat and setDefaultBus properties from spring configuration file.
{code:xml}
<cxf:cxfEndpoint id="testEndpoint" address="http://localhost:9000/router"
     serviceClass="org.apache.camel.component.cxf.HelloService"
     endpointName="s:PortName"
     serviceName="s:ServiceName"
     xmlns:s="http://www.example.com/test">
     <cxf:properties>
       <entry key="dataFormat" value="MESSAGE"/>
       <entry key="setDefaultBus" value="true"/>
     </cxf:properties>
   </cxf:cxfEndpoint>
{code}

h3. How to make the camel-cxf component use log4j instead of java.util.logging

CXF's default logger is {{java.util.logging}}. If you want to change it to log4j, proceed as follows. Create a file, in the classpath, named {{META-INF/cxf/org.apache.cxf.logger}}. This file should contain the fully-qualified name of the class, {{org.apache.cxf.common.logging.Log4jLogger}}, with no comments, on a single line.

h3. How to let camel-cxf response message with xml start document

If you are using some soap client such as PHP, you will get this kind of error, because CXF doesn't add the XML start document "<?xml version="1.0" encoding="utf-8"?>"
{code}
Error:sendSms: SoapFault exception: [Client] looks like we got no XML document in [...]
{code}
To resolved this issue, you just need to tell StaxOutInterceptor to write the XML start document for you.
{snippet:id=example|lang=xml|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/WriteXmlDeclarationInterceptor.java}
You can add a customer interceptor like this and configure it into you camel-cxf endpont
{snippet:id=example|lang=xml|url=camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointsRouterContext.xml}
Or adding a message header for it like this if you are using *Camel 2.4*.
{code}
 // set up the response context which force start document
 Map<String, Object> map = new HashMap<String, Object>();
 map.put("org.apache.cxf.stax.force-start-document", Boolean.TRUE);
 exchange.getOut().setHeader(Client.RESPONSE_CONTEXT, map);
{code}


h3. How to consume a message from a camel-cxf endpoint in POJO data format

The {{camel-cxf}} endpoint consumer POJO data format is based on the [cxf invoker|http://cwiki.apache.org/CXF20DOC/invokers.html], so the message header has a property with the name of {{CxfConstants.OPERATION_NAME}} and the message body is a list of the SEI method parameters.
{snippet:id=personProcessor|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/wsdl_first/PersonProcessor.java}

h3. How to prepare the message for the camel-cxf endpoint in POJO data format

The {{camel-cxf}} endpoint producer is based on the [cxf client API|https://svn.apache.org/repos/asf/cxf/trunk/api/src/main/java/org/apache/cxf/endpoint/Client.java]. First you need to specify the operation name in the message header, then add the method parameters to a list, and initialize the message with this parameter list. The response message's body is a messageContentsList, you can get the result from that list.

*NOTE* After Camel 1.5 , we change the message body from object array to message content list. If you still want to get the object array from the message body, you can get the body using {{message.getbody(Object\[\].class)}}, as follows:
{snippet:id=sending|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerRouterTest.java}

h3. How to deal with the message for a camel-cxf endpoint in PAYLOAD data format

{{PAYLOAD}} means that you process the payload message from the SOAP envelope. You can use the {{Header.HEADER_LIST}} as the key to set or get the SOAP headers and use the {{List<Element>}} to set or get SOAP body elements.
Camel 1.x branch, you can get the {{List<Element>}} and header from the CXF Message, but if you want to set the response message, you need to create the CXF message using the CXF API.
{snippet:id=payload|lang=java|url=camel/branches/camel-1.x/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerPayloadTest.java}
*Change in 2.0*, There is no more {{CxfMessage}}, we just use the common Camel {{DefaultMessageImpl}} under layer. {{Message.getBody()}} will return an {{org.apache.camel.component.cxf.CxfPayload}} object, which has getters for SOAP message headers and Body elements. This change enables decoupling the native CXF message from the Camel message.
{snippet:id=payload|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerPayloadTest.java}

h3. How to get and set SOAP headers in POJO mode

{{POJO}} means that the data format is a "list of Java objects" when the Camel-cxf endpoint produces or consumes Camel exchanges.  Even though Camel expose message body as POJOs in this mode, Camel-cxf still provides access to read and write SOAP headers.  However, since CXF interceptors remove in-band SOAP headers from Header list after they have been processed, only out-of-band SOAP headers are available to Camel-cxf in POJO mode.

The following example illustrate how to get/set SOAP headers.  Suppose we have a route that forwards from one Camel-cxf endpoint to another.  That is, SOAP Client \-> Camel \-> CXF service.   We can attach two processors to obtain/insert SOAP headers at (1) before request goes out to the CXF service and (2) before response comes back to the SOAP Client.  Processor (1) and (2) in this example are InsertRequestOutHeaderProcessor and InsertResponseOutHeaderProcessor.  Our route looks like this:

{snippet:id=processSoapHeaderRoute|lang=xml|url=camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest-context.xml}

*In 2.x* SOAP headers are propagated to and from Camel Message headers.  The Camel message header name is "org.apache.cxf.headers.Header.list" which is a constant defined in CXF (org.apache.cxf.headers.Header.HEADER_LIST).  The header value is a List of CXF SoapHeader objects (org.apache.cxf.binding.soap.SoapHeader).  The following snippet is the InsertResponseOutHeaderProcessor (that insert a new SOAP header in the response message).  The way to access SOAP headers in both InsertResponseOutHeaderProcessor and InsertRequestOutHeaderProcessor are actually the same.  The only difference between the two processors is setting the direction of the inserted SOAP header.

{snippet:id=InsertResponseOutHeaderProcessor|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest.java}

*In 1.x* SOAP headers are not propagated to and from Camel Message headers. Users have to go deeper into CXF APIs to access SOAP headers.  Also, accessing the SOAP headers in a request message is slight different than in a response message.  The InsertRequestOutHeaderProcessor and InsertResponseOutHeaderProcessor are as follow.

{snippet:id=SOAPHeaderProcessors|lang=java|url=camel/branches/camel-1.x/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/soap/headers/CxfMessageHeadersRelayTest.java}

h3. How to get and set SOAP headers in PAYLOAD mode

We've already shown how to access SOAP message (CxfPayload object) in PAYLOAD mode (See "How to deal with the message for a camel-cxf endpoint in PAYLOAD data format").

*In 2.x* Once you obtain a CxfPayload object, you can invoke the CxfPayload.getHeaders() method that returns a List of DOM Elements (SOAP headers).

{snippet:id=payload|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadSoapHeaderTest.java}

\*In 1.x" You can get/set to the CXF Message by the key "org.apache.cxf.headers.Header.list" which is a constant defined in CXF (org.apache.cxf.headers.Header.HEADER_LIST).

{snippet:id=payload|lang=java|url=camel/branches/camel-1.x/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfPayLoadSoapHeaderTest.java}

h3. SOAP headers are not available in MESSAGE mode

SOAP headers are not available in MESSAGE mode as SOAP processing is skipped.

h3. How to throw a SOAP Fault from Camel

If you are using a {{camel-cxf}} endpoint to consume the SOAP request, you may need to throw the SOAP Fault from the camel context.
Basically, you can use the {{throwFault}} DSL to do that; it works for {{POJO}}, {{PAYLOAD}} and {{MESSAGE}} data format.
You can define the soap fault like this
{snippet:id=FaultDefine|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfCustomizedExceptionTest.java}
Then throw it as you like
{snippet:id=ThrowFault|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfCustomizedExceptionTest.java}
If your CXF endpoint is working in the {{MESSAGE}} data format, you could set the the SOAP Fault message in the message body and set the response code in the message header.
{snippet:id=MessageStreamFault|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfMessageStreamExceptionTest.java}
*NOTE* the response code setting only works in Camel's version >= 1.5.1

h3. How to propagate a camel-cxf endpoint's request and response context

[cxf client API|https://svn.apache.org/repos/asf/cxf/trunk/api/src/main/java/org/apache/cxf/endpoint/Client.java] provides a way to invoke the operation with request and response context. If you are using a {{camel-cxf}} endpoint producer to invoke the outside web service, you can set the request context and get response context with the following code:
{code:java}
        CxfExchange exchange = (CxfExchange)template.send(getJaxwsEndpointUri(), new Processor() {
             public void process(final Exchange exchange) {
                 final List<String> params = new ArrayList<String>();
                 params.add(TEST_MESSAGE);
                 // Set the request context to the inMessage
                 Map<String, Object> requestContext = new HashMap<String, Object>();
                 requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, JAXWS_SERVER_ADDRESS);
                 exchange.getIn().setBody(params);
                 exchange.getIn().setHeader(Client.REQUEST_CONTEXT , requestContext);
                 exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION);
             }
         });
         org.apache.camel.Message out = exchange.getOut();
         // The output is an object array, the first element of the array is the return value
         Object\[\] output = out.getBody(Object\[\].class);
         LOG.info("Received output text: " + output\[0\]);
         // Get the response context form outMessage
         Map<String, Object> responseContext = CastUtils.cast((Map)out.getHeader(Client.RESPONSE_CONTEXT));
         assertNotNull(responseContext);
         assertEquals("Get the wrong wsdl opertion name", "{http://apache.org/hello_world_soap_http}greetMe",
                      responseContext.get("javax.xml.ws.wsdl.operation").toString());
{code}

h3. Attachment Support

*POJO Mode:* Both SOAP with Attachment and MTOM are supported (see example in Payload Mode for enabling MTOM).&nbsp; However, SOAP with Attachment is not tested.&nbsp; Since attachments are marshalled and unmarshalled into POJOs, users typically do not need to deal with the attachment themself.&nbsp; Attachments are propagated to Camel message's attachments since 2.1.&nbsp; So, it is possible to retreive attachments by Camel Message API {code}DataHandler Message.getAttachment(String id){code}.

*Payload Mode:* MTOM is supported since 2.1.  Attachments can be retrieved by Camel Message APIs mentioned above.  SOAP with Attachment (SwA) is supported and attachments can be retrieved since 2.5. SwA is the default (same as setting the CXF endpoint property "mtom_enabled" to false).&nbsp;


To enable MTOM, set the CXF endpoint property "mtom_enabled" to _true_.  (I believe you can only do it with Spring.)

{snippet:id=enableMtom|lang=xml|url=camel/trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/mtom/CxfMtomRouterPayloadModeTest-context.xml}

You can produce a Camel message with attachment to send to a CXF endpoint in Payload mode.
{snippet:id=producer|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/mtom/CxfMtomProducerPayloadModeTest.java}

You can also consume a Camel message received from a CXF endpoint in Payload mode.

{snippet:id=consumer|lang=java|url=camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/mtom/CxfMtomConsumerPayloadModeTest.java}

*Message Mode:* Attachments are not supported as it does not process the message at all.

{include:Endpoint See Also}