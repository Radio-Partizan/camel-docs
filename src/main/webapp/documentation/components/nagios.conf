h2. Nagios
*Available as of Camel 2.3*

The [Nagios] component allows you to send passive checks to [Nagios|http://nagios.org].

Maven users will need to add the following dependency to their {{pom.xml}} for this component:
{code}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-nagios</artifactId>
    <version>x.x.x</version>
    <!-- use the same version as your Camel core version -->
</dependency>
{code}


h3. URI format

{code}
nagios://host[:port][?Options]
{code}

Camel provides two abilities with the [Nagios] component. You can send passive check messages by sending a message to its endpoint.
Camel also provides a [EventNotifer|Camel JMX] which allows you to send notifications to Nagios.

h3. Options
{div:class=confluenceTableSmall}
|| Name || Default Value || Description ||
| {{host}} | none | This is the address of the [Nagios] host where checks should be send. |
| {{port}} | | The port number of the host. |
| {{password}} | | Password to be authenticated when sending checks to Nagios. |
| {{connectionTimeout}} | 5000 | Connection timeout in millis. |
| {{timeout}} | 5000 | Sending timeout in millis. |
| {{nagiosSettings}} | | To use an already configured {{com.googlecode.jsendnsca.core.NagiosSettings}} object. |
| {{sendSync}} | {{true}} | Whether or not to use synchronous when sending a passive check. Setting it to {{false}} will allow Camel to continue routing the message and the passive check message will be send asynchronously. |
{div}

h3. Headers
{div:class=confluenceTableSmall}
|| Name || Description ||
| {{CamelNagiosHostName}} | This is the address of the [Nagios] host where checks should be send. This header will override any existing hostname configured on the endpoint. |
| {{CamelNagiosLevel}} | This is the severity level. You can use values {{CRITICAL, WARNING, OK}}. Camel will by default use {{OK}}. |
| {{CamelNagiosServiceName}} | The servie name. Will default use the [CamelContext] name. |
{div}


h3. Sending message examples
You can send a message to Nagios where the message payload contains the message. By default it will be {{OK}} level and use the [CamelContext] name as the service name. You can overrule these values using headers as shown above.

For example we send the {{Hello Nagios}} message to Nagios as follows:
{code}
    template.sendBody("direct:start", "Hello Nagios");

    from("direct:start").to("nagios:127.0.0.1:5667?password=secret").to("mock:result");
{code}

To send a {{CRITICAL}} message you can send the headers such as:
{code}
        Map headers = new HashMap();
        headers.put(NagiosConstants.LEVEL, "CRITICAL");
        headers.put(NagiosConstants.HOST_NAME, "myHost");
        headers.put(NagiosConstants.SERVICE_NAME, "myService");
        template.sendBodyAndHeaders("direct:start", "Hello Nagios", headers);
{code}

h3. Using {{NagiosEventNotifer}}
The [Nagios] component also provides an [EventNotifer|Camel JMX] which you can use to send events to Nagios. For example we can enable this from Java as follows:
{code}
        NagiosEventNotifier notifier = new NagiosEventNotifier();
        notifier.getConfiguration().setHost("localhost");
        notifier.getConfiguration().setPort(5667);
        notifier.getConfiguration().setPassword("password");

        CamelContext context = ... 
        context.getManagementStrategy().addEventNotifier(notifier);
        return context;
{code}

In Spring XML its just a matter of defining a Spring bean with the type {{EventNotifier}} and Camel will pick it up as documented here: [Advanced configuration of CamelContext using Spring].

{include:Endpoint See Also}