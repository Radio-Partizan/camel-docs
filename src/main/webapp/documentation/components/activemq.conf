h2. ActiveMQ Component

The ActiveMQ component allows messages to be sent to a [JMS|http://java.sun.com/products/jms/] Queue or Topic or messages to be consumed from a JMS Queue or Topic using [Apache ActiveMQ|http://activemq.apache.org/|The most popular and powerful open source message broker]. 

This component is based on [JMS Component|JMS] and uses Spring's JMS support for declarative transactions, using Spring's {{JmsTemplate}} for sending and a {{MessageListenerContainer}} for consuming. All the options from the [JMS] component also applies for this component.

To use this component make sure you have the {{activemq.jar}} or {{activemq-core.jar}} on your classpath along with any Camel dependencies such as {{camel-core.jar}}, {{camel-spring.jar}} and {{camel-jms.jar}}.

h3. URI format

{code}
activemq:[queue:|topic:]destinationName
{code}

Where *destinationName* is an ActiveMQ queue or topic name. By default, the *destinationName* is interpreted as a queue name. For example, to connect to the queue, {{FOO.BAR}}, use:

{code}
activemq:FOO.BAR
{code}

You can include the optional {{queue:}} prefix, if you prefer:

{code}
activemq:queue:FOO.BAR
{code}

To connect to a topic, you must include the {{topic:}} prefix. For example, to connect to the topic, {{Stocks.Prices}}, use:

{code}
activemq:topic:Stocks.Prices
{code}

h3. Options
See Options on the [JMS] component as all these options also apply for this component.

h3. Configuring the Connection Factory

The following [test case|http://svn.apache.org/repos/asf/activemq/trunk/activemq-camel/src/test/java/org/apache/camel/component/ActiveMQRouteTest.java] shows how to add an ActiveMQComponent to the [CamelContext] using the [{{activeMQComponent()}} method|http://camel.apache.org/maven/camel-activemq/apidocs/org/apache/camel/component/activemq/ActiveMQComponent.html#activeMQComponent(java.lang.String)] while specifying the [brokerURL|http://activemq.apache.org/configuring-transports.html] used to connect to ActiveMQ. 

{snippet:id=example|lang=java|url=activemq/trunk/activemq-camel/src/test/java/org/apache/activemq/camel/component/ActiveMQRouteTest.java}

h3. Configuring the Connection Factory using Spring XML

You can configure the ActiveMQ broker URL on the ActiveMQComponent as follows

{code:xml}
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <camelContext xmlns="http://camel.apache.org/schema/spring">
  </camelContext>


  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="brokerURL" value="tcp://somehost:61616"/>
  </bean>

</beans>
{code}

h3. Using connection pooling
When sending to an ActiveMQ broker using Camel it's recommended to use a pooled connection factory to efficiently handle  pooling of JMS connections, sessions and producers. This is documented on the [ActiveMQ Spring Support | http://activemq.apache.org/spring-support.html] page.

You can grab ActiveMQ's {{org.apache.activemq.pool.PooledConnectionFactory}} with Maven:

{code:xml}
    <dependency>
      <groupId>org.apache.activemq</groupId>
      <artifactId>activemq-pool</artifactId>
      <version>5.3.2</version>
    </dependency>
{code}

And then setup the *activemq* Camel component as follows:
{code:xml}

	<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
	</bean>

	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="maxConnections" value="8" />
		<property name="maximumActive" value="500" />
		<property name="connectionFactory" ref="jmsConnectionFactory" />
	</bean>


        <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
            <property name="connectionFactory" ref="pooledConnectionFactory"/>
            <property name="transacted" value="false"/>
            <property name="concurrentConsumers" value="10"/>
        </bean>

        <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
            <property name="configuration" ref="jmsConfig"/>
        </bean>
{code}

h3. Invoking MessageListener POJOs in a Camel route

The ActiveMQ component also provides a helper [Type Converter] from a JMS MessageListener to a [Processor]. This means that the [Bean] component is capable of invoking any JMS MessageListener bean directly inside any route.

So for example you can create a MessageListener in JMS like this:

{code}
public class MyListener implements MessageListener {
   public void onMessage(Message jmsMessage) {
       // ...
   }
}
{code}
 
Then use it in your Camel route as follows
{code}
from("file://foo/bar").
  bean(MyListener.class);
{code}
 
That is, you can reuse any of the Camel [Components] and easily integrate them into your JMS {{MessageListener}} POJO!

h3. Consuming Advisory Messages

ActiveMQ can generate [Advisory messages | http://activemq.apache.org/advisory-message.html] which are put in topics that you can consume. Such messages can help you send alerts in case you detect slow consumers or to build statistics (number of messages/produced per day, etc.) The following Spring DSL example shows you how to read messages from a topic.

The below route starts by reading the topic _ActiveMQ.Advisory.Connection_. To watch another topic, simply change the name according to the name provided in ActiveMQ Advisory Messages documentation. The parameter mapJmsMessage=false allows for converting the org.apache.activemq.command.ActiveMqMessage object from the jms queue.  Next, the body received is converted into a String for the purposes of this example and a carriage return is added. Finally, the string is added to a file

{code}
<route>
	<from uri="activemq:topic:ActiveMQ.Advisory.Connection?mapJmsMessage=false" />
	<convertBodyTo type="java.lang.String"/>
	<transform>
	     <simple>${in.body}&#13;</simple>
	</transform>
	<to uri="file://data/activemq/?fileExist=Append&amp;fileName=advisoryConnection-${date:now:yyyyMMdd}.txt" />
</route>
{code}

If you consume a message on a queue, you should see the following files under the data/activemq folder :

advisoryConnection-20100312.txt
advisoryProducer-20100312.txt

and containing string:

{code}
ActiveMQMessage {commandId = 0, responseRequired = false, messageId = ID:dell-charles-3258-1268399815140
-1:0:0:0:221, originalDestination = null, originalTransactionId = null, producerId = ID:dell-charles-
3258-1268399815140-1:0:0:0, destination = topic://ActiveMQ.Advisory.Connection, transactionId = null, 
expiration = 0, timestamp = 0, arrival = 0, brokerInTime = 1268403383468, brokerOutTime = 1268403383468, 
correlationId = null, replyTo = null, persistent = false, type = Advisory, priority = 0, groupID = null, 
groupSequence = 0, targetConsumerId = null, compressed = false, userID = null, content = null, 
marshalledProperties = org.apache.activemq.util.ByteSequence@17e2705, dataStructure = ConnectionInfo 
{commandId = 1, responseRequired = true, connectionId = ID:dell-charles-3258-1268399815140-2:50, 
clientId = ID:dell-charles-3258-1268399815140-14:0, userName = , password = *****, 
brokerPath = null, brokerMasterConnector = false, manageable = true, clientMaster = true}, 
redeliveryCounter = 0, size = 0, properties = {originBrokerName=master, originBrokerId=ID:dell-charles-
3258-1268399815140-0:0, originBrokerURL=vm://master}, readOnlyProperties = true, readOnlyBody = true, 
droppable = false}
{code}

h3. Getting Component JAR

You will need these dependencies
- {{camel-jms}}
- {{activemq-camel}}

h4. camel-jms
You *must* have the {{camel-jms}} as dependency as [ActiveMQ] is an extension to the [JMS] component.
{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-jms</artifactId>
  <version>1.6.0</version>
</dependency>
{code}

The ActiveMQ Camel component is released with the ActiveMQ project itself.
For Maven 2 users you simply just need to add the following dependency to your project.

h4. ActiveMQ 5.2 or later

{code}
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-camel</artifactId>
  <version>5.2.0</version>
</dependency>
{code}

h4. ActiveMQ 5.1.0

For 5.1.0 its in the activemq-core library

{code}
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.1.0</version>
</dependency>
{code}

Alternatively you can download the component jar directly from the Maven repository:

* [activemq-camel-5.2.0.jar|http://repo2.maven.org/maven2/org/apache/activemq/activemq-camel/5.2.0/activemq-camel-5.2.0.jar]
* [activemq-core-5.1.0.jar|http://repo2.maven.org/maven2/org/apache/activemq/activemq-core/5.1.0/activemq-core-5.1.0.jar]

h4. ActiveMQ 4.x

For this version you must use the [JMS] component instead. Please be careful to use a pooling connection factory as described in the [JmsTemplate Gotchas|http://activemq.apache.org/jmstemplate-gotchas.html]

{include:Endpoint See Also}