h2. Bean Component

The *bean:* component binds beans to Camel message exchanges.

h3. URI format

{code}
bean:beanID[?options]
{code}
Where *beanID* can be any string which is used to look up the bean in the [Registry]

h3. Options
|| Name || Type || Default || Description ||
| {{method}} | {{String}} | {{null}} | The method name that bean will be invoked. If not provided, Camel will try to pick the method itself. In case of ambiguity an exception is thrown. See [Bean Binding] for more details. |
| {{cache}} | {{boolean}} | {{false}} | If enabled, Camel will cache the result of the first [Registry] look-up. Cache can be enabled if the bean in the [Registry] is defined as a singleton scope. |
| {{multiParameterArray}} | {{boolean}} | {{false}} | *Camel 1.5:* How to treat the parameters which are passed from the message body; if it is {{true}}, the In message body should be an array of parameters. |

You can append query options to the URI in the following format, {{?option=value&option=value&...}}

h3. Using

The object instance that is used to consume messages must be explicitly registered with the [Registry]. For example, if you are using Spring you must define the bean in the Spring configuration, {{spring.xml}}; or if you don't use Spring, put the bean in JNDI.

{snippet:id=register|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/component/pojo/PojoRouteTest.java}

Once an endpoint has been registered, you can build Camel routes that use it to process exchanges.

{snippet:id=route|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/component/pojo/PojoRouteTest.java}

A *bean:* endpoint cannot be defined as the input to the route; i.e. you cannot consume from it, you can only route from some inbound message [Endpoint] to the bean endpoint as output.  So consider using a *direct:* or *queue:* endpoint as the input.  

You can use the {{createProxy()}} methods on [ProxyHelper|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/component/bean/ProxyHelper.html] to create a proxy that will generate BeanExchanges and send them to any endpoint:

{snippet:id=invoke|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/component/pojo/PojoRouteTest.java}

And the same route using Spring DSL:
{code:xml}
    <route>
       <from uri="direct:hello">
       <to uri="bean:bye"/>
    </route>
{code}

h3. Bean as endpoint
Camel also supports invoking [Bean] as an Endpoint. In the route below:
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/bind/beanAsEndpoint.xml}
What happens is that when the exchange is routed to the {{myBean}} Camel will use the [Bean Binding] to invoke the bean.
The source for the bean is just a plain POJO:
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/bind/ExampleBean.java}
Camel will use [Bean Binding] to invoke the {{sayHello}} method, by converting the Exchange's In body to the {{String}} type and storing the output of the method on the Exchange Out body.

h3. Bean Binding

How bean methods to be invoked are chosen (if they are not specified explicitly through the *method* parameter) and how parameter values are constructed from the [Message] are all defined by the [Bean Binding] mechanism which is used throughout all of the various [Bean Integration] mechanisms in Camel.

{include:Endpoint See Also}
* [Class] component
* [Bean Binding]
* [Bean Integration]

