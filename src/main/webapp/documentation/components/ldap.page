---
title: LDAP
page_version: 10
page_creator: hadrian@apache.org
page_modifier: davsclaus
--- pipeline:conf
h2. LDAP Component

The *ldap* component allows you to perform searches in LDAP servers using filters as the message payload.
This component uses standard JNDI ({{javax.naming}} package) to access the server. 

Maven users will need to add the following dependency to their {{pom.xml}} for this component:
{code}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-ldap</artifactId>
    <version>x.x.x</version>
    <!-- use the same version as your Camel core version -->
</dependency>
{code}

h3. URI format

{code}
ldap:ldapServerBean[?options]
{code}

The _ldapServerBean_ portion of the URI refers to a [DirContext|http://java.sun.com/j2se/1.4.2/docs/api/javax/naming/directory/DirContext.html] bean in the registry. The LDAP component only supports producer endpoints, which means that an {{ldap}} URI cannot appear in the {{from}} at the start of a route.

You can append query options to the URI in the following format, {{?option=value&option=value&...}}

h3. Options

|| Name || Default Value || Description ||
| {{base}} | {{ou=system}} | The base DN for searches. |
| {{scope}} | {{subtree}} | Specifies how deeply to search the tree of entries, starting at the base DN.  Value can be {{object}}, {{onelevel}}, or {{subtree}}. |

h3. Result
The result is returned in the Out body as a {{ArrayList<javax.naming.directory.SearchResult>}} object. 

h3. DirContext

The URI, {{ldap:ldapserver}}, references a Spring bean with the ID, {{ldapserver}}. The {{ldapserver}} bean may be defined as follows:

{code}
<bean id="ldapserver" class="javax.naming.directory.InitialDirContext" scope="prototype">
  <constructor-arg>
    <props>
      <prop key="java.naming.factory.initial">com.sun.jndi.ldap.LdapCtxFactory</prop>
      <prop key="java.naming.provider.url">ldap://localhost:10389</prop>
      <prop key="java.naming.security.authentication">none</prop>
    </props>
  </constructor-arg>
</bean>
{code}

The preceding example declares a regular Sun based LDAP {{DirContext}} that connects anonymously to a locally hosted LDAP server.

{note}
{{DirContext}} objects are *not* required to support concurrency by contract. It is therefore important that the directory context is declared with the setting, {{scope="prototype"}}, in the {{bean}} definition or that the context supports concurrency. In the Spring framework, {{prototype}} scoped objects are instantiated each time they are looked up.
{note}

{note}
Camel 1.6.1 and Camel 2.0 include a [fix|https://issues.apache.org/activemq/browse/CAMEL-1583?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=51503] to support concurrency for LDAP producers. _ldapServerBean_ contexts are now looked up each time a request is sent to the LDAP server. In addition, the contexts are released as soon as the producer completes.
{note}

h3. Samples

Following on from the Spring configuration above, the code sample below sends an LDAP request to filter search a group for a member. The Common Name is then extracted from the response.

{code}
ProducerTemplate<Exchange> template = exchange
  .getContext().createProducerTemplate();

Collection<?> results = (Collection<?>) (template
  .sendBody(
    "ldap:ldapserver?base=ou=mygroup,ou=groups,ou=system",
    "(member=uid=huntc,ou=users,ou=system)"));

if (results.size() > 0) {
  // Extract what we need from the device's profile

  Iterator<?> resultIter = results.iterator();
  SearchResult searchResult = (SearchResult) resultIter
      .next();
  Attributes attributes = searchResult
      .getAttributes();
  Attribute deviceCNAttr = attributes.get("cn");
  String deviceCN = (String) deviceCNAttr.get();

  ...
{code}

If no specific filter is required - for example, you just need to look up a single entry - specify a wildcard filter expression. For example, if the LDAP entry has a Common Name, use a filter expression like:

{code}
(cn=*)
{code}

h4. Binding using credentials

A Camel end user donated this sample code he used to bind to the ldap server using credentials.
{code}
Properties props = new Properties();
props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
props.setProperty(Context.PROVIDER_URL, "ldap://localhost:389");
props.setProperty(Context.URL_PKG_PREFIXES, "com.sun.jndi.url");
props.setProperty(Context.REFERRAL, "ignore");
props.setProperty(Context.SECURITY_AUTHENTICATION, "simple");
props.setProperty(Context.SECURITY_PRINCIPAL, "cn=Manager");
props.setProperty(Context.SECURITY_CREDENTIALS, "secret");

SimpleRegistry reg = new SimpleRegistry();
reg.put("myldap", new InitialLdapContext(props, null));

CamelContext context = new DefaultCamelContext(reg);
context.addRoutes(
    new RouteBuilder() {
        public void configure() throws Exception { 
            from("direct:start").to("ldap:myldap?base=ou=test");
        }
    }
);
context.start();

ProducerTemplate template = context.createProducerTemplate();

Endpoint endpoint = context.getEndpoint("direct:start");
Exchange exchange = endpoint.createExchange();
exchange.getIn().setBody("(uid=test)");
Exchange out = template.send(endpoint, exchange);

Collection<SearchResult> data = out.getOut().getBody(Collection.class);
assert data != null;
assert !data.isEmpty();

System.out.println(out.getOut().getBody());

context.stop();
{code}

{include:Endpoint See Also}