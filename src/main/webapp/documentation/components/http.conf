h2. HTTP Component

The *http:* component provides HTTP based [endpoints|Endpoint] for consuming external HTTP resources (as a client to call external servers using HTTP).

Maven users will need to add the following dependency to their {{pom.xml}} for this component:
{code:xml}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-http</artifactId>
    <version>x.x.x</version>
    <!-- use the same version as your Camel core version -->
</dependency>
{code}

h3. URI format

{code}
http:hostname[:port][/resourceUri][?options]
{code}
Will by default use port 80 for HTTP and 443 for HTTPS.

You can append query options to the URI in the following format, {{?option=value&option=value&...}}

{info:title=camel-http vs camel-jetty}
You can only produce to endpoints generated by the HTTP component. Therefore it should never be used as input into your camel Routes. To bind/expose an HTTP endpoint via a HTTP server as input to a camel route, you can use the [Jetty Component|Jetty]
{info}

h3. HttpEndpoint Options
{div:class=confluenceTableSmall}
|| Name || Default Value || Description ||
| {{throwExceptionOnFailure}} | {{true}} | *Camel 2.0:* Option to disable throwing the {{HttpOperationFailedException}} in case of failed responses from the remote server. This allows you to get all responses regardles of the HTTP status code. |
| {{bridgeEndpoint}} | {{false}} |*Camel 2.1:* If the option is true , HttpProducer will ignore the Exchange.HTTP_URI header, and use the endpoint's URI for request. You may also set the *throwExcpetionOnFailure* to be false to let the HttpProducer send all the fault response back. 
*Camel 2.3:* If the option is true, HttpProducer and CamelServlet will skip the gzip processing if the content-encoding is "gzip".|
| {{disableStreamCache}} | {{false}} |*Camel 2.3:* DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support read it twice, otherwise DefaultHttpBinding will set the request input stream direct into the message body. |
| {{httpBindingRef}} | {{null}} | Reference to a {{org.apache.camel.component.http.HttpBinding}} in the [Registry]. From Camel 2.3 onwards prefer to use the {{httpBinding}} option. |
| {{httpBinding}} | {{null}} | *Camel 2.3:* Reference to a {{org.apache.camel.component.http.HttpBinding}} in the [Registry]. |
| {{httpClientConfigurerRef}} | {{null}} | Reference to a {{org.apache.camel.component.http.HttpClientConfigurer}} in the [Registry]. From Camel 2.3 onwards prefer to use the {{httpClientConfigurer}} option. |
| {{httpClientConfigurer}} | {{null}} | *Camel 2.3:* Reference to a {{org.apache.camel.component.http.HttpClientConfigurer}} in the [Registry]. |
| {{httpClient.XXX}} | {{null}} | Setting options on the [HttpClientParams|http://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/params/HttpClientParams.html]. For instance {{httpClient.soTimeout=5000}} will set the {{SO_TIMEOUT}} to 5 seconds. |
| {{clientConnectionManager}} | {{null}} | *Camel 2.3:* To use a custom {{org.apache.http.conn.ClientConnectionManager}}. |
{div}

The following authentication options can also be set on the HttpEndpoint:

h4. Camel 2.2 or older: Setting Authentication and Proxy
{div:class=confluenceTableSmall}
|| Name || Default Value || Description ||
| {{username}} | {{null}} | Username for authentication. |
| {{password}} | {{null}} | Password for authentication. |
| {{domain}} | {{null}} | *Camel 2.1:* Domain for NTML Authentication. This option must be used to force NTML authentication. |
| {{proxyHost}} | {{null}} | *Camel 1.6.2:* The proxy host name |
| {{proxyPort}} | {{null}} | *Camel 1.6.2:* The proxy port number |
| {{proxyUsername}} | {{null}} | *Camel 1.6.2:* Username for proxy authentication |
| {{proxyPassword}} | {{null}} | *Camel 1.6.2:* Password for proxy authentication |
{div}

h4. Camel 2.3 or newer: HttpConfiguration - Setting Authentication and Proxy
{div:class=confluenceTableSmall}
|| Name || Default Value || Description ||
| {{authMethod}} | {{null}} | Authentication method, either as {{Basic}}, {{Digest}} or {{NTLM}}. |
| {{authMethodPriority}} | {{null}} | Priority of authentication methods. Is a list separated with comma. For example: {{Basic,Digest}} to exclude {{NTLM}}. |
| {{authUsername}} | {{null}} | Username for authentication |
| {{authPassword}} | {{null}} | Password for authentication |
| {{authDomain}} | {{null}} | Domain for NTML authentication |
| {{authHost}} | {{null}} | Optional host for NTML authentication |
| {{proxyHost}} | {{null}} | The proxy host name |
| {{proxyPort}} | {{null}} | The proxy port number |
| {{proxyAuthMethod}} | {{null}} | Authentication method for proxy, either as {{Basic}}, {{Digest}} or {{NTLM}}. |
| {{proxyAuthUsername}} | {{null}} | Username for proxy authentication |
| {{proxyAuthPassword}} | {{null}} | Password for proxy authentication |
| {{proxyAuthDomain}} | {{null}} | Domain for proxy NTML authentication |
| {{proxyAuthHost}} | {{null}} | Optional host for proxy NTML authentication |
{div}

When using authentication you *must* provide the choice of method for the {{authMethod}} or {{authProxyMethod}} options.
You can configure the proxy and authentication details on either the {{HttpComponent}} or the {{HttpEndoint}}. Values provided on the {{HttpEndpoint}} will take precedence over {{HttpComponent}}. Its most likely best to configure this on the {{HttpComponent}} which allows you to do this once.

The [Http] component uses convention over configuration which means that if you have not explicit set a {{authMethodPriority}} then it will fallback and use the select(ed) {{authMethod}} as priority as well. So if you use {{authMethod.Basic}} then the {{auhtMethodPriority}} will be {{Basic}} only.

h3. HttpComponent Options
{div:class=confluenceTableSmall}
|| Name || Default Value || Description ||
| {{httpBinding}} | {{null}} | To use a custom {{org.apache.camel.component.http.HttpBinding}}. |
| {{httpClientConfigurer}} | {{null}} | To use a custom {{org.apache.camel.component.http.HttpClientConfigurer}}. |
| {{httpConnectionManager}} | {{null}} | To use a custom {{org.apache.commons.httpclient.HttpConnectionManager}}. |
| {{httpConfiguration}} | {{null}} | *Camel 2.3:* To use a custom {{org.apache.camel.component.http.HttpConfiguration}} |
{div}
{{HttpConfiguration}} contains all the options listed in the table above under the section _HttpConfiguration - Setting Authentication and Proxy_.

h3. Message Headers

h4. Camel 1.x
{div:class=confluenceTableSmall}
|| Name || Type || Description ||
| {{HttpProducer.HTTP_URI}} | {{String}} | *Camel 1.6.0*: URI to call. Will override existing URI set directly on the endpoint. Is set on the In message. |
| {{HttpProducer.HTTP_RESPONSE_CODE}} | {{int}} | The HTTP response code from the external server. Is 200 for OK. Is set on the Out message. |
| {{HttpProducer.QUERY}} | {{String}} | URI parameters. Will override existing URI parameters set directly on the endpoint. Is set on the In message. |
{div}

h4. Camel 2.x
{div:class=confluenceTableSmall}
|| Name || Type || Description ||
| {{Exchange.HTTP_URI}} | {{String}} | URI to call. Will override existing URI set directly on the endpoint. |
| {{Exchange.HTTP_PATH}} | {{String}} | Request URI's path, the header will be used to build the request URI with the HTTP_URI. *Camel 2.3.0:* If the path is start with "/", http producer will try to find the relative path based on the Exchange.HTTP_BASE_URI header or the exchange.getFromEndpoint().getEndpointUri();|
| {{Exchange.HTTP_QUERY}} | {{String}} | URI parameters. Will override existing URI parameters set directly on the endpoint. |
| {{Exchange.HTTP_RESPONSE_CODE}} | {{int}} | The HTTP response code from the external server. Is 200 for OK.  |
| {{Exchange.HTTP_CHARACTER_ENCODING}} | {{String}} | Character encoding. |
| {{Exchange.CONTENT_TYPE}} | {{String}} | The HTTP content type. Is set on both the IN and OUT message to provide a content type, such as {{text/html}}. |
| {{Exchange.CONTENT_ENCODING}} | {{String}} | The HTTP content encoding. Is set on both the IN and OUT message to provide a content encoding, such as {{gzip}}. |
| {{Exchange.HTTP_SERVLET_REQUEST}} | {{HttpServletRequest}} | *Camel 2.3:* The {{HttpServletRequest}} object. |
| {{Exchange.HTTP_SERVLET_RESPONSE}} | {{HttpServletResponse}} | *Camel 2.3:* The {{HttpServletResponse}} object. |
| {{Exchange.HTTP_PROTOCOL_VERSION}} | {{String}} | *Camel 2.5:* You can set the http protocol version with this header, eg. "HTTP/1.0". If you didn't specify the header, HttpProducer will use the default value "HTTP/1.1"|
{div}


h3. Message Body

Camel will store the HTTP response from the external server on the OUT body. All headers from the IN message will be copied to the OUT message, so headers are preserved during routing. Additionally Camel will add the HTTP response headers as well to the OUT message headers.

h3. Response code

Camel will handle according to the HTTP response code:
- Response code is in the range 100..299, Camel regards it as a success response.
- Response code is in the range 300..399, Camel regards it as a redirection response and will throw a {{HttpOperationFailedException}} with the information.
- Response code is 400\+, Camel regards it as an external server failure and will throw a {{HttpOperationFailedException}} with the information.
{tip:title=throwExceptionOnFailure}
The option, {{throwExceptionOnFailure}}, can be set to {{false}} to prevent the {{HttpOperationFailedException}} from being thrown for failed response codes. This allows you to get any response from the remote server.
There is a sample below demonstrating this.
{tip}

h3. HttpOperationFailedException

This exception contains the following information:
- The HTTP status code
- The HTTP status line (text of the status code)
- Redirect location, if server returned a redirect
- Response body as a {{java.lang.String}}, if server provided a body as response

h3. Calling using GET or POST

In *Camel 1.5* the following algorithm is used to determine if either {{GET}} or {{POST}} HTTP method should be used:
1. Use method provided in header.
2. {{GET}} if query string is provided in header.
3. {{GET}} if endpoint is configured with a query string.
4. {{POST}} if there is data to send (body is not null).
5. {{GET}} otherwise.

h3. How to get access to HttpServletRequest and HttpServletResponse
*Available as of Camel 2.0*

You can get access to these two using the Camel type converter system using
*NOTE* from Camel 2.3.0 you can get the request and response not just from the processor after the camel-jetty or camel-cxf endpoint.
{code}
HttpServletRequest request = exchange.getIn().getBody(HttpServletRequest.class);
HttpServletRequest response = exchange.getIn().getBody(HttpServletResponse.class);
{code}

h3. Configuring URI to call

You can set the HTTP producer's URI directly form the endpoint URI. In the route below, Camel will call out to the external server, {{oldhost}}, using HTTP.
{code}
from("direct:start")
	    .to("http://oldhost");
{code}
And the equivalent Spring sample:
{code:xml}
<camelContext xmlns="http://activemq.apache.org/camel/schema/spring">
  <route>
    <from uri="direct:start"/>
    <to uri="http://oldhost"/>
  </route>
</camelContext>
{code}
In *Camel 1.5.1* you can override the HTTP endpoint URI by adding a header with the key, {{HttpProducer.HTTP_URI}}, on the message.
{code}
from("direct:start")
            .setHeader(org.apache.camel.component.http.HttpProducer.HTTP_URI, constant("http://newhost"))
	    .to("http://oldhost");
{code}
In the sample above Camel will call the [http://newhost] despite the endpoint is configured with [http://oldhost].

And the same code in Camel 2.0:
{code}
from("direct:start")
            .setHeader(HttpConstants.HTTP_URI, constant("http://newhost"))
	    .to("http://oldhost");
{code}
Where Constants is the class, {{org.apache.camel.component.http.Constants}}.

h3. Configuring URI Parameters

*Camel 1.x*
The *http* producer supports URI parameters to be sent to the HTTP server. The URI parameters can either be set directly on the endpoint URI or as a header with the key {{HttpProducer.QUERY}} on the message.
{code}
from("direct:start")
	    .to("http://oldhost?order=123&detail=short");
{code}
Or options provided in a header:
{code}
from("direct:start")
            .setHeader(HttpConstants.HTTP_QUERY, constant("order=123&detail=short"))
	    .to("http://oldhost");
{code}

*Camel 2.x*
The *http* producer supports URI parameters to be sent to the HTTP server. The URI parameters can either be set directly on the endpoint URI or as a header with the key {{Exchange.HTTP_QUERY}} on the message.
{code}
from("direct:start")
	    .to("http://oldhost?order=123&detail=short");
{code}
Or options provided in a header:
{code}
from("direct:start")
            .setHeader(Exchange.HTTP_QUERY, constant("order=123&detail=short"))
	    .to("http://oldhost");
{code}


h3. How to set the http method (GET/POST/PUT/DELETE/HEAD/OPTIONS/TRACE) to the HTTP producer

The HTTP component provides a way to set the HTTP request method by setting the message header. Here is an example;

*Camel 1.x*
{code}
from("direct:start")
            .setHeader(HttpConstants.HTTP_METHOD, constant(org.apache.camel.component.http.HttpMethods.POST))
	    .to("http://www.google.com")
            .to("mock:results");
{code}

*Camel 2.x*
{code}
from("direct:start")
            .setHeader(Exchange.HTTP_METHOD, constant(org.apache.camel.component.http.HttpMethods.POST))
	    .to("http://www.google.com")
            .to("mock:results");
{code}

The method can be written a bit shorter using the string constants:
{code}
.setHeader("CamelHttpMethod", constant("POST"))
{code}

And the equivalent Spring sample:
{code:xml}
<camelContext xmlns="http://activemq.apache.org/camel/schema/spring">
  <route>
    <from uri="direct:start"/>
    <setHeader headerName="CamelHttpMethod">
        <constant>POST</constant>
    </setHeader>
    <to uri="http://www.google.com"/>
    <to uri="mock:results"/>
  </route>
</camelContext>
{code}

h3. Using client tineout - SO_TIMEOUT
See the unit test in [this link|http://svn.apache.org/viewvc?view=rev&revision=781775]


h3. Configuring a Proxy
*Only for >= Camel 1.6.2*
The HTTP component provides a way to configure a proxy.

{code}
from("direct:start")
	    .to("http://oldhost?proxyHost=www.myproxy.com&proxyPort=80");
{code}

There is also support for proxy authentication via the {{proxyUsername}} and {{proxyPassword}} options.

h4. Using proxy settings outside of URI
*Only for >= Camel 1.6.2 and < Camel 2.2.0 *
The HTTP component will detect Java System Properties for {{http.proxyHost}} and {{http.proxyPort}} and use them if provided.
See more at [SUN http proxy documentation|http://java.sun.com/javase/6/docs/technotes/guides/net/proxies.html].

To avoid the System properties conflicts, from Camel 2.2.0 you can only set the proxy configure from CameContext or URI.
Java DSL :
{code}
 context.getProperties().put("http.proxyHost", "172.168.18.9");
 context.getProperties().put("http.proxyPort" "8080");
{code}
Spring XML
{code}
   <camelContext>
       <properties>
           <property key="http.proxyHost" value="172.168.18.9"/>
           <property key="http.proxyPort" value="8080"/>
      </properties>
   </camelContext>
{code}
Camel will first set the settings from Java System or CamelContext Properties and then the endpoint proxy options if provided.
So you can override the system properties with the endpoint options.

h3. Configuring charset

If you are using {{POST}} to send data you can configure the {{charset}} using the {{Exchange}} property:
{code}
exchange.setProperty(Exchange.CHARSET_NAME, "iso-8859-1");
{code}

h4. Sample with scheduled poll

The sample polls the Google homepage every 10 seconds and write the page to the file {{message.html}}:
{code}
from("timer://foo?fixedRate=true&delay=0&period=10000")
    .to("http://www.google.com")
    .setHeader(FileComponent.HEADER_FILE_NAME, "message.html").to("file:target/google");
{code}

h4. URI Parameters from the endpoint URI

In this sample we have the complete URI endpoint that is just what you would have typed in a web browser. Multiple URI parameters can of course be set using the {{&}} character as separator, just as you would in the web browser. Camel does no tricks here.
{code:java}
// we query for Camel at the Google page
template.sendBody("http://www.google.com/search?q=Camel", null);
{code}

h4. URI Parameters from the Message

{code:java}
Map headers = new HashMap();
headers.put(HttpProducer.QUERY, "q=Camel&lr=lang_en");
// we query for Camel and English language at Google
template.sendBody("http://www.google.com/search", null, headers);
{code}
In the header value above notice that it should *not* be prefixed with {{?}} and you can separate parameters as usual with the {{&}} char.

h4. Getting the Response Code

You can get the HTTP response code from the HTTP component by getting the value from the Out message header with {{HttpProducer.HTTP_RESPONSE_CODE}}.
{code:java}
Exchange exchange = template.send("http://www.google.com/search", new Processor() {
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setHeader(HttpProducer.QUERY, constant("hl=en&q=activemq"));
            }
   });
   Message out = exchange.getOut();
   int responseCode = out.getHeader(HttpProducer.HTTP_RESPONSE_CODE, Integer.class);
{code}

h3. Using {{throwExceptionOnFailure=false}} to get any response back

*Available as of Camel 2.0*
In the route below we want to route a message that we [enrich|Content Enricher] with data returned from a remote HTTP call. As we want any response from the remote server, we set the {{throwExceptionOnFailure}} option to {{false}} so we get any response in the {{AggregationStrategy}}. As the code is based on a unit test that simulates a HTTP status code 404, there is some assertion code etc.
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettySimplifiedHandle404Test.java}

h3. Disabling Cookies
To disable cookies you can set the HTTP Client to ignore cookies by adding this URI option:
{{httpClient.cookiePolicy=ignoreCookies}}

h3. Advanced Usage

If you need more control over the HTTP producer you should use the {{HttpComponent}} where you can set various classes to give you custom behavior.

h4. Setting MaxConnectionsPerHost
The [Http] Component has a {{org.apache.commons.httpclient.HttpConnectionManager}} where you can configure various global configuration for the given component.
By global, we mean that any endpoint the component creates has the same shared {{HttpConnectionManager}}. So, if we want to set a different value for the max connection per host, we need to define it on the HTTP component and *not* on the endpoint URI that we usually use. So here comes:

First, we define the {{http}} component in Spring XML. Yes, we use the same scheme name, {{http}}, because otherwise Camel will auto-discover and create the component with default settings. What we need is to overrule this so we can set our options. In the sample below we set the max connection to 5 instead of the default of 2.
{snippet:id=e1|lang=xml|url=camel/tags/camel-2.2.0/tests/camel-itest/src/test/resources/org/apache/camel/itest/http/HttpMaxConnectionPerHostTest-context.xml}
And then we can just use it as we normally do in our routes:
{snippet:id=e2|lang=xml|url=camel/tags/camel-2.2.0/tests/camel-itest/src/test/resources/org/apache/camel/itest/http/HttpMaxConnectionPerHostTest-context.xml}

h4. Using HTTPS to authenticate gotchas
An end user reported that he had problem with authenticating with HTTPS. The problem was eventually resolved when he discovered the HTTPS server did not return a HTTP code 401 Authorization Required. The solution was to set the following URI option: {{httpClient.authenticationPreemptive=true}}

h4. Accepting self signed certifications from remote server
See this [link|http://www.nabble.com/Using-HTTPS-in-camel-http-when-remote-side-has-self-signed-cert-td25916878.html] from a mailing list discussion with some code to outline how to do this with the Apache Commons HTTP API.

h4. Setting up SSL for HTTP Client
Basically camel-http component is built on the top of Apache HTTP client, and you can implement a custom {{org.apache.camel.component.http.HttpClientConfigurer}} to do some configuration on the http client if you need full control of it.

However if you _just_ want to specify the keystore and truststore you can do this with Apache HTTP {{HttpClientConfigurer}}, for example:

{code}
Protocol authhttps = new Protocol("https", new AuthSSLProtocolSocketFactory(
  new URL("file:my.keystore"), "mypassword",
  new URL("file:my.truststore"), "mypassword"), 443);

Protocol.registerProtocol("https", authhttps);
{code}

And then you need to create a class that implements {{HttpClientConfigurer}}, and registers https protocol providing a keystore or truststore per example above. Then, from your camel route builder class you can hook it up like so:

{code}
HttpComponent httpComponent = getContext().getComponent("http", HttpComponent.class);
httpComponent.setHttpClientConfigurer(new MyHttpClientConfigurer());
{code}

If you are doing this using the Spring DSL, you can specify your {{HttpClientConfigurer}} using the URI.  For example:
{code}
<bean id="myHttpClientConfigurer"
 class="my.https.HttpClientConfigurer">
</bean>

<to uri="https://myhostname.com:443/myURL?httpClientConfigurerRef=myHttpClientConfigurer"/> 
{code}

As long as you implement the HttpClientConfigurer and configure your keystore and truststore as described above, it will work fine.

{include:Endpoint See Also}
- [Jetty]