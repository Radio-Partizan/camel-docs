---
title: FTP2
page_version: 50
page_creator: davsclaus
page_modifier: davsclaus
--- pipeline:conf
h2. FTP/SFTP/FTPS Component - *Camel 2.0 onwards*

This component provides access to remote file systems over the FTP and SFTP protocols.

Maven users will need to add the following dependency to their {{pom.xml}} for this component:
{code:xml}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-ftp</artifactId>
    <version>x.x.x</version>
    <!-- use the same version as your Camel core version -->
</dependency>
{code}

{info:title=Using Camel 1.x}
If you are using Camel 1.x then see this [link|FTP] for documentation.
This page is only for Camel 2.0 or newer.
{info}
{info:title=Using FTPS}
The FTPS component is only available in Camel 2.2 or newer.
FTPS (also known as FTP Secure) is an extension to FTP that adds support for the Transport Layer Security (TLS) and the Secure Sockets Layer (SSL) cryptographic protocols.
{info}

{info:title=Libraries used}
This component uses two different libraries for the actual FTP work. FTP and FTPS uses [Apache Commons Net|http://commons.apache.org/net/] while SFTP uses [JCraft JSCH|http://www.jcraft.com/jsch/].
{info}

h3. URI format

{code}
ftp://[username@]hostname[:port]/directoryname[?options]
sftp://[username@]hostname[:port]/directoryname[?options]
ftps://[username@]hostname[:port]/directoryname[?options]
{code}

Where *directoryname* represents the underlying directory. Can contain nested folders.
The *username* is currently only possible to provide in the hostname parameter.

If no *username* is provided, then {{anonymous}} login is attempted using no password.
If no *port* number is provided, Camel will provide default values according to the protocol (ftp = 21, sftp = 22, ftps = 2222).

You can append query options to the URI in the following format, {{?option=value&option=value&...}}

h3. URI Options
The options below are exclusive for the [FTP2] component. 
{div:class=confluenceTableSmall}
|| Name || Default Value || Description ||
| {{password}} | {{null}} | Specifies the password to use to log in to the remote file system. |
| {{binary}} | {{false}} | Specifies the file transfer mode, BINARY or ASCII. Default is ASCII ({{false}}). |
| {{disconnect}} | {{false}} | *Camel 2.2:* Whether or not to disconnect from remote FTP server right after use. Can be used for both consumer and producer. Disconnect will only disconnect the current connection to the FTP server. If you have a consumer which you want to stop, then you need to stop the consumer/route instead. |
| {{localWorkDirectory}} | {{null}} | When consuming, a local work directory can be used to store the remote file content directly in local files, to avoid loading the content into memory. This is beneficial, if you consume a very big remote file and thus can conserve memory. See below for more details. |
| {{passiveMode}} | {{false}} | *FTP and FTPS only*: Specifies whether to use passive mode connections. Default is active mode ({{false}}). |
| {{securityProtocol}} | {{TLS}} | *FTPS only:* Sets the underlying security protocol. The following values are defined:\\
{{TLS}}: Transport Layer Security\\
{{SSL}}: Secure Sockets Layer |
| {{disableSecureDataChannelDefaults}} | {{false}} | *Camel 2.4: FTPS only*: Whether or not to disable using default values for {{execPbsz}} and {{execProt}} when using secure data transfer. You can set this option to {{true}} if you want to be in absolute full control what the options {{execPbsz}} and {{execProt}} should be used. |
| {{execProt}} | {{null}} | *Camel 2.4: FTPS only*: Will by default use option {{P}} if secure data channel defaults hasn't been disabled. Possible values are:\\
{{C}}: Clear\\
{{S}}: Safe (SSL protocol only)\\
{{E}}: Confidential (SSL protocol only)\\
{{P}}: Private |
| {{execPbsz}} | {{null}} | *Camel 2.4: FTPS only*: This option specifies the buffer size of the secure data channel. If option {{useSecureDataChannel}} has been enabled and this option has not been explicit set, then value {{0}} is used. |
| {{isImplicit}} | {{false}} | *FTPS only:* Sets the security mode(implicit/explicit). Default is explicit ({{false}}). |
| {{knownHostsFile}} | {{null}} | *SFTP only:* Sets the {{known_hosts}} file, so that the SFTP endpoint can do host key verification. |
| {{privateKeyFile}} | {{null}} | *SFTP only:* Set the private key file to that the SFTP endpoint can do private key verification. |
| {{privateKeyFilePassphrase}} | {{null}} | *SFTP only:* Set the private key file passphrase to that the SFTP endpoint can do private key verification. |
| {{strictHostKeyChecking}} | {{no}} | *SFTP only:* *Camel 2.2:* Sets whether to use strict host key checking. Possible values are: {{no}}, {{yes}} and {{ask}}. {{ask}} does not make sense to use as Camel cannot answer the question for you as its meant for human intervention. *Note:* The default in Camel 2.1 and below was {{ask}}. |
| {{maximumReconnectAttempts}} | {{3}} | Specifies the maximum reconnect attempts Camel performs when it tries to connect to the remote FTP server. Use 0 to disable this behavior. |
| {{reconnectDelay}} | {{1000}} | Delay in millis Camel will wait before performing a reconnect attempt. |
| {{connectTimeout}} | {{10000}} | *Camel 2.4:* Is the connect timeout in millis. This corresponds to using {{ftpClient.connectTimeout}} for the FTP/FTPS. For SFTP this option is also used when attempting to connect. |
| {{soTimeout}} | {{null}} | *FTP and FTPS Only:* *Camel 2.4:* Is the {{SocketOptions.SO_TIMEOUT}} value in millis. Note SFTP will automatic use the {{connectTimeout}} as the {{soTimeout}}. |  
| {{timeout}} | {{30000}} | *FTP and FTPS Only:* *Camel 2.4:* Is the data timeout in millis. This corresponds to using {{ftpClient.dataTimeout}} for the FTP/FTPS. For SFTP there is no data timeout. | 
| {{throwExceptionOnConnectFailed}} | {{false}} | *Camel 2.5:* Whether or not to thrown an exception if a successful connection and login could not be establish. This allows a custom {{pollStrategy}} to deal with the exception, for example to stop the consumer or the likes. |
| {{siteCommand}} | {{null}} | *FTP and FTPS Only:* *Camel 2.5:* To execute site commands after successful login. Multiple site commands can be separated using a new line character (\n). Use {{help site}} to see which site commands your FTP server supports. |
| {{stepwise}} | {{true}} | *Camel 2.6:* Whether or not stepwise traversing directories should be used or not. Stepwise means that it will CD one directory at a time. See more details below. You can disable this in case you can't use this approach. |
| {{separator}} | {{Auto}} | *Camel 2.6:* Dictates what path separator char to use when uploading files. {{Auto}} = Use the path provided without altering it. {{UNIX}} = Use unix style path separators. {{Windows}} = Use Windows style path separators. |
| {{ftpClient}} | {{null}} | *FTP and FTPS Only:* *Camel 2.1:* Allows you to use a custom {{org.apache.commons.net.ftp.FTPClient}} instance. |
| {{ftpClientConfig}} | {{null}} | *FTP and FTPS Only:* *Camel 2.1:* Allows you to use a custom {{org.apache.commons.net.ftp.FTPClientConfig}} instance. |
| {{ftpClient.trustStore.file}} | {{null}} | *FTPS Only:* Sets the trust store file, so that the FTPS client can look up for trusted certificates. |
| {{ftpClient.trustStore.type}} | {{JKS}} | *FTPS Only:* Sets the trust store type. |
| {{ftpClient.trustStore.algorithm}} | {{SunX509}} | *FTPS Only:* Sets the trust store algorithm. |
| {{ftpClient.trustStore.password}} | {{null}} | *FTPS Only:* Sets the trust store password. |
| {{ftpClient.keyStore.file}} | {{null}} | *FTPS Only:* Sets the key store file, so that the FTPS client can look up for the private certificate. |
| {{ftpClient.keyStore.type}} | {{JKS}} | *FTPS Only:* Sets the key store type. |
| {{ftpClient.keyStore.algorithm}} | {{SunX509}} | *FTPS Only:* Sets the key store algorithm. |
| {{ftpClient.keyStore.password}} | {{null}} | *FTPS Only:* Sets the key store password. |
| {{ftpClient.keyStore.keyPassword}} | {{null}} | *FTPS Only:* Sets the private key password. |
{div}

{info:title=FTPS component default trust store}
By default, the FTPS component trust store accept all certificates. If you only want trust selective certificates, you have to configure the trust store with the {{ftpClient.trustStore.xxx}} options or by configuring a custom {{ftpClient}}.
{info}

You can configure additional options on the {{ftpClient}} and {{ftpClientConfig}} from the URI directly by using the {{ftpClient.}} or {{ftpClientConfig.}} prefix.

For example to set the {{setDataTimeout}} on the {{FTPClient}} to 30 seconds you can do:
{code}
from("ftp://foo@myserver?password=secret&ftpClient.dataTimeout=30000").to("bean:foo");
{code}

You can mix and match and have use both prefixes, for example to configure date format or timezones.
{code}
from("ftp://foo@myserver?password=secret&ftpClient.dataTimeout=30000&ftpClientConfig.serverLanguageCode=fr").to("bean:foo");
{code}

You can have as many of these options as you like.

See the documentation of the [Apache Commons FTP FTPClientConfig|http://commons.apache.org/net/api/org/apache/commons/net/ftp/FTPClientConfig.html] for possible options and more details.
And as well for [Apache Commons FTP FTPClient|http://commons.apache.org/net/api/org/apache/commons/net/ftp/FTPClient.html].

If you do not like having many and long configuration in the url you can refer to the {{ftpClient}} or {{ftpClientConfig}} to use by letting Camel lookup in the [Registry] for it.

For example:
{code}
   <bean id="myConfig" class="org.apache.commons.net.ftp.FTPClientConfig">
       <property name="lenientFutureDates" value="true"/>
       <property name="serverLanguageCode" value="fr"/>
   </bean>
{code}

And then let Camel lookup this bean when you use the # notation in the url.
{code}
from("ftp://foo@myserver?password=secret&ftpClientConfig=#myConfig").to("bean:foo");
{code}


h3. More URI options
{info:title:More options}
See [File2] as all the options there also applies for this component.
{info}

h3. Stepwise changing directories
Camel [FTP|FTP2] can operate in two modes in terms of traversing directories when consuming files (eg downloading) or producing files (eg uploading)
- stepwise
- not stepwise

You may want to pick either one depending on your situation and security issues. Some Camel end users can only download files if they use stepwise, while others can only download if they do not. At least you have the choice to pick (from Camel 2.6 onwards).

In Came 2.0 - 2.5 there is only one mode and it is:
- 2.0 to 2.4 not stepwise
- 2.5 stepwise

From Camel 2.6 onwards there is now an option {{stepwise}} you can use to control the behavior.

Note that stepwise changing of directory will in most cases only work when the user is confined to it's home directory and when the home directory is reported as {{"/"}}.

The difference between the two of them is best illustrated with an example. Suppose we have the following directory structure on the remote FTP server we need to traverse and download files:
{code}
/
/one
/one/two
/one/two/sub-a
/one/two/sub-b
{code}

And that we have a file in each of sub-a (a.txt) and sub-b (b.txt) folder.

h4. Using stepwise=true (default mode)
{code}
TYPE A
200 Type set to A
PWD
257 "/" is current directory.
CWD one
250 CWD successful. "/one" is current directory.
CWD two
250 CWD successful. "/one/two" is current directory.
SYST
215 UNIX emulated by FileZilla
PORT 127,0,0,1,17,94
200 Port command successful
LIST
150 Opening data channel for directory list.
226 Transfer OK
CWD sub-a
250 CWD successful. "/one/two/sub-a" is current directory.
PORT 127,0,0,1,17,95
200 Port command successful
LIST
150 Opening data channel for directory list.
226 Transfer OK
CDUP
200 CDUP successful. "/one/two" is current directory.
CWD sub-b
250 CWD successful. "/one/two/sub-b" is current directory.
PORT 127,0,0,1,17,96
200 Port command successful
LIST
150 Opening data channel for directory list.
226 Transfer OK
CDUP
200 CDUP successful. "/one/two" is current directory.
CWD /
250 CWD successful. "/" is current directory.
PWD
257 "/" is current directory.
CWD one
250 CWD successful. "/one" is current directory.
CWD two
250 CWD successful. "/one/two" is current directory.
PORT 127,0,0,1,17,97
200 Port command successful
RETR foo.txt
150 Opening data channel for file transfer.
226 Transfer OK
CWD /
250 CWD successful. "/" is current directory.
PWD
257 "/" is current directory.
CWD one
250 CWD successful. "/one" is current directory.
CWD two
250 CWD successful. "/one/two" is current directory.
CWD sub-a
250 CWD successful. "/one/two/sub-a" is current directory.
PORT 127,0,0,1,17,98
200 Port command successful
RETR a.txt
150 Opening data channel for file transfer.
226 Transfer OK
CWD /
250 CWD successful. "/" is current directory.
PWD
257 "/" is current directory.
CWD one
250 CWD successful. "/one" is current directory.
CWD two
250 CWD successful. "/one/two" is current directory.
CWD sub-b
250 CWD successful. "/one/two/sub-b" is current directory.
PORT 127,0,0,1,17,99
200 Port command successful
RETR b.txt
150 Opening data channel for file transfer.
226 Transfer OK
CWD /
250 CWD successful. "/" is current directory.
QUIT
221 Goodbye
disconnected.                                                 
{code}

As you can see when stepwise is enabled, it will traverse the directory structure using CD xxx.

h4. Using stepwise=false
{code}
230 Logged on
TYPE A
200 Type set to A
SYST
215 UNIX emulated by FileZilla
PORT 127,0,0,1,4,122
200 Port command successful
LIST one/two
150 Opening data channel for directory list
226 Transfer OK
PORT 127,0,0,1,4,123
200 Port command successful
LIST one/two/sub-a
150 Opening data channel for directory list
226 Transfer OK
PORT 127,0,0,1,4,124
200 Port command successful
LIST one/two/sub-b
150 Opening data channel for directory list
226 Transfer OK
PORT 127,0,0,1,4,125
200 Port command successful
RETR one/two/foo.txt
150 Opening data channel for file transfer.
226 Transfer OK
PORT 127,0,0,1,4,126
200 Port command successful
RETR one/two/sub-a/a.txt
150 Opening data channel for file transfer.
226 Transfer OK
PORT 127,0,0,1,4,127
200 Port command successful
RETR one/two/sub-b/b.txt
150 Opening data channel for file transfer.
226 Transfer OK
QUIT
221 Goodbye
disconnected.                              
{code}

As you can see when not using stepwise, there are no CD operation invoked at all.


h3. Examples
{{ftp://someone@someftpserver.com/public/upload/images/holiday2008?password=secret&binary=true}}
{{ftp://someoneelse@someotherftpserver.co.uk:12049/reports/2008/password=secret&binary=false}}
{{ftp://publicftpserver.com/download}}

{warning:title=FTP Consumer does not support concurrency}
The FTP consumer (with the same endpoint) does not support concurrency (the backing FTP client is not thread safe).
You can use multiple FTP consumers to poll from different endpoints. It is only a single endpoint that does not support concurrent consumers.

The FTP producer does *not* have this issue, it supports concurrency.

In the future we will [add consumer pooling to Camel|https://issues.apache.org/activemq/browse/CAMEL-1682] to allow this consumer to support concurrency as well.
{warning}

{tip:title=More information}
This component is an extension of the [File2] component. So there are more samples and details on the [File2] component page.
{tip}

h3. Default when consuming files
The [FTP|FTP2] consumer will by default leave the consumed files untouched on the remote FTP server. You have to configure it explicit if you want it to delete the files or move them to another location. For example you can use {{delete=true}} to delete the files, or use {{move=.done}} to move the files into a hidden done sub directory.

The regular [File|File2] consumer is different as it will by default move files to a {{.camel}} sub directory. The reason Camel does *not* do this by default for the FTP consumer is that it may lack permissions by default to be able to move or delete files.

h4. limitations
The option *readLock* can be used to force Camel *not* to consume files that is currently in the progress of being written. However, this option is turned off by default, as it requires that the user has write access. And there is only a few options supported for FTP.
There are other solutions to avoid consuming files that are currently being written over FTP; for instance, you can write to a temporary destination and move the file after it has been written. 

When moving files using {{move}} or {{preMove}} option the files are restricted to the FTP_ROOT folder. That prevents you from moving files outside the FTP area. If you want to move files to another area you can use soft links and move files into a soft linked folder.

h3. Message Headers

The following message headers can be used to affect the behavior of the component

{div:class=confluenceTableSmall}
|| Header || Description ||
| {{CamelFileName}} | Specifies the output file name (relative to the endpoint directory) to be used for the output message when sending to the endpoint. If this is not present and no expression either, then a generated message ID is used as the filename instead.  |
| {{CamelFileNameProduced}} | The actual absolute filepath (path + name) for the output file that was written. This header is set by Camel and its purpose is providing end-users the name of the file that was written. |
| {{CamelFileBatchIndex}} | Current index out of total number of files being consumed in this batch. |
| {{CamelFileBatchSize}} | Total number of files being consumed in this batch. |
| {{CamelFileHost}} | The remote hostname. |
| {{CamelFileLocalWorkPath}} | Path to the local work file, if local work directory is used. |
{div}

h3. About timeouts
The two set of libraries (see top) has different API for setting timeout. You can use the {{connectTimeout}} option for both of them to set a timeout in millis to establish a network connection. An individual {{soTimeout}} can also be set on the FTP/FTPS, which corresponds to using {{ftpClient.soTimeout}}. Notice SFTP will automatically use {{connectTimeout}} as its {{soTimeout}}. The {{timeout}} option only applies for FTP/FTSP as the data timeout, which corresponds to the {{ftpClient.dataTimeout}} value. All timeout values are in millis.


h3. Using Local Work Directory
Camel supports consuming from remote FTP servers and downloading the files directly into a local work directory. This avoids reading the entire remote file content into memory as it is streamed directly into the local file using {{FileOutputStream}}. 

Camel will store to a local file with the same name as the remote file, though with {{.inprogress}} as extension while the file is being downloaded. Afterwards, the file is renamed to remove the {{.inprogress}} suffix. And finally, when the [Exchange] is complete the local file is deleted. 

So if you want to download files from a remote FTP server and store it as files then you need to route to a file endpoint such as:
{code:java}
from("ftp://someone@someserver.com?password=secret&localWorkDirectory=/tmp").to("file://inbox");
{code}

{tip:title=Optimization by renaming work file}
The route above is ultra efficient as it avoids reading the entire file content into memory. It will download the remote file directly to a local file stream. The {{java.io.File}} handle is then used as the [Exchange] body. The file producer leverages this fact and can work directly on the work file {{java.io.File}} handle and perform a {{java.io.File.rename}} to the target filename. As Camel knows it's a local work file, it can optimize and use a rename instead of a file copy, as the work file is meant to be deleted anyway.
{tip}

h3. Samples

In the sample below we set up Camel to download all the reports from the FTP server once every hour (60 min) as BINARY content and store it as files on the local file system.
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpToBinarySampleTest.java}

And the route using Spring DSL:
{code:xml}
  <route>
     <from uri="ftp://scott@localhost/public/reports?password=tiger&amp;binary=true&amp;delay=60000"/>
     <to uri="file://target/test-reports"/>
  </route>
{code}

h4. Consuming a remote FTPS server (implicit SSL) and client authentication
{code}
from("ftps://admin@localhost:2222/public/camel?password=admin&securityProtocol=SSL&isImplicit=true
      &ftpClient.keyStore.file=./src/test/resources/server.jks
      &ftpClient.keyStore.password=password&ftpClient.keyStore.keyPassword=password")
  .to("bean:foo");
{code}

h4. Consuming a remote FTPS server (explicit TLS) and a custom trust store configuration
{code}
from("ftps://admin@localhost:2222/public/camel?password=admin&ftpClient.trustStore.file=./src/test/resources/server.jks&ftpClient.trustStore.password=password")
  .to("bean:foo");
{code}

h3. Filter using {{org.apache.camel.component.file.GenericFileFilter}}
Camel supports pluggable filtering strategies. This strategy it to use the build in {{org.apache.camel.component.file.GenericFileFilter}} in Java. You can then configure the endpoint with such a filter to skip certain filters before being processed.

In the sample we have build our own filter that only accepts files starting with report in the filename.
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFtpRemoteFileFilterTest.java}

And then we can configure our route using the *filter* attribute to reference our filter (using {{\#}} notation) that we have defines in the spring XML file:
{code:xml}
   <!-- define our sorter as a plain spring bean -->
   <bean id="myFilter" class="com.mycompany.MyFileFilter"/>

  <route>
    <from uri="ftp://someuser@someftpserver.com?password=secret&amp;filter=#myFilter"/>
    <to uri="bean:processInbox"/>
  </route>
{code}


h3. Filtering using ANT path matcher
The ANT path matcher is a filter that is shipped out-of-the-box in the *camel-spring* jar. So you need to depend on *camel-spring* if you are using Maven.
The reason is that we leverage Spring's [AntPathMatcher|http://static.springframework.org/spring/docs/2.5.x/api/org/springframework/util/AntPathMatcher.html] to do the actual matching.

The file paths are matched with the following rules:
- {{?}} matches one character
- {{*}} matches zero or more characters
- {{**}} matches zero or more directories in a path

The sample below demonstrates how to use it:
{snippet:id=example|lang=xml|url=camel/trunk/tests/camel-itest/src/test/resources/org/apache/camel/itest/ftp/SpringFileAntPathMatcherRemoteFileFilterTest-context.xml}

h3. Debug logging
This component has log level *TRACE* that can be helpful if you have problems.

{include:Endpoint See Also}
- [File2]