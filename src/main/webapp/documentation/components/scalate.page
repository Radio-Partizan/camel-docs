---
title: Scalate
page_version: 12
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
h2. Scalate
*Available as of Camel 2.3*

The *scalate:* component allows you to process a message using [Scalate|http://scalate.fusesource.org/] template, which supports either SSP or Scaml format templates. This can be ideal when using [Templating] to generate responses for requests.

Maven users will need to add the following dependency to their {{pom.xml}} for this component, and use the correct version of Scalate:
{code:xml}
<dependency>
    <groupId>org.fusesource.scalate</groupId>
    <artifactId>scalate-camel</artifactId>
    <version>1.0</version>
</dependency>
{code}

h3. URI format

{code}
scalate:templateName[?options]
{code}

Where *templateName* is the classpath-local URI of the template to invoke; or the complete URL of the remote template (eg: file://folder/myfile.ssp).

You can append query options to the URI in the following format, {{?option=value&option=value&...}}

h3. Message Headers

The scalate component sets a couple headers on the message (you can't set these yourself and from Camel 2.1 scalate component will not set these headers which will cause some side effect on the dynamic template support):
{div:class=confluenceTableSmall}
|| Header || Description ||
| {{CamelScalateResource}} | The resource as an {{org.springframework.core.io.Resource}} object. |
| {{CamelScalateResourceUri}} | The *templateName* as a {{String}} object. |
{div}

Headers set during the Scalate evaluation are returned to the message and added as headers. Then its kinda possible to return values from Scalate to the Message.

For example, to set the header value of {{fruit}} in the Scalate template {{.tm}}:

{code}
<% in.setHeader('fruit', 'Apple') %>
{code}

The {{fruit}} header is now accessible from the {{message.out.headers}}.

h3. Scalate Context
Camel will provide exchange information in the Scalate context (just a {{Map}}). The {{Exchange}} is transfered as:
{div:class=confluenceTableSmall}
|| key || value ||
| {{exchange}} | The {{Exchange}} itself. |
| {{headers}} | The headers of the In message. |
| {{camelContext}} | The Camel Context intance. |
| {{request}} | The In message. |
| {{in}} | The In message. |
| {{body}} | The In message body. | 
| {{out}} | The Out message (only for InOut message exchange pattern). |
| {{response}} | The Out message (only for InOut message exchange pattern). |
{div}

h3. Hot reloading
The Scalate template resource is, by default, hot reloadable for both file and classpath resources (expanded jar). 

h3. Dynamic templates

Camel provides two headers by which you can define a different resource location for a template or the template content itself. If any of these headers is set then Camel uses this over the endpoint configured resource. This allows you to provide a dynamic template at runtime.
{div:class=confluenceTableSmall}
|| Header || Type || Description ||
| CamelScalateResourceUri | String | An URI for the template resource to use instead of the endpoint configured. |
| CamelScalateTemplate | String | The template to use instead of the endpoint configured. |
{div}

h3. Samples

For example you could use something like

{code}
from("activemq:My.Queue").
  to("scalate:com/acme/MyResponse.ssp");
{code}

To use a Scalate template to formulate a response to a message for InOut message exchanges (where there is a {{JMSReplyTo}} header).

If you want to use InOnly and consume the message and send it to another destination, you could use the following route:

{code}
from("activemq:My.Queue").
  to("scalate:com/acme/MyResponse.scaml").
  to("activemq:Another.Queue");
{code}

It's possible to specify what template the component should use dynamically via a header, so for example:

{code}
from("direct:in").
  setHeader("CamelScalateResourceUri").constant("path/to/my/template.scaml").
  to("scalate:dummy");
{code}

It's possible to specify a template directly as a header the component should use dynamically via a header, so for example:

{code}
from("direct:in").
  setHeader("CamelScalateTemplate").constant("<%@ attribute body: Object %>\nHi this is a scalate template that can do templating ${body}").
  to("scalate:dummy");
{code}

h3. The Email Sample
In this sample we want to use Scalate templating for an order confirmation email. The email template is laid out in Scalate as:
{code}
<%@ attribute in: org.apache.camel.scala.RichMessage %>
Dear ${in("lastName"}, ${in("firstName")}

Thanks for the order of ${in("item")}.

Regards Camel Riders Bookstore
${in.body}
{code}

{include:Endpoint See Also}