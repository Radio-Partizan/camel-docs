---
title: JDBC
page_version: 16
page_creator: jstrachan
page_modifier: njiang
--- pipeline:conf
h2. JDBC Component

The *jdbc* component enables you to access databases through JDBC, where SQL queries and operations are sent in the message body. This component uses the standard JDBC API, unlike the [SQL Component] component, which uses spring-jdbc.

Maven users will need to add the following dependency to their {{pom.xml}} for this component:
{code}
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-jdbc</artifactId>
    <version>x.x.x</version>
    <!-- use the same version as your Camel core version -->
</dependency>
{code}

{warning}
This component can only be used to define producer endpoints, which means that you cannot use the JDBC component in a {{from()}} statement.
{warning}

h3. URI format

{code}
jdbc:dataSourceName[?options]
{code}

This component only supports producer endpoints.

You can append query options to the URI in the following format, {{?option=value&option=value&...}}

h3. Options

|| Name || Default Value || Description ||
| {{readSize}} | {{0}} / {{2000}} | The default maximum number of rows that can be read by a polling query. The default value is 2000 for Camel 1.5.0 or older. In newer releases the default value is 0. |
| {{statement.<xxx>}} | {{null}} | *Camel 2.1:* Sets additional options on the {{java.sql.Statement}} that is used behind the scenes to execute the queries. For instance, {{statement.maxRows=10}}. For detailed documentation, see the [{{java.sql.Statement}} javadoc|http://java.sun.com/j2se/1.5.0/docs/api/java/sql/Statement.html] documentation. |
| {{useJDBC4ColumnNameAndLabelSemantics}} | {{true}} | *Camel 1.6.3/2.2:* Sets whether to use JDBC 4/3 column label/name semantics. You can use this option to turn it {{false}} in case you have issues with your JDBC driver to select data. This only applies when using {{SQL SELECT}} using aliases (e.g. {{SQL SELECT id as identifier, name as given_name from persons}}). |

h3. Result
The result is returned in the OUT body as an {{ArrayList<HashMap<String, Object>>}}. The {{List}} object contains the list of rows and the {{Map}} objects contain each row with the {{String}} key as the column name.

*Note:* This component fetches {{ResultSetMetaData}} to be able to return the column name as the key in the {{Map}}.

h4. Message Headers
|| Header || Description ||
| {{CamelJdbcRowCount}} | If the query is a {{SELECT}}, query the row count is returned in this OUT header. |
| {{CamelJdbcUpdateCount}} | If the query is an {{UPDATE}}, query the update count is returned in this OUT header. |

h3. Samples

In the following example, we fetch the rows from the customer table.

First we register our datasource in the Camel registry as {{testdb}}:
{snippet:id=register|lang=java|url=camel/trunk/components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcRouteTest.java}

Then we configure a route that routes to the JDBC component, so the SQL will be executed. Note how we refer to the {{testdb}} datasource that was bound in the previous step:

{snippet:id=route|lang=java|url=camel/trunk/components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcRouteTest.java}

Or you can create a {{DataSource}} in Spring like this:

{snippet:id=example|lang=java|url=camel/trunk/components/camel-jdbc/src/test/resources/org/apache/camel/component/jdbc/camelContext.xml}

We create an endpoint, add the SQL query to the body of the IN message, and then send the exchange. The result of the query is returned in the OUT body:

{snippet:id=invoke|lang=java|url=camel/trunk/components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcRouteTest.java}

If you want to work on the rows one by one instead of the entire ResultSet at once you need to use the [Splitter] EIP such as:

{snippet:id=e1|lang=java|url=camel/trunk/components/camel-jdbc/src/test/java/org/apache/camel/component/jdbc/JdbcRouteSplitTest.java}

h3. Sample - Polling the database every minute
If we want to poll a database using the JDBC component, we need to combine it with a polling scheduler such as the [Timer] or [Quartz] etc. In the following example, we retrieve data from the database every 60 seconds:

{code:java}
from("timer://foo?period=60000").setBody(constant("select * from customer")).to("jdbc:testdb").to("activemq:queue:customers");
{code}


{include:Endpoint See Also}
- [SQL]