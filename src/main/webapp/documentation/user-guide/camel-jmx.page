---
title: Camel JMX
page_version: 36
page_creator: njiang
page_modifier: njiang
--- pipeline:conf
h2. Camel JMX

Apache Camel has extensive support for JMX to allow you to monitor and control the Camel managed objects a JMX client.

{toc}

h3. Spring Dependency
*spring-context.jar, spring-aop.jar, spring-beans.jar, spring-core.jar* is needed on the classpath by Camel to be able to use JMX instrumentation. If these .jars is *not* on the classpath Camel will fallback to non JMX mode. This situation is logged at {{WARN}} level using logger name {{org.apache.camel.impl.DefaultCamelContext}}.

h3. Using JMX to manage Apache Camel

{warning:title=Some platforms do not allow access to its platform mbean server}
The Oracle OC4J J2EE application server will not allow Camel to access the platform mbean server. You can identify this in the log as Camel will log a WARNING.
{code}
xxx xx, xxxx xx:xx:xx xx org.apache.camel.management.InstrumentationLifecycleStrategy onContextStart
WARNING: Could not register CamelContext MBean
java.lang.SecurityException: Unauthorized access from application: xx to MBean: java.lang:type=ClassLoading
        at oracle.oc4j.admin.jmx.shared.UserMBeanServer.checkRegisterAccess(UserMBeanServer.java:873)
{code}
To resolve this you should disable the JMX agent in Camel, see section _Disabling JMX instrumentation agent in Camel_
{warning}

By default, JMX instrumentation agent is enabled in Camel which means that Camel runtime creates and registers MBean management objects with a MBeanServer instance in the VM. This allows Camel users instantly obtain insights into how Camel routes perform down to the individual processor's level.

The supported types of management objects are [endpoint |http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/management/ManagedEndpoint.html], [route|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/management/ManagedRoute.html], [service|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/management/ManagedService.html], and [processor|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/management/PerformanceCounter.html]. Some of these management objects also expose lifecycle operations in addition to performance counter attributes.

The [DefaultManagementNamingStrategy|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/management/DefaultManagementNamingStrategy.html] is the default naming strategy which builds object names used for MBean registration. By default, *org.apache.camel* is the domain name for all object names created by CamelNamingStrategy. The domain name of the MBean object can be configured by Java VM system property:
{code}
-Dorg.apache.camel.jmx.mbeanObjectDomainName=your.domain.name
{code}
Or, by adding a *jmxAgent* element inside the camelContext element in Spring configuration:
{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <jmxAgent id="agent" mbeanObjectDomainName="your.domain.name"/>
    ...
</camelContext>
{code}
Spring configuration always takes precedence over system properties when they both present. It is true for all of JMX related configurations.

h3. Disabling JMX instrumentation agent in Camel

You can disable JMX instrumentation agent by setting Java VM system property as follow. The property value is treated as boolean.
{code}
-Dorg.apache.camel.jmx.disabled=true
{code}
Or, by adding a *jmxAgent* element inside the camelContext element in Spring configuration:
{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <jmxAgent id="agent" disabled="true"/>
    ...
</camelContext>
{code}

Or in Camel 2.1 its a bit easier (not having to use JVM system property) if using pure Java as you can disable it as follows:
{code}
CamelContext camel = new DefaultCamelContext();
camel.disableJMX();
{code}

h3. Locating a MBeanServer in the Java VM

Each CamelContext can have an instance of [InstrumentationAgent|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/spi/InstrumentationAgent.html] wrapped insider the [InstrumentationLifecycleStrategy|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/management/InstrumentationLifecycleStrategy.html]. The InstrumentationAgent is the object that interfaces with a [MBeanServer|http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServer.html] to register/unregister Camel MBeans. Multiple CamelContexts/InstrumentationAgents can/should share a MBeanServer. By default, Camel runtime picks the first MBeanServer returned by [MBeanServerFactory.findMBeanServer method|http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServerFactory.html#findMBeanServer(java.lang.String)] that matches the default domain name of *org.apache.camel*.&nbsp; You may want to change the default domain name to match the MBeanServer instance that you are already using in your application.&nbsp; Especially, if your MBeanServer is attached to a JMX connector server, you will not need to create a connector server in Camel.

You can configure the matching default domain name via system property.
{code}
-Dorg.apache.camel.jmx.mbeanServerDefaultDomain=<your.domain.name>
{code}
Or, by adding a *jmxAgent* element inside the camelContext element in Spring configuration:
{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <jmxAgent id="agent" mbeanServerDefaultDomain="your.domain.name"/>
    ...
</camelContext>
{code}
If no matching MBeanServer can be found, a new one is created and the new MBeanServer's default domain name is set according to the default and configuration as mentioned above.

It is also possible to use the [PlatformMBeanServer|http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/ManagementFactory.html#getPlatformMBeanServer()] when it is desirable to manage JVM MBeans&nbsp;by setting the system property.&nbsp; The MBeanServer default domain name configuration is ignored as it is not applicable.&nbsp; *Starting in next release (1.5), the default value of usePlatformMBeanServer will be changed to "True".&nbsp; You can set the property to "False" to disable using platform MBean server.*
{code}
-Dorg.apache.camel.jmx.usePlatformMBeanServer=True
{code}
Or, by adding a *jmxAgent* element inside the camelContext element in Spring configuration:
{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <jmxAgent id="agent" usePlatformMBeanServer="true"/>
    ...
</camelContext>
{code}

h3. Creating JMX RMI Connector Server

JMX connector server enables MBeans to be remotely managed by a JMX client such as JConsole.&nbsp; Camel JMX RMI connector server can be optionally turned on by setting system property and the MBeanServer used by Camel is attached to that connector server.
{code}
-Dorg.apache.camel.jmx.createRmiConnector=True
{code}
Or, by adding a *jmxAgent* element inside the camelContext element in Spring configuration:
{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <jmxAgent id="agent" createConnector="true"/>
    ...
</camelContext>
{code}

h3. JMX Service URL

The default JMX Service URL has the format:
{code}
service:jmx:rmi:///jndi/rmi://localhost:<registryPort>/<serviceUrlPath>
{code}
_registryPort_ is the RMI registry port and the default value is *1099*.

You can set the RMI registry port by system property.
{code}
-Dorg.apache.camel.jmx.rmiConnector.registryPort=<port number>
{code}
Or, by adding a *jmxAgent* element inside the camelContext element in Spring configuration:
{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <jmxAgent id="agent" createConnector="true" registryPort="port number"/>
    ...
</camelContext>
{code}
_serviceUrlPath_ is the path name in the URL and the default value is */jmxrmi/camel*.

You can set the service URL path by system property.
{code}
-Dorg.apache.camel.jmx.serviceUrlPath=<path>
{code}

{tip:title=Setting ManagementAgent settings in Java}
In *Camel 2.4* onwards you can also set the various options on the {{ManagementAgent}}:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/management/ManagedServiceUrlPathTest.java}
{tip}

Or, by adding a *jmxAgent* element inside the camelContext element in Spring configuration:
{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <jmxAgent id="agent" createConnector="true" serviceUrlPath="path"/>
    ...
</camelContext>
{code}
By default, RMI server object listens on a dynamically generated port which can be a problem for connection established through a firewall. In such situation, RMI connection port can be explicitly set by the system property.
{code}
-Dorg.apache.camel.jmx.rmiConnector.connectorPort=<port number>
{code}
Or, by adding a *jmxAgent* element inside the camelContext element in Spring configuration:
{code}
<camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">
  <jmxAgent id="agent" createConnector="true" connectorPort="port number"/>
    ...
</camelContext>
{code}
When the connector port option is set, the JMX service URL will become:
{code}
service:jmx:rmi://localhost:<connectorPort>/jndi/rmi://localhost:<registryPort>/<serviceUrlPath>
{code}

h3. Using JConsole to monitor Camel

The CamelContext should appear in the list of local connections, if you are running JConsole on the same host as Camel.

To connect to a remote Camel instance, or if the local process does not show up, use Remote Process option, and enter an URL. Here is an example localhost URL:
{code}
service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi/camel
{code}
Using the Apache Camel which Jconsole
!camel-jmx.png|thumbnail!
&nbsp;

h3. The SystemProperties for Camel JMX support

|| Property Name || value || Description ||
| org.apache.camel.jmx | true or false | if is true , it will enable jmx feature in Camel |

See more system properties in this section below: _jmxAgent Properties Reference_


h3. How to use authentication with JMX

JMX in the JDK have features for authentication and also for using secure connections over SSL. You have to refer to the SUN documentation how to use this:
- http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html
- http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html


h3. JMX inside an Application Server

h4. JBoss AS 4

By default JBoss creates its own MBean server.  To allow Camel to expose to the same server follow these steps:

1. Tell Camel to use the Platform MBean Server (This defaults to true in Camel 1.5)
{code}
<camel:camelContext id="camelContext">
  <camel:jmxAgent id="jmxAgent" mbeanObjectDomainName="org.yourname" usePlatformMBeanServer="true"  />
</camel:camelContext>
{code}

2. Alter your JBoss instance to use the Platform MBean server.
Add the following property to your JAVA_OPTS by editing run.sh or run.conf {{ -Djboss.platform.mbeanserver }} See http://wiki.jboss.org/wiki/JBossMBeansInJConsole

h4. WebSphere

Alter the mbeanServerDefaultDomain to be "WebSphere"

{code}
<camel:jmxAgent id="agent" createConnector="true" mbeanObjectDomainName="org.yourname" mbeanServerDefaultDomain="WebSphere"/>
{code}


h3. Advanced JMX Configuration

The spring configuration file allows you to configure how Camel is exposed to JMX for management. In some cases, you could specify more information here, like the connector's port or the path name.

h4. Example:

{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <jmxAgent id="agent" createConnector="true" registryPort="2000" mbeanServerDefaultDomain="org.apache.camel.test"/>
    <route>
      <from uri="seda:start"/>
      <to uri="mock:result"/>
    </route>
</camelContext>
{code}
If you wish to change the Java 5 JMX settings you can use various [JMX system properties|http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html#properties]

For example you can enable remote JMX connections to the Sun JMX connector, via setting the following environment variable (using *set* or *export* depending on your platform). These settings only configure the Sun JMX connector within Java 1.5+, not the JMX connector that Camel creates by default.
{code}
SUNJMX=-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=1616 \
-Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
{code}
(The SUNJMX environment variable is simple used by the startup script for Camel, as additional startup parameters for the JVM. If you start Camel directly, you'll have to pass these parameters yourself.)

h4. jmxAgent Properties Reference

|| Spring property || System property || Default Value || Description ||
| id | | | The JMX agent name, and it is not optional |
| usePlatformMBeanServer | org.apache.camel.jmx.usePlatformMBeanServer | false, true - Release 1.5 or later | If true then it will use the plateform MBean server form the JVM |
| mbeanServerDefaultDomain | org.apache.camel.jmx.mbeanServerDefaultDomain | org.apache.camel | The default JMX domain of the MBeanServer |
| mbeanObjectDomainName | org.apache.camel.jmx.mbeanObjectDomainName | org.apache.camel | The JMX domain that all objects names will use |
| createConnector | org.apache.camel.jmx.createRmiConnect | false | If we should create a JMX connector (to allow remote management) for the MBeanServer |
| registryPort | org.apache.camel.jmx.rmiConnector.registryPort | 1099 | The port that the JMX RMI registry will use |
| connectorPort | org.apache.camel.jmx.rmiConnector.connectorPort | \-1 (dynamic) | The port that the JMX RMI server will use |
| serviceUrlPath | org.apache.camel.jmx.serviceUrlPath | /jmxrmi/camel | The path that JMX connector will be registered under |
| onlyRegisterProcessorWithCustomId | org.apache.camel.jmx.onlyRegisterProcessorWithCustomId | false | *Camel 2.0:* If this option is enabled then only processors with a custom id set will be registered. This allows you to filer out unwanted processors in the JMX console. |
| statisticsLevel | | {{All}} | *Camel 2.1:* Configures the level for whether performance statistics is enabled for the mbean. See section _Configuring level of granularity for performance statistics_ for more details. |

h3. Registering your own Managed Endpoints
*Available as of Camel 2.0*
You can decorate your own endpoints with spring managed annotations *@ManagedResource* to allow to register them in the Camel mbean server and thus access your custom mbeans using JMX.
*Notice:* in *Camel 2.1* we have changed this to apply other than just endpoints but then you need to implement the interface {{org.apache.camel.spi.ManagementAware}} as well. More about this later.

For example we have the following custom endpoint where we define some options to be managed:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/management/CustomEndpoint.java}

h3. Programming your own Managed Services
*Available as of Camel 2.1*

Camel now offers to use your own mbeans when registering services for management. What that means is for example you can develop a custom Camel component and have it expose mbeans for endpoints, consumers and producers etc. All you need to do is to implement the interface {{org.apache.camel.spi.ManagementAware}} and return the managed object Camel should use.

Now before you think oh boys the JMX API is really painful and terrible, then yeah you are right. Lucky for us Spring though too and they created a range of annotations you can use to export management on an existing bean. That means that you often use that and just return {{this}} in the {{getManagedObject}} from the {{ManagementAware}} interface. For an example see the code example above with the {{CustomEndpoint}}.

Now in Camel 2.1 you can do this for all the objects that Camel registers for management which are quite a bunch, but not all. 

For services which do not implement this {{ManagementAware}} interface then Camel will fallback to using default wrappers as defined in the table below:

|| Type || MBean wrapper || 
| CamelContext | ManagedCamelContext |
| Component | ManagedComponent |
| Endpoint | ManagedEndpoint |
| Consumer | ManagedConsumer |
| Producer | ManagedProducer |
| Route | ManagedRoute |
| Processor | ManagedProcessor |
| Tracer | ManagedTracer |
| Service | ManagedService |

In addition to that there are some extended wrappers for specialized types such as

|| Type || MBean wrapper || 
| ScheduledPollConsumer | ManagedScheduledPollConsumer |
| BrowsableEndpoint | ManagedBrowseableEndpoint |
| Throttler | ManagedThrottler |
| Delayer | ManagedDelayer |
| SendProcessor | ManagedSendProcessor |

And in the future we will add additional wrappers for more EIP patterns.

h3. ManagementNamingStrategy
*Available as of Camel 2.1*

Camel provides a pluggable API for naming strategy by {{org.apache.camel.spi.ManagementNamingStrategy}}. A default implementation is used to compute the mbean names that all mbeans are registered with. 

h3. ManagementStrategy
*Available as of Camel 2.1*

Camel now provides a totally pluggable management strategy that allows you to be 100% in control of management. It is a rich interface with many methods for management. Not only for adding and removing managed objects from the mbean server but also event notification is provided as well using the {{org.apache.camel.spi.EventNotifier}} API. What it does for example is to easier provide an adapter for other management products. In additional it also allows you to provide more details and features that are provided out of the box at Apache.

h3. Configuring level of granularity for performance statistics
*Available as of Camel 2.1*

You can now set a pre set level whether performance statistics is enabled or not when Camel start ups. The levels are
- {{All}} *default* - Camel will enable statistics for both routes and processors (fine grained)
- {{RoutesOnly}} - Camel will only enable statistics for routes (coarse grained)
- {{Off}} - Camel will not enable statistics for any.

At runtime you can always use the management console (such as jconsole) to change on a given route or processor whether its statistics are enabled or not.

{info:title=What does statistics enabled mean?}
Statistics enabled means that Camel will do fine grained performance statistics for that particular mbean. The statistics you can see are many such as: number of exchanges completed/failed, last/total/mina/max/mean processing time, first/last failed time etc.
{info}

Using Java DSL you set this level by:
{code}
  // only enable routes when Camel starts
  context.getManagementStrategy().setSatisticsLevel(ManagementStatisticsLevel.RoutesOnly);
{code}

And from Spring DSL you do:
{code:xml}
    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
        <jmxAgent id="agent" statisticsLevel="RoutesOnly"/>
     ...
    </camelContext>
{code}

h3. Which endpoints are registered
In *Camel 2.1* onwards *only* {{singleton}} endpoints are registered as the overhead for non singleton will be substantial in cases where thousands or millions of endpoints are used. This can happens when using a [Recipient List] EIP or from a {{ProducerTemplate}} that sends a lot of messages.

h3. Which processors are registered
See [this FAQ|Why is my processor not showing up in JConsole].

h3. How to use the JMX NotificationListener to listen the camel events?
From *Camel 2.4* you can use a customer JMX NotificationListener to listen the camel events.
First you need to set up a JmxNotificationEventNotifier before you start the CamelContext.
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/management/JmxNotificationEventNotifierTest.java}

Second you can register your listener for listening the event
{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/management/JmxNotificationEventNotifierTest.java}


h3. See Also
- [Management Example]
- [Why is my processor not showing up in JConsole]