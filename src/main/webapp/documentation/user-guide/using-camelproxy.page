---
title: Using CamelProxy
page_version: 7
page_creator: davsclaus
page_modifier: davsclaus
--- pipeline:conf
h2. Using CamelProxy

Camel allows you to proxy a producer sending to an [Endpoint] by a regular interface. Then when clients using this interface can work with it as if its regular java code but in reality its proxied and does a [Request Reply] to a given endpoint.

h3. Proxy from Spring

You can define a proxy in the spring XML file as shown below
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/config/AnotherCamelProxyTest.xml}

Now the client can grab this bean using regular spring bean coding and invoke it as if its just another bean.
The code is based on an unit test but proves the point:
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/config/AnotherCamelProxyTest.java}

h3. Proxy from Java

You can also create a proxy from regular Java using a {{org.apache.camel.component.bean.ProxyHelper}} as shown below:
{code}
    Endpoint endpoint = context.getEndpoint("direct:start");
    MyProxySender sender = ProxyHelper.createProxy(endpoint, MyProxySender.class);
{code}

In *Camel 2.3* you can use {{org.apache.camel.builder.ProxyBuilder}} which may be easier to use than ProxyHelper:
{snippet:id=e4|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/component/bean/BeanProxyTest.java}


h3. Proxy with Annotation

Another way to configure the proxy from java is by using the @Produce annotation. Also see [CAMEL:POJO Producing].
{code}
@Produce(uri="direct:start")
MyProxySender sender;
{code}

This basically does the same as ProxyHelper.createProxy.

h3. What is send on the Message
When using a proxy Camel will send the message payload as a {{org.apache.camel.component.bean.BeanInvocation}} object which holds the details of which method was invoked and what the argument was.

h3. Turning the BeanInvocation into a first class payload
*Available as of Camel 2.1*

If you proxied method signature only have one parameter such as:
{code}
String hello(String name);
{code}

Then it gives another advantage in Camel as it allows Camel to regard the value passed in to this single parameter as the _real_ payload. In other words if you pass in {{Camel}} to the hello method, then Camel can _see_ that as a {{java.lang.String}} payload with the value of {{Camel}}. This gives you a great advantage as you can use the proxy as first class services with Camel.

You can proxy Camel and let clients use the pure and clean interfaces as if Camel newer existed. Then Camel can proxy the invocation and receive the input passed into the single method parameter and regard that as if it was _just_ the message payload.

Okay lets try that with an example

h4. Example with proxy using single parameter methods.

At first we have the interface we wish to proxy
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/component/bean/OrderService.java}

Notice that all methods have single parameters. The return type is optional, as you can see one of them is void.
Also what you should know is that Camel uses its [Type Converter] mechanism to adapt to the types defined on the methods.

This allows us to easily use {{org.w3c.dom.Document}} and {{String}} types with no hazzle.

Okay then we have the following route where we route using a [Content Based Router] that is XML based. See that we use [XPath] in the choices to route the message depending on its a book order or not.

{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/component/bean/BeanProxyTest.java}

Now there is a couple of tests that shows using the Camel Proxy how we can easily invoke the proxy and do not know its actually Camel doing some routing underneath.

{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/component/bean/BeanProxyTest.java}

And this one below shows using different types that Camel adapts to.
{snippet:id=e3|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/component/bean/BeanProxyTest.java}

Isn't this cool?


h3. See also
- [User Guide]
- [Tutorial-JmsRemoting] 