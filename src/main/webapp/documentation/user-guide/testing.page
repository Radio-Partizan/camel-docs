---
title: Testing
page_version: 18
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
h2. Testing

Testing is a crucial activity in any piece of software development or integration. Typically Camel Riders use various different [technologies|Components] wired together in a variety of [patterns|Enterprise Integration Patterns] with different [expression languages|Languages] together with different forms of [Bean Integration] and [Dependency Injection] so its very easy for things to go wrong! :-). Testing is the crucial weapon to ensure that things work as you would expect.

Camel is a Java library so you can easily wire up tests in whatever unit testing framework you use (JUnit 3.x, 4.x or TestNG). However the Camel project has tried to make the testing of Camel as easy and powerful as possible so we have introduced the following features.

h3. Testing mechanisms

The following mechanisms are supported

|| Name || Description ||
| [Camel Test] | is a library letting you easily create Camel test cases using a single Java class for all your configuration and routing without using [Spring] or [Guice] for [Dependency Injection] which does not require an in depth knowledge of Spring+SpringTest or Guice |
| [Spring Testing] | uses Spring Test together with either XML or Java Config to dependency inject your test classes |
| [Guice] | uses [Guice] to dependency inject your test classes |

In all approaches the test classes look pretty much the same in that they all reuse the [Camel binding and injection annotations|Bean Integration].

h4. Camel Test Example

Here is the [Camel Test] [example|http://svn.apache.org/repos/asf/camel/trunk/components/camel-test/src/test/java/org/apache/camel/test/patterns/FilterTest.java]. 

{snippet:lang=java|id=example|url=camel/trunk/components/camel-test/src/test/java/org/apache/camel/test/patterns/FilterTest.java}

Notice how it derives from the Camel helper class *CamelTestSupport* but has no Spring or Guice dependency injection configuration but instead overrides the *createRouteBuilder()* method.

h4. Spring Test with XML Config Example

Here is the [Spring Testing] [example using XML Config|http://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/patterns/FilterTest.java].

{snippet:lang=java|id=example|url=camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/patterns/FilterTest.java}

Notice that we use *@DirtiesContext* on the test methods to force [Spring Testing] to automatically reload the [CamelContext] after each test method - this ensures that the tests don't clash with each other (e.g. one test method sending to an endpoint that is then reused in another test method).

Also notice the use of *@ContextConfiguration* to indicate that by default we should look for the [FilterTest-context.xml on the classpath|http://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/patterns/FilterTest-context.xml] to configure the test case which looks like this

{snippet:lang=xml|id=example|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/patterns/FilterTest-context.xml}

h4. Spring Test with Java Config Example

Here is the [Spring Testing] [example using Java Config|http://svn.apache.org/repos/asf/camel/trunk/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/patterns/FilterTest.java]. For more information see [Spring Java Config].

{snippet:lang=java|id=example|url=camel/trunk/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/patterns/FilterTest.java}

This is similar to the XML Config example above except that there is no XML file and instead the nested *ContextConfig* class does all of the configuration; so your entire test case is contained in a single Java class. We currently have to reference by class name this class in the *@ContextConfiguration* which is a bit ugly. Please vote for [SJC-238|http://jira.springframework.org/browse/SJC-238] to address this and make Spring Test work more cleanly with Spring JavaConfig.

Its totally optional but for the ContextConfig implementation we derive from *SingleRouteCamelConfiguration* which is a helper Spring Java Config class which will configure the CamelContext for us and then register the RouteBuilder we create.

h3. Testing endpoints

Camel provides a number of endpoints which can make testing easier.

|| Name || Description ||
| [DataSet] | For load & soak testing this endpoint provides a way to create huge numbers of messages for sending to [Components] and asserting that they are consumed correctly |
| [Mock] | For testing routes and mediation rules using mocks and allowing assertions to be added to an endpoint  |
| [Test] | Creates a [Mock] endpoint which expects to receive all the message bodies that could be polled from the given underlying endpoint |

The main endpoint is the [Mock] endpoint which allows expectations to be added to different endpoints; you can then run your tests and assert that your expectations are met at the end.

h3. Stubbing out physical transport technologies

If you wish to test out a route but want to avoid actually using a real physical transport (for example to unit test a transformation route rather than performing a full integration test) then the following endpoints can be useful.

|| Name || Description ||
| [Direct] |  Direct invocation of the consumer from the producer so that single threaded (non-SEDA) in VM invocation is performed which can be useful to mock out physical transports |
| [SEDA] | Delivers messages asynchonously to consumers via a [java.util.concurrent.BlockingQueue|http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/BlockingQueue.html] which is good for testing asynchronous transports |

h3. Testing existing routes

Camel provides some features to aid during testing of existing routes where you cannot or will not use [Mock] etc. For example you may have a production ready route which you want to test with some 3rd party API which sends messages into this route. 

|| Name || Description ||
| [NotifyBuilder] | Allows you to be notified when a certain condition has occurred. For example when the route has completed 5 messages. You can build complex expressions to match your criteria when to be notified. |
| [AdviceWith] | Allows you to *advice* or *enhance* an existing route using a [RouteBuilder] style. For example you can add interceptors to intercept sending outgoing messages to assert those messages are as expected. |

 
