---
title: Bean Integration
page_version: 17
page_creator: jstrachan
page_modifier: njiang
--- pipeline:conf
h2. Bean Integration

Camel supports the integration of beans and POJOs in a number of ways

h3. [Bean Binding]
Whenever Camel invokes a bean method, either via the [Bean] component, [Spring Remoting] or [POJO Consuming] then the [Bean Binding] mechanism is used to figure out what method to use (if it is not explicit) and how to bind the [Message] to the parameters possibly using the [Parameter Binding Annotations]

h3. Annotations
If a bean is defined in [Spring] XML or scanned using the Spring 2.5 component scanning mechanism and a *<camelContext>* is used or a CamelBeanPostProcessor then we process a number of Camel annotations to do various things such as injecting resources or producing, consuming or routing messages.

* [POJO Consuming] to consume and possibly route messages from Camel
* [POJO Producing] to make it easy to produce camel messages from your POJOs
* [RecipientList Annotation] for creating a [Recipient List] from a POJO method
* [RoutingSlip Annotation] for creating a [Routing Slip] for a POJO method
* [Bean Injection] to inject Camel related resources into your POJOs
* [Using Exchange Pattern Annotations] describes how the pattern annotations can be used to change the behaviour of method invocations with [Spring Remoting] or [POJO Producing]

h3. Spring Remoting
We support a [Spring Remoting] provider which uses Camel as the underlying transport mechanism. The nice thing about this approach is we can use any of the Camel transport [Components] to communicate between beans. It also means we can use [Content Based Router] and the other [Enterprise Integration Patterns] in between the beans; in particular we can use [Message Translator] to be able to convert what the on-the-wire messages look like in addition to adding various headers and so forth.

h3. Bean Component
The [Bean] component supports the creation of a proxy via [ProxyHelper|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/component/bean/ProxyHelper.html] to a Java interface; which the implementation just sends a message containing a [BeanInvocation|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/component/bean/BeanInvocation.html] to some Camel endpoint. 

Then there is a server side implementation which consumes a message and uses the [Bean Binding] to bind the message to invoke a method passing in its parameters.
