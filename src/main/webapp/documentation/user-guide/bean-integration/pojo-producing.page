---
title: POJO Producing
page_version: 5
page_creator: jstrachan
page_modifier: joed
--- pipeline:conf
There are two different ways to send messages to any Camel [Endpoint] from a POJO

h4. @EndpointInject

To allow sending of messages from POJOs you can use [@EndpointInject() annotation|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/EndpointInject.html]. This will inject either a  [ProducerTemplate|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/ProducerTemplate.html] or [CamelTemplate |http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/CamelTemplate.html] so that the bean can send message exchanges.

e.g. lets send a message to the *foo.bar* queue in [ActiveMQ] at some point
{code:java}

public class Foo {
  @EndpointInject(uri="activemq:foo.bar")
  ProducerTemplate producer;

  public void doSomething() {
    if (whatever) {
      producer.sendBody("<hello>world!</hello>");
    }
  }
}
{code}

The downside of this is that your code is now dependent on a Camel API, the ProducerTemplate. The next section describes how to remove this

h3. Hiding the Camel APIs from your code using @Produce

We recommend [Hiding Middleware] APIs from your application code so the next option might be more suitable.
 You can add the @Produce annotation to an injection point (a field or property setter) using a ProducerTemplate *or* using some interface you use in your business logic. e.g.

{code:java}
public interface MyListener {
    String sayHello(String name);
}

public class MyBean {
    @Produce(uri = "activemq:foo")
    protected MyListener producer;

    public void doSomething() {
        // lets send a message
        String response = producer.sayHello("James");
    }
}
{code}

Here Camel will automatically inject a smart client side proxy at the @Produce annotation - an instance of the MyListener instance. When we invoke methods on this interface the method call is turned into an object and using the Camel [Spring Remoting] mechanism it is sent to the endpoint - in this case the [ActiveMQ] endpoint to queue *foo*; then the caller blocks for a response.

If you want to make asynchronous message sends then use [an @InOnly annotation on the injection point|Using Exchange Pattern Annotations].
