h3. Annotation Based Expression Language

You can also use any of the [Languages] supported in Camel to bind expressions to method parameters when using [Bean Integration]. For example you can use any of these annotations:

||Annotation||Description||
|[@Bean|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/language/Bean.html] | Inject a [Bean] expression |
|[@BeanShell|http://camel.apache.org/maven/camel-script/apidocs/org/apache/camel/builder/script/BeanShell.html] | Inject a [BeanShell] expression |
|[@Constant|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/language/Constant.html] | Inject a [Constant] expression |
|[@EL|http://camel.apache.org/maven/camel-juel/apidocs/org/apache/camel/language/juel/EL.html] | Inject an [EL] expression |
|[@Groovy|http://camel.apache.org/maven/camel-script/apidocs/org/apache/camel/builder/script/Groovy.html] | Inject a [Groovy] expression |
|[@Header|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/Header.html] | Inject a [Header] expression |
|[@JavaScript|http://camel.apache.org/maven/camel-script/apidocs/org/apache/camel/builder/script/JavaScript.html] | Inject a [JavaScript] expression |
|[@MVEL|http://camel.apache.org/maven/camel-mvel/apidocs/org/apache/camel/language/mvel/MVEL.html] | Inject a [MVEL] expression |
|[@OGNL|http://camel.apache.org/maven/camel-ognl/apidocs/org/apache/camel/language/ognl/OGNL.html] | Inject an [OGNL] expression |
|[@PHP|http://camel.apache.org/maven/camel-script/apidocs/org/apache/camel/builder/script/PHP.html] | Inject a [PHP] expression |
|[@Python|http://camel.apache.org/maven/camel-script/apidocs/org/apache/camel/builder/script/Python.html] | Inject a [Python] expression |
|[@Ruby|http://camel.apache.org/maven/camel-script/apidocs/org/apache/camel/builder/script/Ruby.html] | Inject a [Ruby] expression |
|[@Simple|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/language/Simple.html] | Inject an [Simple] expression |
|[@XPath|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/language/XPath.html] | Inject an [XPath] expression |
|[@XQuery|http://camel.apache.org/maven/camel-saxon/apidocs/org/apache/camel/component/xquery/XQuery.html] | Inject an [XQuery] expression |

h4. Example:

{code}
public class Foo {
	
    @MessageDriven(uri = "activemq:my.queue")
    public void doSomething(@XPath("/foo/bar/text()") String correlationID, @Body String body) {
		// process the inbound message here
    }
}
{code}

h4. Advanced example using @Bean

And an example of using the the [@Bean|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/language/Bean.html] binding annotation, where you can use a [POJO] where you can do whatever java code you like:

{code}
public class Foo {
	
    @MessageDriven(uri = "activemq:my.queue")
    public void doSomething(@Bean("myCorrelationIdGenerator") String correlationID, @Body String body) {
		// process the inbound message here
    }
}
{code}

And then we can have a spring bean with the id *myCorrelationIdGenerator* where we can compute the id.

{code:java}
public class MyIdGenerator {

    private UserManager userManager;

    public String generate(@Header(name = "user") String user, @Body String payload) throws Exception {
       User user = userManager.lookupUser(user);
       String userId = user.getPrimaryId();
       String id = userId + generateHashCodeForPayload(payload);
       return id;
   }
}
{code}

The [POJO] MyIdGenerator has one public method that accepts two parameters. However we have also annotated this one with the @Header and @Body annotation to help Camel know what to bind here from the Message from the Exchange being processed.

Of course this could be simplified a lot if you for instance just have a simple id generator. But we wanted to demonstrate that you can use the [Bean Binding] annotations anywhere.

{code:java}
public class MySimpleIdGenerator {

    public static int generate()  {
       // generate a unique id
       return 123;
   }
}
{code}

And finally we just need to remember to have our bean registered in the Spring [Registry]:
{code:xml}
   <bean id="myCorrelationIdGenerator" class="com.mycompany.MySimpleIdGenerator"/>
{code}

h4. Example using [Groovy]
In this example we have an Exchange that has a User object stored in the in header. This User object has methods to get some user information. We want to use [Groovy] to inject an expression that extracts and concats the fullname of the user into the fullName parameter.

{code}
    public void doSomething(@Groovy("$request.header['user'].firstName $request.header['user'].familyName) String fullName, @Body String body) {
		// process the inbound message here
    }
{code}

Groovy supports GStrings that is like a template where we can insert $ placeholders that will be evaluated by Groovy.