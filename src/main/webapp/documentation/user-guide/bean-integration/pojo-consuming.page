---
title: POJO Consuming
page_version: 10
page_creator: jstrachan
page_modifier: joed
--- pipeline:conf
h4. @MessageDriven or @Consume

{info:title=@MessageDriven is @deprecated}
@MessageDriven is deprecated in Camel 1.x. You should use @Consume instead. Its removed in Camel 2.0.
{info}

To consume a message you use either the [@MessageDriven|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/MessageDriven.html] annotation or from 1.5.0 the [@Consume|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/Consume.html] annotation to mark a particular method of a bean as being a consumer method. The uri of the annotation defines the Camel [Endpoint] to consume from. 
 
e.g. lets invoke the onCheese() method with the String body of the inbound JMS message from [ActiveMQ] on the cheese queue; this will use the [Type Converter] to convert the JMS ObjectMessage or BytesMessage to a String - or just use a TextMessage from JMS

{code}
public class Foo {

  @Consume(uri="activemq:cheese")
  public void onCheese(String name) {
    ...
  }
}
{code}

The [Bean Binding] is then used to convert the inbound [Message] to the parameter list used to invoke the method .

What this does is basically create a route that looks kinda like this

{code}
from(uri).bean(theBean, "methodName");
{code}

{warning:title=When using more than one CamelContext}
When you use more than 1 [CamelContext] you might end up with each of them creating a [POJO Consuming]. 
In Camel 2.0 there is a new option on *@Consume* that allows you to specify which [CamelContext] id/name you want it to apply for.
{warning}

h3. Using context option to apply only a certain CamelContext
*Available as of Camel 2.0*
See the warning above.

You can use the {{context}} option to specify which [CamelContext] the consumer should only apply for. For example:
{code}
  @Consume(uri="activemq:cheese", context="camel-1")
  public void onCheese(String name) {
{code}

The consumer above will only be created for the [CamelContext] that have the context id = {{camel-1}}. You set this id in the XML tag:
{code:xml}
<camelContext id="camel-1" ...>
{code}

h4. Using an explicit route

If you want to invoke a bean method from many different endpoints or within different complex routes in different circumstances you can just use the normal routing [DSL] or the [Spring] XML configuration file.

For example

{code}
from(uri).beanRef("myBean", "methodName");
{code}


which will then look up in the [Registry] and find the bean and invoke the given bean name. (You can omit the method name and have Camel figure out the right method based on the method annotations and body type).

h4. Use the Bean endpoint

You can always use the bean endpoint

{code}
from(uri).to("bean:myBean?method=methodName");
{code}


h4. Which approach to use?

Using the @MessageDriven/@Consume annotations are simpler when you are creating a simple route with a single well defined input URI. 

However if you require more complex routes or the same bean method needs to be invoked from many places then please use the routing [DSL] as shown above.

