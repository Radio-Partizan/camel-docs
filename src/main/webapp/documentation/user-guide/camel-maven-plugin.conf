h2. Camel Maven Plugin

The [Camel Maven Plugin|http://activemq.apache.org/camel/maven/maven-plugins/camel-maven-plugin/plugin-info.html] allows you to run your [Enterprise Integration Patterns] using [Spring] for [Dependency Injection] inside Maven along with being able to support [Visualisation] along with integration of the [Visualisation] diagrams into the standard maven reports for your project.

h3. Goals Supported

|| Documentation || Reference || Description ||
| [camel:run|Camel Run Maven Goal] | [camel:run|http://activemq.apache.org/camel/maven/maven-plugins/camel-maven-plugin/run-mojo.html] | Boots up Camel in a new JVM using the [Spring] configuration at *META-INF/spring/\*.xml* and runs your routing rules |
| [camel:embedded|Camel Embedded Maven Goal] | [camel:embedded|http://activemq.apache.org/camel/maven/maven-plugins/camel-maven-plugin/embedded-mojo.html] | Boots up Camel in the same JVM as Maven using the [Spring] configuration at *META-INF/spring/\*.xml* and runs your routing rules |
| [camel:dot|Camel Dot Maven Goal] | [camel:dot|http://activemq.apache.org/camel/maven/maven-plugins/camel-maven-plugin/dot-mojo.html] | Generates DOT files and then HTML, PNG, SVG files for your EIP routing rules with integration into Maven Reports |

h3. Adding the plugin to your pom.xml

Add the following in your <build><plugins> section

{note}You may override the default Spring application context file uri *META-INF/spring/\*.xml* by using the applicationContextUri property in the camel-maven-plugin configuration.  Paths may be split using a semi-colon \(;\).{note}
{code:lang=xml}
<plugin>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-maven-plugin</artifactId>
  <configuration>
    <applicationContextUri>META-INF/spring/*.xml;YOUR_FILE_NAME_IN_THE_CLASS_PATH.xml</applicationContextUri>
  </configuration>
</plugin>
{code}

You can also specify what Main class to use when running the plugin. By default this is org.apache.camel.spring.Main.

{code:lang=xml}
<plugin>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-maven-plugin</artifactId>
  <!-- optional, default value: org.apache.camel.spring.Main -->
  <configuration>
    <mainClass>mypackage.boot.camel.CamelStartup</mainClass>
  </configuration>
</plugin>
{code}

h3. File based spring configuration files
In Camel 1.4 loading file based spring context files is also supported. You configure this with the new option *fileApplicationContextUri*. Paths may be split using a semi-colon \(;\). This is usable for projects that is web applications and you store spring configuration files in WEB-INF. 
{code:lang=xml}
<plugin>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-maven-plugin</artifactId>
  <configuration>
    <fileApplicationContextUri>src/main/webapp/WEB-INF/camel*.xml</fileApplicationContextUri>
  </configuration>
</plugin>
{code}

h3. Classpath

The plugin will construct a classpath of any Maven dependency with scope "compile".  The classpath is output as an INFO log statement upon startup.

h3. Route Information

Information about the generated routes is available through the GraphViz report, and also through the log statements generated by the run goal.  If you would like to see this information then add a log4j (or other commons-logging implementation) config file with the following levels.

{code:title=src/main/resources/log4.properties}
log4j.rootLogger=INFO, stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n

log4j.logger.org.apache.camel.impl.DefaultCamelContext=DEBUG, stdout
log4j.additivity.org.apache.camel.impl.DefaultCamelContext=false
{code}

This should produce a log statement similar to:

{code}
670  [org.apache.camel.spring.Main.main()] DEBUG org.apache.camel.impl.DefaultCamelContext  
  - Adding routes from: Routes: [Route[ [From[jms:queue:queueA]] -> [To[jms:queue:queueB], To[jms:queue:queueC]]]] routes: []
{code}

h3. Integration into Maven Reports

If you add the camel-maven-plugin to your <reporting> section of your pom you will automatically get the [Visualisation] reporting generated for your project as part of the regular maven site generation.

For example add the following into your pom

{code:lang=xml}
<project>
  ...
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </reporting>  
</project>
{code}

Then when you run

{code}
mvn site
{code}

Your context will be booted up via the *META-INF/spring/\*.xml* files, the DOT file generated and a nice HTML report created. 

{info:title=GraphViz DOT required}
Note to get the nice HTML, PNG and SVG outputs from the DOT files you will need to install the [GraphViz|http://graphviz.org] DOT executable and add it to your PATH so that the plugin can invoke DOT to generate the PNG/SVG files. 

For more details see the [camel:dot|Camel Dot Maven Goal].
{info}
