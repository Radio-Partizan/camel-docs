---
title: ETL Example
page_version: 11
page_creator: jstrachan
page_modifier: hadrian@apache.org
--- pipeline:conf
h2. Extract Transform Load (ETL) Example 

The [ETL] (Extract, Transform, Load) example shows how to load data into a database using Camel. In this example we will poll for files, transform them and then store them in the database via the [JPA] component.

h3. Overview

This example lives in the _examples/camel-example-etl_ directory and will poll for XML files in the child _src/data_ directory. When the files are detected, they are converted, using the fallback [JAXB] [Type Converter] to a PersonDocument class. This POJO is then transformed using a custom [Type Converter] into a CustomerEntity bean using the CustomerTransformer class. Then this bean is stored in the database via the [JPA] component.

The code for this example is as follows

|| Java Class || Purpose ||
| [CustomerEntity|http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/CustomerEntity.java] | The JPA entity bean (i.e. a POJO with @Entity) |
| [PersonDocument|http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/PersonDocument.java] | The JAXB2 POJO used to parse the XML |
| [CustomerTransformer|http://svn.apache.org/repos/asf/acamel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/CustomerTransformer.java] | The custom [Type Converter] used to convert a PersonDocument into a CustomerEntity |
| [EtlRoutes|http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/EtlRoutes.java] | The Camel routing [DSL] to define the flow from the files to the converter to the [JPA] endpoint |

The there is the spring configuration file in [src/resources/META-INF/services/camel-context.xml|http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-etl/src/main/resources/META-INF/spring/camel-context.xml] which defines the JPA template and tells Camel to look in the *org.apache.camel.example.etl* package to find its routes.

h3. Code walkthrough 

So lets start with the route definition in [EtlRoutes|http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/EtlRoutes.java]

{snippet:id=example|lang=java|url=camel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/EtlRoutes.java}

The above sets up a route from the _src/data_ directory. Notice we're using the _noop_ mode of the [File] component so that the files are not moved or deleted when they are processed (so when the tool is restarted they will be processed again).

We're converting the body of the message to a [PersonDocument|http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/PersonDocument.java] which since this POJO as an @XmlRootElement annotation from [JAXB] will kick in the [Type Converter] to use JAXB to unmarshall the object.

Then we send the message with a PersonDocument body to the [JPA] endpoint. Notice how this endpoint specifies the expected type. So the [Type Converter] is gonna try convert the PersonDocument to a [CustomerEntity|http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/CustomerEntity.java]. Here Camel will find the [CustomerTransformer|http://svn.apache.org/repos/asf/camel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/CustomerTransformer.java] class which has an @Converter method

{snippet:id=example|lang=java|url=camel/trunk/examples/camel-example-etl/src/main/java/org/apache/camel/example/etl/CustomerTransformer.java}

which performs the necessary conversion to an entity bean which is then stored in the database

h3. Running the example

To run the example we use the [Camel Maven Plugin]. For example from the source or binary distribution the following should work

{code}
cd examples/camel-example-etl
mvn camel:run
{code}

If you prefer you can just run the Main directly using
{code}
mvn compile exec:java
{code}

Failing that you can run the Main from inside your IDE if you prefer. Follow the [Building] instructions to create an Eclipse/IDEA project to import
