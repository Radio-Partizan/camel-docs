---
title: Processor
page_version: 7
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
h2. Processor

The [Processor|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Processor.html] interface is used to implement consumers of message exchanges or to implement a [Message Translator]

h3. Using a processor in a route

Once you have written a class which implements processor like this...

{code}
public class MyProcessor implements Processor {
  public void process(Exchange exchange) throws Exception {
    // do something...
  }
}
{code}

You can then easily use this inside a route by declaring the bean in Spring, say via the XML (or registering it in JNDI if that is your [Registry])

{code}
<bean id="myProcessor" class="com.acme.MyProcessor"/>
{code}

Then in Camel you can do

{code}
from("activemq:myQueue").to("myProcessor");
{code}

h4. Using the process DSL
In your route you can also use the {{process}} DSL syntax for invoking a processor.

{code}
Processor myProcessor = new MyProcessor();
...
from("activemq:myQueue").process(myProcessor);
{code}

If you need to lookup the processor in the [Registry] then you should use the *processRef* DSL:
{code}
from("activemq:myQueue").processRef("myProcessor");
{code}

h3. Why use process when you can use to instead?
The process can be used in routes as an anonymous inner class such:
{code:java}
    from("activemq:myQueue").process(new Processor() {
        public void process(Exchange exchange) throws Exception {
            String payload = exchange.getIn().getBody(String.class);
            // do something with the payload and/or exchange here
           exchange.getIn().setBody("Changed body");
       }
    }).to("activemq:myOtherQueue");
{code}
This is usable for quickly whirling up some code. If the code in the inner class gets a bit more complicated it is of course advised to refactor it into a separate class.

h3. Turning your processor into a full Component

There is a base class called [ProcessorEndpoint|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/impl/ProcessorEndpoint.html] which supports the full [Endpoint] semantics given a Processor instance.

So you just need to create a [Component] class by deriving from [DefaultComponent|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/impl/DefaultComponent.html] which returns instances of ProcessorEndpoint. For more details see [Writing Components]

h3. See Also

* [Message Translator]
* [Content Enricher]
* [Content Filter]
