---
title: JXPath
page_version: 9
page_creator: jstrachan
page_modifier: hadrian@apache.org
--- pipeline:conf
h2. JXPath

Camel supports [JXPath|http://commons.apache.org/jxpath/] to allow [XPath] expressions to be used on beans in an [Expression] or [Predicate] to be used in the [DSL] or [Xml Configuration]. For example you could use JXPath to create an [Predicate] in a [Message Filter] or as an [Expression] for a [Recipient List].

From 1.3 of Camel onwards you can use XPath expressions directly using smart completion in your IDE as follows

{code}
from("queue:foo").filter().
  jxpath("/in/body/foo").
  to("queue:bar")
{code}

h3. Variables

|| Variable || Type || Description ||
| *this* | Exchange | the Exchange object |
| in | Message | the exchange.in message |
| out | Message | the exchange.out message |

h3. Using XML configuration

If you prefer to configure your routes in your [Spring] XML file then you can use JXPath expressions as follows

{code:lang=xml}
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">
    <route>
      <from uri="activemq:MyQueue"/>
      <filter>
        <jxpath>in/body/name = 'James'</xpath>
        <to uri="mqseries:SomeOtherQueue"/>
      </filter>
    </route>
  </camelContext>
</beans>
{code}

h3. Examples

Here is a simple [example|http://svn.apache.org/repos/asf/camel/trunk/components/camel-jxpath/src/test/java/org/apache/camel/language/jxpath/JXPathFilterTest.java] using a JXPath expression as a predicate in a [Message Filter]

{snippet:id=example|lang=java|url=camel/trunk/components/camel-jxpath/src/test/java/org/apache/camel/language/jxpath/JXPathFilterTest.java}

h2. JXPath injection 

You can use [Bean Integration] to invoke a method on a bean and use various languages such as JXPath to extract a value from the message and bind it to a method parameter.

For example

{code}
public class Foo {
	
    @MessageDriven(uri = "activemq:my.queue")
    public void doSomething(@JXPath("in/body/foo") String correlationID, @Body String body) {
		// process the inbound message here
    }
}
{code}

h3. Dependencies

To use JXpath in your camel routes you need to add the a dependency on *camel-jxpath* which implements the JXpath language. 

If you use maven you could just add the following to your pom.xml, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-jxpath</artifactId>
  <version>1.4.0</version>
</dependency>
{code}
