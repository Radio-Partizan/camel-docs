h2. EL

Camel supports the unified JSP and JSF Expression Language via the [JUEL|http://juel.sourceforge.net/] to allow an [Expression] or [Predicate] to be used in the [DSL] or [Xml Configuration].

For example you could use EL inside a [Message Filter] in XML

{code:xml}
<route>
  <from uri="seda:foo"/>
  <filter>
    <el>${in.headers.foo == 'bar'}</el>
    <to uri="seda:bar"/>
  </filter>
</route>
{code}

You could also use slightly different syntax, e.g. if the header name is not a valid identifier:

{code:xml}
<route>
  <from uri="seda:foo"/>
  <filter>
    <el>${in.headers['My Header'] == 'bar'}</el>
    <to uri="seda:bar"/>
  </filter>
</route>
{code}

You could use EL to create an [Predicate] in a [Message Filter] or as an [Expression] for a [Recipient List]

h3. Variables

|| Variable || Type || Description ||
| exchange | Exchange | the Exchange object |
| in | Message | the exchange.in message |
| out | Message | the exchange.out message |

h3. Samples
You can use EL dot notation to invoke operations. If you for instance have a body that contains a POJO that has a {{getFamiliyName}} method then you can construct the syntax as follows:
{code}
"$in.body.familyName"
{code}

h3. Dependencies

To use EL in your camel routes you need to add the a dependency on *camel-juel* which implements the EL language. 

If you use maven you could just add the following to your pom.xml, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-juel</artifactId>
  <version>1.6.1</version>
</dependency>
{code}
