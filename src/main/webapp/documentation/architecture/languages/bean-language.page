---
title: Bean Language
page_version: 14
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
h2. Bean Language

The purpose of the Bean Language is to be able to implement an [Expression] or [Predicate] using a simple method on a bean.

So the idea is you specify a bean name which will then be resolved in the [Registry] such as the [Spring] ApplicationContext then a method is invoked to evaluate the [Expression] or [Predicate].

If no method name is provided then one is attempted to be chosen using the rules for [Bean Binding]; using the type of the message body and using any annotations on the bean methods.

The [Bean Binding] rules are used to bind the [Message] Exchange to the method parameters; so you can annotate the bean to extract headers or other expressions such as [XPath] or [XQuery] from the message.

h3. Using Bean Expressions from the Java DSL

{code}
from("activemq:topic:OrdersTopic").
  filter().method("myBean", "isGoldCustomer").
    to("activemq:BigSpendersQueue");
{code}

h3. Using Bean Expressions from XML

{code:lang=xml}
<route>
  <from uri="activemq:topic:OrdersTopic"/>
  <filter>
    <method bean="myBean" method="isGoldCustomer"/>
    <to uri="activemq:BigSpendersQueue"/>
  </filter>
</route>
{code}

h3. Writing the expression bean

The bean in the above examples is just any old Java Bean with a method called isGoldCustomer() that returns some object that is easily converted to a *boolean* value in this case, as its used as a predicate.

So we could implement it like this...

{code}
public class MyBean {
  public boolean isGoldCustomer(Exchange exchange) {
  	...
  }
}
{code}

We can also use the [Bean Integration] annotations. For example you could do...

{code}
public boolean isGoldCustomer(String body) {...}
{code}

or

{code}
public boolean isGoldCustomer(@Header(name = "foo") Integer fooHeader) {...}
{code}

So you can bind parameters of the method to the Exchange, the [Message] or individual headers, properties, the body or other expressions.

h3. Non registry beans
As of Camel 1.5 the [Bean Language] also supports invoking beans that isn't registered in the [Registry]. This is usable for quickly to invoke a bean from Java DSL where you don't need to register the bean in the [Registry] such as the [Spring] ApplicationContext.

Camel can instantiate the bean and invoke the method if given a class or invoke an already existing instance. This is illustrated from the example below:
*NOTE* This bean DSL is supported since Camel 2.0-M2
{code:java}
        from("activemq:topic:OrdersTopic").
                filter().expression(BeanLanguage(MyBean.class, "isGoldCustomer")).
                to("activemq:BigSpendersQueue");
{code}

The 2nd parameter {{isGoldCustomer}} is an optional parameter to explicit set the method name to invoke. If not provided Camel will try to invoke the best suited method. If case of ambiguity Camel will thrown an Exception. In these situations the 2nd parameter can solve this problem. Also the code is more readable if the method name is provided. The 1st parameter can also be an existing instance of a Bean such as:
{code:java}
   private MyBean my;

        from("activemq:topic:OrdersTopic").
                filter().expression(BeanLanguage.bean(my, "isGoldCustomer")).
                to("activemq:BigSpendersQueue");
{code}

In Camel 2.2 onwards you can avoid the {{BeanLanguage}} and have it just as:
{code:java}
   private MyBean my;

        from("activemq:topic:OrdersTopic").
                filter().expression(bean(my, "isGoldCustomer")).
                to("activemq:BigSpendersQueue");
{code}

Which also can be done in a bit shorter and nice way:
{code:java}
   private MyBean my;

        from("activemq:topic:OrdersTopic").
                filter().method(my, "isGoldCustomer").
                to("activemq:BigSpendersQueue");
{code}


h3. Other examples

We have some test cases you can look at if it'll help

* [MethodFilterTest |http://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/MethodFilterTest.java] is a JUnit test case showing the Java [DSL] use of the bean expression being used in a filter
* [aggregator.xml|http://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/aggregator.xml] is a Spring XML test case for the [Aggregator] which uses a bean method call to test for the completion of the aggregation.

h3. Dependencies
The Bean language is part of *camel-core*.