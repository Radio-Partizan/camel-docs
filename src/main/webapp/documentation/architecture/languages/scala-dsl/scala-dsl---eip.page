---
title: Scala DSL - EIP
page_version: 13
page_creator: gertvanthienen
page_modifier: hadrian@apache.org
--- pipeline:conf
{toc:outline=true|minLevel=3|style=none}

h3. Messaging systems
h4. Pipeline {anchor:pipeline}
There is a simple syntax available for specifying pipeline, by simple putting {{to}} or {{&rarr;}} between the different steps in the pipeline.
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/PipelineRouteBuilderTest.scala}
For more advanced use cases, you can also use a block-based syntax, where every step in the pipeline starts with either {{to}} or {{&rarr;}}.
{snippet:id=block|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/PipelineRouteBuilderTest.scala}

h4. Filter {anchor:filter}
For a message filter, use the {{when()}} method with a parameter of type The {{Exchange &rArr; Boolean}}. In the example below, we use a Scala convenience method named {{in}} to access the 'in' message body; only messages where the 'in' message is {{<hello/>}} will arrive at the {{mock:a}} endpoint.
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/FilterRouteBuilderTest.scala}
Once again, if you need to specify a more advanced route, you can use the more elaborate syntax.
{snippet:id=alternatives|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/FilterRouteBuilderTest.scala}

h3. Message routing
h4. Aggregator
The aggregator EIP aggregates messages based on some message correlation criteria.  In the Scala DSL, the {{aggregate}} method takes a function {{Exchange &rArr; Any}} to determine the correlation value for the exchange.  In both samples below, message are being aggregated if the first 7 letters in the message body are the same.
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/AggregatorTest.scala}
{snippet:id=block|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/AggregatorTest.scala}

h4. Content based router
Similar to the [Filter | #filter], the content based router uses {{when}} methods with {{Exchange &rArr; Boolean}} function literals and an optional {{otherwise}}.  The function literal can contain plain Scala code as well as any of the [supported languages | Scala DSL - Supported languages].  The example below routes a given message based on the language of the message body.
{snippet:id=cbr|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ContentBasedRouterTest.scala}

h4. Delayer
Unlike a throttler, which only slows down messages if the rate exceeds a treshold, a delayer delays every messages with a fixed amount of time.  An example: to delay every message going from {{seda:a}} to {{mock:a}} with 1 second, you write...
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/DelayerTest.scala}
Our second example will delay the entire block (containing {{mock:c}}) without doing anything to {{mock:b}}
{snippet:id=block|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/DelayerTest.scala}

h4. Load balancer
To distribute the message handling load over multiple endpoints, we add a {{loadbalance}} to our route definition.  You can optionally specify a load balancer strategy, like {{roundrobin}}
{snippet:id=loadbalance|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/LoadBalancerTest.scala}

h4. Multicast
Multicast allows you to send a message to multiple endpoints at the same time.  In a simple route, you can specify multiple targets in the {{to}} or {{&rarr;}} method call:
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/PipelineAndMulticastTest.scala}
You can also explicitly define an explicit {{multicast}} in your {{RouteBuilder}}:
{snippet:id=multicast|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ExplicitMulticastTest.scala}

h4. Recipient list
You can handle a static recipient list with a multicast or [pipeline | #pipeline], but this EIP is usually applied when you want to dynamically determine the name(s) of the next endpoint(s) to route to.  Use the {{recipients()}} method with a function literal ({{Exchange => Any}}) that returns the endpoint name(s).  In the example below, the target endpoint name can be found in the String message starting at position 21.
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/RecipientListRouteTest.scala}

Because the {{recipients()}} method just takes a function literal, you can basically use any kind of valid Scala code to determine the endpoint name.  Have a look at the next example which uses pattern matching to figure out where to send the message:
{snippet:id=pattern|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/RecipientListRouteTest.scala}

Again, we can also use the same thing in a more block-like syntax.  For this example, we use the Scala DSL's [support for JXPath|Scala DSL - Supported languages] to determine the target.
{snippet:id=block|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/RecipientListRouteTest.scala}

h4. Resequencer
Use the {{resequence}} method to add a resequencer to the RouteBuilder.  The method takes a function ({{Exchange &rArr; Unit}}) that determines the value to resequence on.  In this example, we resequence messages based on the 'in' message body.
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ResequencerTest.scala}
The same EIP can also be used with a block-like syntax...
{snippet:id=block|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ResequencerTest.scala}
... and with configurable batch size.  In this last example, messages will be send to {{mock:e}} whenever a batch of 5 messages is available.
{snippet:id=batch|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ResequencerTest.scala}

h4. Splitter
To handle large message in smaller chunks, you can write a Scala {{Exchange &rArr; Any*}} method and add it to your route with the {{splitter}} method.  As with many other EIPs, we support a short, in-line version as well as a more elaborate block based one.
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/SplitterRouteBuilderTest.scala}
{snippet:id=block|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/SplitterRouteBuilderTest.scala}
The above examples also show you how [other languages | Scala DSL - Supported languages] like XPath can be within the Scala DSL.

h4. Throttler
The throttler allows you to slow down messages before sending them along.  The {{throttle}} methods allows you to specify the maximum throughput rate of message:
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ThrottlerTest.scala}
It can also be used in front of block to throttle messages at that point.  In the example below, message are passed on to {{mock:b}} in a normal rate (i.e. as fast as possible), but a maximum 3 messages/2 seconds will arrive at the {{mock:c}} endpoint.
{snippet:id=block|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ThrottlerTest.scala}

h3. Message transformation
h4. Content enricher
Using a processor function ({{Exchange &rarr; Unit}}), you can alter/enrich the message content.  This example uses a simple function literal to append {{" says Hello"}} to the message content:
{snippet:id=simple|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ContentEnricherTest.scala}
However, you can also define a separate method/function to handle the transformation and pass that to the {{process}} method instead.  The example below uses pattern matching to enrich the message content:
{snippet:id=def|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ContentEnricherTest.scala}
Off course, you can also use any other Camel component (e.g. [Velocity]) to enrich the content and add it to a pipeline
{snippet:id=velocity|lang=java|url=camel/trunk/components/camel-scala/src/test/scala/org/apache/camel/scala/dsl/ContentEnricherTest.scala}

h3. TODO
*TODO:* Create a Scala alternative and example for every [EIP available|http://camel.apache.org/enterprise-integration-patterns.html]
* Message Channel
* Message
* Message Router
* Message Translator
* Message Endpoint
* Point to Point Channel
* Publish Subscribe Channel
* Dead Letter Channel
* Guaranteed Delivery
* Message Bus
* Correlation Identifier
* Routing Slip
* Content Filter
* Normalizer
* Messaging Mapper
* Event Driven Consumer
* Polling Consumer
* Competing Consumers
* Message Dispatcher
* Selective Consumer
* Durable Subscriber
* Idempotent Consumer
* Transactional Client
* Messaging Gateway
* Service Activator
* Wire Tap
