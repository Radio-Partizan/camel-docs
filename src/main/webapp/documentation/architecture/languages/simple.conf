h2. Simple Expression Language

The Simple Expression Language was a really simple language you can use, but has since grown more powerful. Its primarily intended for being a really small and simple language for evaluating [Expression] and [Predicate] without requiring any new dependencies or knowledge of [XPath]; so its ideal for testing in camel-core. Its ideal to cover 95% of the common use cases when you need a little bit of expression based script in your Camel routes.

However for much more complex use cases you are generally recommended to choose a more expressive and powerful language such as: 
* [JavaScript]
* [EL]
* [OGNL]
* [Mvel]
* [Groovy]
* one of the supported [Scripting Languages]

The simple language uses {{$\{body}}} placeholders for complex expressions where the expression contains constant literals. The $\{ } placeholders can be omitted if the expression is only the token itself.
 
To get the body of the in message: {{"body"}}, or {{"in.body"}} or {{"$\{body}"}}.

A complex expression must use $\{ } placeholders, such as: {{"Hello $\{in.header.name} how are you?"}}.

You can have multiple tokens in the same expression: {{"Hello $\{in.header.name} this is $\{in.header.me} speaking"}}.
However you can *not* nest tokens (i.e. having another $\{ } placeholder in an existing, is not allowed).

{info:title=File language is now merged with Simple language}
From Camel 2.2 onwards, the [File Language] is now merged with [Simple] language which means you can use all the file syntax directly within the simple language.
{info}

h3. Variables

|| Variable || Type ||  Description ||
| exchangeId | String | *Camel 2.3:* the exchange id |
| id | String | the input message id |
| body | Object | the input body |
| in.body | Object | the input body |
| body.*OGNL* | Object | *Camel 2.3:* the input body invoked using a Camel OGNL expression. |
| in.body.*OGNL* | Object | *Camel 2.3:* the input body invoked using a Camel OGNL expression. |
| bodyAs(_type_) | Type | *Camel 2.3:* Converts the body to the given type determined by its classname. The converted body can be null. |
| mandatoryBodyAs(_type_) | Type | *Camel 2.5:* Converts the body to the given type determined by its classname, and expects the body to be not null. |
| out.body | Object | the output body |
| header.foo | Object | refer to the input foo header |
| headers.foo | Object | refer to the input foo header |
| in.header.foo | Object | refer to the input foo header |
| in.headers.foo | Object | refer to the input foo header |
| header.foo\[bar\] | Object | *Camel 2.3:* regard input foo header as a map and perform lookup on the map with bar as key |
| in.header.foo\[bar\] | Object | *Camel 2.3:* regard input foo header as a map and perform lookup on the map with bar as key |
| in.headers.foo\[bar\] | Object | *Camel 2.3:* regard input foo header as a map and perform lookup on the map with bar as key |
| header.foo.*OGNL* | Object | *Camel 2.3:* refer to the input foo header and invoke its value using a Camel OGNL expression. |
| in.header.foo.*OGNL* | Object | *Camel 2.3:* refer to the input foo header and invoke its value using a Camel OGNL expression. |
| in.headers.foo.*OGNL* | Object | *Camel 2.3:* refer to the input foo header and invoke its value using a Camel OGNL expression. |
| out.header.foo | Object | refer to the out header foo |
| out.headers.foo | Object | refer to the out header foo |
| headerAs(_key_,_type_) | Type | *Camel 2.5:* Converts the header to the given type determined by its classname |
| property.foo | Object | refer to the foo property on the exchange |
| sys.foo | String | refer to the system property |
| sysenv.foo | String | *Camel 2.3:* refer to the system environment |
| exception | Object | *Camel 2.4:* Refer to the exception object on the exchange, is *null* if no exception set on exchange. Will fallback and grab caught exceptions ({{Exchange.EXCEPTION_CAUGHT}}) if the Exchange has any. |
| exception.*OGNL* | Object | *Camel 2.4:* Refer to the exchange exception invoked using a Camel OGNLE expression object |
| exception.message | String | *Camel 2.0.* Refer to the exception.message on the exchange, is *null* if no exception set on exchange. Will fallback and grab caught exceptions ({{Exchange.EXCEPTION_CAUGHT}}) if the Exchange has any. |
| date:_command:pattern_ | String | *Camel 1.5.* Date formatting using the {{java.text.SimpleDataFormat}} patterns. Supported commands are: *now* for current timestamp, *in.header.xxx* or *header.xxx* to use the Date object in the IN header with the key xxx. *out.header.xxx* to use the Date object in the OUT header with the key xxx.|
| bean:_bean expression_ | Object | *Camel 1.5.* Invoking a bean expression using the [Bean] language. Specifying a method name you must use dot as separator. In Camel 2.0 we also support the ?method=methodname syntax that is used by the [Bean] component. |
| properties:_locations:key_ | String | *Camel 2.3:* Lookup a property with the given key. The {{locations}} option is optional. See more at [Using PropertyPlaceholder]. | 
| threadName | String | *Camel 2.3:* Returns the name of the current thread. Can be used for logging purpose. |

h3. OGNL support
*Available as of Camel 2.3*

The [Simple] and [Bean] language now supports a Camel OGNL notation for invoking beans in a chain like fashion.
Suppose the Message IN body contains a POJO which has a {{getAddress()}} method.

Then you can use Camel OGNL notation to access the address object:
{code}
simple("${body.address}")
simple("${body.address.street}")
simple("${body.address.zip}")
{code}

Camel understands the shorthand names for getters, but you can invoke any method or use the real name such as:
{code}
simple("${body.address}")
simple("${body.getAddress.getStreet}")
simple("${body.address.getZip}")
simple("${body.doSomething}")
{code}

You can also use the null safe operator ({{?.}}) to avoid NPE if for example the body does NOT have an address
{code}
simple("${body?.address?.street}")
{code}

Its also possible to index in {{Map}} or {{List}} types, so you can do:
{code}
simple("${body[foo].name}")
{code}
To assume the body is {{Map}} based and lookup the value with {{foo}} as key, and invoke the {{getName}} method on that value.

Suppose there was no value with the key {{foo}} then you can use the null safe operator to avoid the NPE as shown:
{code}
simple("${body[foo]?.name}")
{code}

You can also access {{List}} types, for example to get lines from the address you can do:
{code}
simple("${body.address.lines[0]}")
simple("${body.address.lines[1]}")
simple("${body.address.lines[2]}")
{code}

There is a special {{last}} keyword which can be used to get the last value from a list.
{code}
simple("${body.address.lines[last]}")
{code}

And to get the 2nd last you can subtract a number, so we can use {{last-1}} to indicate this:
{code}
simple("${body.address.lines[last-1]}")
{code}

And the 3rd last is of course:
{code}
simple("${body.address.lines[last-2]}")
{code}

And yes you can combine this with the operator support as shown below:
{code}
simple("${body.address.zip} > 1000")
{code}

h3. Operator support
*Available as of Camel 2.0*
We added a basic set of operators supported in the simple language in Camel 2.0. The parser is limited to only support a single operator. 

To enable it the left value must be enclosed in $\{ }. The syntax is:
{code}
${leftValue} OP rightValue
{code}
Where the {{rightValue}} can be a String literal enclosed in {{' '}}, {{null}}, a constant value or another expression enclosed in $\{ }.
Camel will automatically type convert the rightValue type to the leftValue type, so its able to eg. convert a string into a numeric so you can use > comparison for numeric values.

The following operators is supported:
|| Operator || Description ||
| == | equals ||
| > | greater than |
| >= | greater than or equals |
| < | less than |
| <= | less than or equals |
| != | not equals |
| contains | For testing if contains in a string based value |
| not contains | For testing if not contains in a string based value |
| regex | For matching against a given regular expression pattern defined as a String value |
| not regex | For not matching against a given regular expression pattern defined as a String value |
| in | For matching if in a set of values, each element must be separated by comma. | 
| not in | For matching if not in a set of values, each element must be separated by comma. |
| is | For matching if the left hand side type is an instanceof the value. |
| not is | For matching if the left hand side type is not an instanceof the value. | 
| range | For matching if the left hand side is within a range of values defined as numbers: {{from..to}} |
| not range | For matching if the left hand side is not within a range of values defined as numbers: {{from..to}} |

And the following operators can be used to group expressions:
|| Operator || Description ||
| and | and is used to group two expressions ||
| or | or is used to group two expressions ||

{info:title=Using and,or operators}
In *Camel 2.4 or older* the {{and}} or {{or}} can only be used *once* in a simple language expression. From *Camel 2.5* onwards you can use these operators multiple times.
{info}

The syntax for AND is:
{code}
${leftValue} OP rightValue and ${leftValue} OP rightValue 
{code}

And the syntax for OR is:
{code}
${leftValue} OP rightValue or ${leftValue} OP rightValue 
{code}

Some examples:
{code}
simple("${in.header.foo} == 'foo'")

// ' ' can be omitted
simple("${in.header.foo} == foo")

// here Camel will type convert '100' into the type of in.header.bar and if its an Integer '100' will also be converter to an Integer
simple("${in.header.bar} == '100'")

simple("${in.header.bar} == 100")

// 100 will be converter to the type of in.header.bar so we can do > comparison
simple("${in.header.bar} > 100")
{code}

{info:title=Comparing with different types}
When you compare with different types such as String and int, then you have to take a bit care. Camel will use the type from the left hand side as 1st priority. And fallback to the right hand side type if both values couldn't be compared based on that type.
This means you can flip the values to enforce a specific type. Suppose the bar value above is a String. Then you can flip the equation:
{code}
simple("100 < ${in.header.bar}")
{code}
which then ensures the int type is used as 1st priority.

This may change in the future if the Camel team improves and let the binary comparision operations be smarter and prefer numeric types over String based. It's most often the String type which causes problem when comparing with numbers.
{info}

{code}
// testing for null
simple("${in.header.baz} == null")

// testing for not null
simple("${in.header.baz} != null")
{code}

And a bit more advanced example where the right value is another expression
{code}
simple("${in.header.date} == ${date:now:yyyyMMdd}")

simple("${in.header.type} == ${bean:orderService?method=getOrderType}")
{code}

And an example with contains, testing if the title contains the word Camel
{code}
simple("${in.header.title} contains 'Camel'")
{code}

And an example with regex, testing if the number header is a 4 digit value:
{code}
simple("${in.header.number} regex '\d{4}'")
{code}

And finally an example if the header equals any of the values in the list. Each element must be separated by comma, and no space around.
This also works for numbers etc, as Camel will convert each element into the type of the left hand side.
{code}
simple("${in.header.type} in 'gold,silver'")
{code}

And for all the last 3 we also support the negate test using not:
{code}
simple("${in.header.type} not in 'gold,silver'")
{code}

And you can test for if the type is a certain instance, eg for instance a String
{code}
simple("${in.header.type} is 'java.lang.String'")
{code}
We have added a shorthand for all {{java.lang}} types so you can write it as:
{code}
simple("${in.header.type} is String")
{code}

Ranges is also supported. The range interval requires numbers and both from and end is inclusive. For instance to test whether a value is between 100 and 199:
{code}
simple("${in.header.number} range 100..199")
{code}
Notice we use {{..}} in the range without spaces. Its based on the same syntax as Groovy.

{tip:title=Can be used in Spring XML}
As the Spring XML does not have all the power as the Java DSL with all its various builder methods, you had to resort to use some other languages
for testing with simple operators. Now you can do this with the simple language. In the sample below we want to test if the header is a widget order: 
{code:xml}
    <from uri="seda:orders">
       <filter>
           <simple>${in.header.type} == 'widget'</simple>
           <to uri="bean:orderService?method=handleWidget"/>
       </filter>
    </from>
{code}
{tip} 

h4. Using and / or
If you have two expressions you can combine them with the {{and}} or {{or}} operator.
For instance:
{code}
simple("${in.header.title} contains 'Camel' and ${in.header.type'} == 'gold'")
{code}

And of course the {{or}} is also supported. The sample example would be:
{code}
simple("${in.header.title} contains 'Camel' or ${in.header.type'} == 'gold'")
{code}

*Notice:* Currently {{and}} or {{or}} can only be used *once* in a simple language expression. This might change in the future.
So you *cannot* do:
{code}
simple("${in.header.title} contains 'Camel' and ${in.header.type'} == 'gold' and ${in.header.number} range 100..200")
{code}

h3. Samples
In the Spring XML sample below we filter based on a header value:
{code:xml}
    <from uri="seda:orders">
       <filter>
           <simple>in.header.foo</simple>
           <to uri="mock:fooOrders"/>
       </filter>
    </from>
{code}

The Simple language can be used for the predicate test above in the [Message Filter] pattern, where we test if the in message has a {{foo}} header (a header with the key {{foo}} exists). If the expression evaluates to *true* then the message is routed to the {{mock:foo}} endpoint, otherwise its lost in the deep blue sea ;).

The same example in Java DSL:
{code:java}
    from("seda:orders")
        .filter().simple("in.header.foo").to("seda:fooOrders");
{code}

You can also use the simple language for simple text concatenations such as:
{code:java}
   from("direct:hello").transform().simple("Hello ${in.header.user} how are you?").to("mock:reply");
{code}
Notice that we must use $\{ } placeholders in the expression now to let Camel be able to parse it correctly. 

And this sample uses the date command to output current date.
{code:java}
   from("direct:hello").transform().simple("The today is ${date:now:yyyyMMdd} and its a great day.").to("mock:reply");
{code}

And in the sample below we invoke the bean language to invoke a method on a bean to be included in the returned string:
{code:java}
   from("direct:order").transform().simple("OrderId: ${bean:orderIdGenerator}").to("mock:reply");
{code}
Where {{orderIdGenerator}} is the id of the bean registered in the [Registry]. If using Spring then its the Spring bean id.

If we want to declare which method to invoke on the order id generator bean we must prepend {{.method name}} such as below where we invoke the {{generateId}} method.
{code:java}
   from("direct:order").transform().simple("OrderId: ${bean:orderIdGenerator.generateId}").to("mock:reply");
{code}

And in Camel 2.0 we can use the {{?method=methodname}} option that we are familiar with the [Bean] component itself:
{code:java}
   from("direct:order").transform().simple("OrderId: ${bean:orderIdGenerator?method=generateId}").to("mock:reply");
{code}
 
And from Camel 2.3 onwards you can also convert the body to a given type, for example to ensure its a String you can do:
{code:xml}
  <transform>
    <simple>Hello ${bodyAs(String)} how are you?</simple>
  </transform>
{code}

There is a few types which have a shorthand notation, hence why we can use {{String}} instead of {{java.lang.String}}. These are: {{byte[], String, Integer, Long}}. All other types must use their FQN name, e.g. {{org.w3c.dom.Document}}.

Its also possible to lookup a value from a header {{Map}} in *Camel 2.3* onwards:
{code:xml}
  <transform>
    <simple>The gold value is ${header.type[gold]}</simple>
  </transform>
{code}

In the code above we lookup the header with name {{type}} and regard it as a {{java.util.Map}} and we then lookup with the key {{gold}} and return the value.
If the header is not convertible to Map an exception is thrown. If the header with name {{type}} does not exists {{null}} is returned.

h3. Dependencies
The [Simple] language is part of *camel-core*.