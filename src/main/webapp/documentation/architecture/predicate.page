---
title: Predicate
page_version: 10
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
h2. Predicates

Camel supports a pluggable interface called [Predicate|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Predicate.html] which can be used to integrate a dynamic predicate into [Enterprise Integration Patterns] such as when using the [Message Filter] or [Content Based Router].

A Predicate is being evaluated to a boolean value so the result is either {{true}} or {{false}}. This makes [Predicate] so powerful as it is often used to control the routing of message in which path they should be routed.

A simple example is to route an [Exchange] based on a header value:
{code:java}
from("jms:queue:order")
   .choice()
      .when(header("type").isEqualTo("widget")).to("bean:widgetOrder")
      .when(header("type").isEqualTo("wombat")).to("bean:wombatOrder")
   .otherwise()
      .to("bean:miscOrder")
   .end();  
{code}

In the route above the [Predicate] is the {{header("type").isEqualTo("widget")}} as its constructed as an [Expression] that is evaluated as a [Predicate]. To do this the various Builder classes helps us here to create a nice and fluent syntax. {{isEqualTo}} is a builder method that returns a [Predicate] based on the input.

Sometimes the fluent builders can get long and a bit complex to read, then you can just define your predicate outside the route and then just refer to the predicate in the route:
{code:java}
Predicate isWidget = header("type").isEqualTo("widget");
{code}
And then you can refer to it in the route as:
{code:java}
from("jms:queue:order")
   .choice()
      .when(isWidget).to("bean:widgetOrder")
      .when(isWombat).to("bean:wombatOrder")
   .otherwise()
      .to("bean:miscOrder")
   .end();  
{code}

h4. Negating a Predicate
You can use the *not* method on the {{PredicateBuilder}} to negate a predicate.

First we import the not static, so it makes our route nice and easy to read:
{code}
import static org.apache.camel.builder.PredicateBuilder.not
{code}

And then we can use it to enclose an existing predicate and negate it as the example shows:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/ChoiceWhenNotPredicateTest.java}


h3. Compound Predicates
You can also create compound predicates using boolean operators such as {{and, or, not}} and many others.
The sample below demonstrates this:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/ChoiceCompoundPredicateTest.java}


h3. Extensible Predicates
Camel supports extensible Predicates using multiple [Languages]; the following languages are supported out of the box
{include:Languages Supported}

You can easily write your own plugin predicate by implementing the [Predicate interface|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Predicate.html]. 

There are also a number of helper builders available such as the [PredicateBuilder class|http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/builder/PredicateBuilder.html] 

h3. Using Predicates in your IDE
{include:Using Languages In IDE}

h4. See Also
- [Expression]

