h2. Java DSL

Camel uses a Java _Domain Specific Language_ or DSL for creating [Enterprise Integration Patterns] or [Routes]. Camel also supports a [Spring based XML configuration|Xml Configuration] as well as a [Scala DSL].

The benefits of using the Java DSL is that your IDE can smart complete your code as you start typing, rather than having to mess around with buckets of XML. The Java DSL is also very expressive as you can mix and match your own code within the language for [Expression] or [Predicate] evaluations or easily add a custom [Processor]. 

The main entry points for the DSL are

* [CamelContext] for creating a Camel routing rulebase
* [RouteBuilder] for creating a collection of routes using the routing DSL

h3. Handling errors

You can handle errors in a number of ways such as:
* by specifying an [Error Handler]
* using the [Exception Clause] via the *exception()* method

Camel uses a strategy to resolve how exceptions should be handled. 


h3. Using try ... catch ... finally

See [Try Catch Finally]


h3. Using Interceptors

See [Intercept]


h3. See Also

For more examples of the DSL in action see

* [Enterprise Integration Patterns]
* [Examples]
* [Routes]
