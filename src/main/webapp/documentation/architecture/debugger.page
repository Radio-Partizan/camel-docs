---
title: Debugger
page_version: 17
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
h2. Debugger 
*Available as of Camel 2.6*

Camel [Debugger] is much related to [Tracer], in fact they are sisters. Debugger is a enhanced tracer with a debugger framework so that tooling can be developed to easily monitor Camel routes, trace messages and set breakpoints at points in a route etc.

h3. About the Debugger

The Debugger allows tooling or the likes to attach breakpoints which is being invoked when [Exchange]s is being routed.

h3. Default implementation

Camel provides a default implementation {{org.apache.camel.impl.DefaultDebugger}} which you can set on the {{CamelContext}} using the {{setDebugger}} method.
Likewise you can get hold of the [Debugger] using the {{getDebugger}} method on {{CamelContext}}.

The {{org.apache.camel.spi.Debugger}} has methods to attach and remove breakpoints. And to suspend/resume all breakpoints etc.
You can also attach a condition to the breakpoint so it only reacts if the condition matches.

h3. Easily debugging Camel routes from {{camel-test}}

If you are developing unit tests using the {{camel-test}} component, then the [Debugger] comes out of the box.

h4. Example 

In this unit test
{code}
public class DebugTest extends CamelTestSupport
{code}

We want to debug the following route
{snippet:id=e2|lang=java|url=camel/trunk/components/camel-test/src/test/java/org/apache/camel/test/patterns/DebugTest.java}

Which can easily done by overriding the {{debugBefore}} method as shown
{snippet:id=e1|lang=java|url=camel/trunk/components/camel-test/src/test/java/org/apache/camel/test/patterns/DebugTest.java}

Then from your Java editor just add a breakpoint inside the {{debugBefore}} method. Then fire up the unit test and wait for the Java editor to hit the breakpoint. Then you can inspect the [Exchange] during debugging while it advances during routing. The {{ProcessorDefinition}} and the {{id}} and {{shortName}} parameters is all information which tells you where in the route the breakpoint was hit.

{tip}
There is also a {{debugAfter}} method which is invoked after the processor has been invoked. This allows you to _see_ what happens to the [Exchange] right after it has invoked a processor in the route.
{tip}

The screenshot below shows the [Debugger] in action. The IDE (IDEA) has hit the breakpoint and we can inspect the parameters.
Notice how we can see that the message is to be send to the "mock:a" endpoint.

!debug.png!

h3. See Also
- [Tracer]
