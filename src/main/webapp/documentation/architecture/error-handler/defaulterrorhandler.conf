h2. DefaultErrorHandler
This is the new default error handler in Camel 2.0 onwards.

It has the same power as the [Dead Letter Channel] however it does *not* support a _dead letter queue_. That is the only difference between the two of them.

The default error handler is configured differently that [Dead Letter Channel] as it configured to:
- no redeliver
- not handled
- no dead letter queue (not possible)

By default any exception thrown during routing will be propagated back to the caller and the [Exchange] ends immediately. However you can use the [Exception Clause] to catch a given exception and lower the exception by marking it as handled. If so the exception will *not* be sent back to the caller and the [Exchange] continues to be routed.

h3. Example
In this route below, any exception thrown in eg the {{validateOrder}} bean will be propagated back to the caller, and its the jetty endpoint. It will return a HTTP error message back to the client.
{code:java}
from("jetty:http://localhost/myservice/order").to("bean:validateOrder").to("jms:queue:order");
{code}

We can add a *onException* in case we want to catch certain exceptions and route them differently, for instance to catch a *ValidationException* and return a fixed response to the caller.

{code:java}
onException(ValidationException.class).handled(true).transform(body(constant("INVALID ORDER")));

from("jetty:http://localhost/myservice/order").to("bean:validateOrder").to("jms:queue:order");
{code}
When the *ValidationException* is thrown from the validate order bean it is intercepted by the [DefaultErrorHandler] and it let the {{onException(ValidationException.class}} handle it so the [Exchange] is routed to this route and since we use *handled(true)* then the original exception is lowered (= cleared) and we transform the message into a fixed response that are returned to jetty endpoint that returns it to the original caller.

h3. See Also
- [Error Handler]
- [Dead Letter Channel]