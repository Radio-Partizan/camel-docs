---
title: Routes
page_version: 11
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
h2. Routes

Camel supports the definition of routing rules using a Java [DSL] (domain specific language) which avoids the need for cumbersome XML using a [RouteBuilder].

For example a simple route can be created as follows.

{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}

As you can see from the above Camel uses [URIs] to wire endpoints together.

h3. URI String formatting
*Available as of Camel 2.0*

If you have endpoint URIs that accept options and you want to be able to substitute the value, e.g. build the URI by concat the strings together, then you can use the {{java.lang.String.format}} method. But in Camel 2.0 we have added two convenient methods in the Java DSL so you can do {{fromF}} and {{toF}} that uses String formatting to build the URI.  

{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/RouteFormattedUriTest.java}

h3. Filters

You can combine simple routes with filters which can be arbitrary [Predicate] implementations. 

{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}

h3. Choices

With a choice you provide a list of predicates and outcomes along with an optional default otherwise clause which is invoked if none of the conditions are met.

{snippet:id=e3|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}

h4. Using a custom processor

Here is an example of using a custom [Processor]
{snippet:id=e4|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}

You can mix and match custom processors with filters and choices.

{snippet:id=e5|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}



h4. Interceptors

Here is an example of adding a few custom [InterceptorProcessor|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/InterceptorProcessor.html] objects to a processing pipeline: 
{snippet:id=e7|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/RouteBuilderTest.java}

When you start defining and interceptor stack with intercept(), you must follow up with the subsequent .target() so that the target of the interceptor stack is properly registered.

