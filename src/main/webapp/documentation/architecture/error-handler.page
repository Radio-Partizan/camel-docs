---
title: Error Handler
page_version: 49
page_creator: jstrachan
page_modifier: davsclaus
--- pipeline:conf
h2. Error Handler

Camel supports pluggable [ErrorHandler|http://camel.apache.org/maven/camel-2.2.0/camel-core/apidocs/org/apache/camel/processor/ErrorHandler.html] strategies to deal with errors processing an [Event Driven Consumer]. An alternative is to specify the error handling directly in the [DSL] using the [Exception Clause].

For introduction and background material see [Error handling in Camel].

{info:title=Camel 2.0 has a new default error handler}
In Camel 2.0 onwards there default error handler is changed from [Dead Letter Channel] to [DefaultErrorHandler]. This error handler does not support a dead letter queue and will return exceptions back to the caller. This is what you expects when working with regular Java that exceptions will be thrown back to the caller.
{info} 

{tip:title=Exception Clause}
Using [Error Handler] combined with [Exception Clause] is a very powerful combination. We encourage end-users to use this combination in your error handling strategies. See samples and [Exception Clause].
{tip} 

{tip:title=Using try ... catch ... finally}
Related to error handling is the [Try Catch Finally] as DSL you can use directly in your route. Its basically a mimic of the regular try catch finally in the Java language but with more power.
{tip}

The current implementations Camel provides out of the box are:

h4. Non transacted
* [DefaultErrorHandler] is the default error handler in *Camel 2.0 onwards*. This error handler does not support a deal letter queue, it will propagate exceptions back to the caller, as if there where no error handler at all. It has a limited set of features.
* [Dead Letter Channel] which supports attempting to redeliver the message exchange a number of times before sending it to a dead letter endpoint
* LoggingErrorHandler for just catching and logging exceptions
* NoErrorHandler for no error handling

h4. Transacted
* [TransactionErrorHandler] is the default error handler in *Camel 2.0 onwards* for transacted routes. See the [Transactional Client] EIP pattern. 

These error handlers can be applied in the [DSL] to an entire set of rules or a specific routing rule as we show in the next examples. Error handling rules are inherited on each routing rule within a single [RouteBuilder]

{note:title=Transaction in Camel 1.x}
If the route is transactional then the [Dead Letter Channel] is disabled. The {{exchange.isTransacted()}} is used to determine if an Exchange is transacted or not.
So if you are using transacted routes then you should configure the TransactionErrorHandler instread of DeadLetterChannel. See [Transactional Client] for further details and samples.
{note}


h3. Short Summary of the provided Error Handlers

h4. [DefaultErrorHandler] new in Camel 2.0

The [DefaultErrorHandler] is the new default error handler in Camel 2.0. Unlike [Dead Letter Channel] it does not have any dead letter queue, and do *not* handle exceptions by default.

h4. [Dead Letter Channel]

The [Dead Letter Channel] is the default error handler in Camel 1.x, which is automatically configured for you. By default Camel will redeliver at most 6 times using 1 second delay, and if the exchange failed it will be logged at ERROR level.

You can configure the default dead letter endpoint to use:
{snippet:id=e3|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java}

h4. Logging Error Handler

The logging error handler will log (by default at ERROR level) whenever an uncaught exception is thrown. The logging category, logger and level may all be defined in the builder.

{code}
errorHandler(loggingErrorHandler("mylogger.name").level(LoggingLevel.INFO));
{code}

This would create an error handler which logs exceptions using the category mylogger.name and uses the level INFO for all log messages created.
{code}
from("seda:a").errorHandler(loggingErrorHandler("mylogger.name").level(LoggingLevel.DEBUG)).to("seda:b");
{code}

Loggers may also be defined for specific routes.

h4. No Error Handler

The no error handler is to be used for disabling error handling. 
{code}
errorHandler(noErrorHandler());
{code}

h4. [TransactionErrorHandler] new in Camel 2.0

The [TransactionErrorHandler] is the new default error handler in Camel 2.0 for transacted routes. 

{tip:[TransactionErrorHandler] is default for transacted routes}
If you have marked a route as transacted using the *transacted* DSL then Camel will automatic use a [TransactionErrorHandler]. It will try to lookup the global/per route configured error handler and use it if its a {{TransactionErrorHandlerBuilder}} instance. If not Camel will automatic create a temporary [TransactionErrorHandler] that overrules the default error handler. This is convention over configuration.
{tip}

h3. Features support by various [Error Handler]s
In Camel 1.x the [TransactionErrorHandler] only supports the *all scopes* feature. In Camel 2.0 we have redone it to be based on the same core class as the [DefaultErrorHandler] and hence why it supports the same feature set as this.

Here is a breakdown of which features is supported by the [Error Handler](s):
|| Feature || Supported by the following [Error Handler] ||
| all scopes | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| onException | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| onWhen | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| continued | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| handled | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| Custom ExceptionPolicy | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| useOriginalBody | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] | 
| retryWhile | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| onRedelivery | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| [RedeliveryPolicy|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/RedeliveryPolicy.html] | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| asyncDelayedRedelivery | [DefaultErrorHandler], [TransactionErrorHandler], [Dead Letter Channel] |
| dead letter queue | [Dead Letter Channel] | 

See [Exception Clause] documentation for documentation of some of the features above.

h3. Scopes
The error handler is scoped as either
- global
- per route

The following example shows how you can register a global error handler (in this case using the logging handler)
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java}

The following example shows how you can register a route specific error handler; the customized logging handler is only registered for the route from [Endpoint] *seda:a*
{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java}


h3. Spring based configuration
*Available as of Camel 1.4*

{info:title=Java DSL vs. Spring DSL}
The error handler is configured a bit differently in Java DSL and Spring DSL. Spring DSL relies more on standard Spring bean configuration whereas Java DSL uses fluent builders.
{info}

In Camel 1.4 the error handler can be configured as a spring bean and scoped in:
- global (the camelContext tag)
- per route (the route tag)
- or per policy (the policy/transacted tag)

The error handler is configured with the {{errorHandlerRef}} attribute.

{tip:title=Error Handler Hierarchy} 
The error handlers is inherited, so if you only have set a global error handler then its use everywhere. But you can override this in a route and use another error handler.
{tip}

h4. Spring based configuration sample
In this sample we configure a [Dead Letter Channel] on the route that should redeliver at most 3 times and use a little delay before retrying.
First we configure the reference to *myDeadLetterErrorHandler* using the {{errorHandlerRef}} attribute on the {{route}} tag.
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/config/DeadLetterChannelRedeliveryConfigTest-context.xml}

Then we configure *myDeadLetterErrorHandler* that is our [Dead Letter Channel]. This configuration is standard Spring using the bean element.
And finally we have another spring bean for the redelivery policy where we can configure the options for how many times to redeliver, delays etc.
{snippet:id=e2|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/config/DeadLetterChannelRedeliveryConfigTest-context.xml}

From Camel 2.3.0, camel provides a customer bean configuration for the Error Handler, you can find the examples here.
{snippet:id=example|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/handler/ErrorHandlerDefinitionParser.xml}


h3. Using the transactional error handler
The transactional error handler is introduced in Camel 1.4 and is based on spring transaction. This requires the usage of the camel-spring component.
See [Transactional Client] that has many samples for how to use and transactional behavior and configuration with this error handler.

h3. See also
- [Error handling in Camel] for introduction and background material on error handling in Camel
- [Dead Letter Channel] for the default error handler in Camel 1.x
- [DefaultErrorHandler] for the default error handler in Camel 2.0 onwards
- [TransactionErrorHandler] for the default error handler for transacted routes in Camel 2.0 onwards
- [Transactional Client] for transactional behavior
- [Exception Clause] as it supports *handling* thrown exceptions
- [Try Catch Finally] for try ... catch ... finally as DSL you can use in the routing