h2. Exception Clause

You can use the _Exception Clause_ in the Java [DSL] to specify the error handling you require on a per exception type basis using the *onException()* method.

To get started we give quick sample before digging into how it works.
For example if you want to perform a specific piece of processing if a certain exception is raised you can do this simply via:
{code}
onException(ValidationException.class).
  to("activemq:validationFailed");
  
from("seda:inputA").
  to("validation:foo/bar.xsd", "activemq:someQueue");

from("seda:inputB").to("direct:foo").
  to("rnc:mySchema.rnc", "activemq:anotherQueue");
{code}

Here if the processing of *seda:inputA* or *seda:inputB* cause a ValidationException to be thrown (such as due to the XSD validation of the [Validation] component or the Relax NG Compact syntax validation of the [Jing] component), then the message will be sent to *activemq:validationFailed* queue.

You can define multiple onException clauses for different behavior
{code:java}
onException(ValidationException.class).
  to("activemq:validationFailed");

onException(ShipOrderException.class).
  to("activemq:shipFailed");

from("seda:order").to("bean:processOrder");
{code}

h3. Scopes
Exception clauses is scoped as either:
- global
- or route specific

Where the *global* are the simplest and most easy to understand. In the advanced section we dig into the route specific and even combining them. However 

h3. How does Camel select which clause should handle a given thrown Exception
Camel uses {{DefaultExceptionPolicyStrategy}} to determine a strategy how an exception being thrown should be handled by which {{onException}} clause. The strategy is:
- the order in which the {{onException}} is configured takes precedence. Camel will test from first...last defined.
- Camel will start from the bottom (nested caused by) and recursive up in the exception hierarchy to find the first matching {{onException}} clause
- {{instanceof}} test is used for testing the given exception with the {{onException}} clause defined exception list. An exact {{instanceof}} match will always be used, otherwise the {{onException}} clause that has an exception that is the closets super of the thrown exception is selected (recurring up the exception hierarchy)

This is best illustrated with an exception:
{code:java}
onException(IOException.class).maximumRedeliveries(3);

onException(OrderFailedException.class).maximumRedeliveries(2);
{code}

In the sample above we have defined two exceptions in which IOException is first, so Camel will pickup this exception if there is a match. IOException that is more general is selected then.

So if an exception is thrown with this hierarchy:
{code}
+ RuntimeCamelException (wrapper exception by Camel)
   + OrderFailedException 
       + IOException
            + FileNotFoundException
{code}

Then Camel will try testing the exception in this order: FileNotFoundException, IOException, OrderFailedException and RuntimeCamelException.
As we have defined a onException(IOException.class) Camel will select this as it's the *closest* match.

If we add a third onException clause with the {{FileNotFoundException}}
{code:java}
onException(IOException.class).maximumRedeliveries(3);

onException(OrderFailedException.class).maximumRedeliveries(2);

onException(FileNotFoundException.class).handled(true).to("log:nofile");
{code}
Then with the previous example Camel will now use the last {{onException(FileNotFoundException.class)}} as its an *exact* match. Since this is an exact match it will override the general IOException that was used before to handle the same exception thrown. 

Now a new situation if this exception was thrown instead:
{code}
+ RuntimeCamelException (wrapper exception by Camel)
   + OrderFailedException 
       + OrderNotFoundException
{code}

Then the {{onException(OrderFailedException.class)}} will be selected - no surprise here.

And this last sample demonstrates the {{instanceof}} test aspect in which Camel will select an exception if it's an instance of the defined exception in the {{onException}} clause. Illustrated as:
{code}
+ RuntimeCamelException (wrapper exception by Camel)
   + SocketException
{code}

Since SocketException is an instanceof IOException, Camel will select the {{onException(IOException.class)}} clause.

h3. Configuring ReliveryPolicy (redeliver options)

[RedeliveryPolicy|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/RedeliveryPolicy.html] requires to use the [Dead Letter Channel] as the [Error Handler].

The default error handler used in Camel is the [Dead Letter Channel] which supports attempting to redeliver the message exchange a number of times before sending it to a dead letter endpoint. See [Dead Letter Channel] for further information about redeliver and which redeliver options exists.

{info:title=No redelivery is default for onException}
By default any [Exception Clause] will *not* redeliver! (as it sets the {{maximumRedeliveries}} option to 0).
{info}

Sometimes you want to configure the redelivery policy on a per exception type basis. By default in the top examples, if a ValidationException occurs then the message will not be redelivered; however if some other exception occurs (IOException or whatelse) the route will be retried according to the settings from the [Dead Letter Channel]. 

However if you want to customize any methods on the [RedeliveryPolicy|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/RedeliveryPolicy.html] object, you can do this via the fluent API. So lets retry in case of ValidationException up till two times.
{code}
onException(ValidationException.class).
  maximumRedeliveries(2);
{code}

And the spring DSL:
{code:xml}
<onException>
   <exception>com.mycompany.ValidationException</exception>
   <redeliveryPolicy maximumRedeliveries="2"/>
</onException>
{code}

You can customize any of the [RedeliveryPolicy|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/RedeliveryPolicy.html] so we can for instance set a different delay of 5000 millis:
{code:xml}
<onException>
   <exception>com.mycompany.ValidationException</exception>
   <redeliveryPolicy maximumRedeliveries="2" delay="5000"/>
</onException>
{code}

h4. Reusing ReliveryPolicy
*Available as of Camel 1.5.1 or later*
You can reference a {{RedeliveryPolicy}} so you can reuse existing configurations and use standard spring bean style configuration that supports property placeholders.
{code:xml}
    <bean id="myRedeliveryPolicy" class="org.apache.camel.processor.RedeliveryPolicy">
        <property name="maximumRedeliveries" value="${myprop.max}"/>
    </bean>

     <onException>
         <!-- you can define multiple exceptions just adding more exception elements as show below -->
         <exception>com.mycompany.MyFirstException</exception>
         <exception>com.mycompany.MySecondException</exception>

         <!-- here we reference our redelivery policy defined above -->
         <redeliveryPolicy ref="myRedeliveryPolicy"/>
     </onException>
{code}

h3. Asynchronous delayed redelivery
*Available as of Camel 2.4*

From *Camel 2.4* onwards Camel has a feature to *not block* while waiting for a delayed redelivery to occur. However if you use transacted routes then Camel will block as its mandated by the transaction manager to execute all the work in the same thread context. You can enable the non blocking asynchronous behavior by the {{asyncDelayedRedelivery}} option. This option can be set on the {{errorHandler}}, {{onException}} or the redelivery policies.


h3. Catching multiple exceptions
*Available as of Camel 1.5*

In Camel 1.5 the *exception* clauses has been renamed to *onException* and it also supports multiple exception classes:
{code}
onException(MyBusinessException.class, MyOtherBusinessException.class)
  .maximumRedeliveries(2)
  .to("activemq:businessFailed");
{code}

And in Spring DSL you just add another exception element:
{code:xml}
<onException>
   <exception>com.mycompany.MyBusinessException</exception>
   <exception>com.mycompany.MyOtherBusinessException</exception>
   <redeliveryPolicy maximumRedeliveries="2"/>
   <to uri="activemq:businessFailed"/>
</onException>
{code}

h3. Using a processor as failure handler
We want to handle certain exceptions specially so we add a *onException* clause for that exception. 
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionProcessorInspectCausedExceptionTest.java}

So what happens is that whenever a {{MyFunctionalException}} is thrown it is being routed to our processor {{MyFunctionFailureHandler}}. So you can say that the exchange is diverted when a MyFunctionalException is thrown during processing. It's important to distinct this as perfect valid. The default redelivery policy from the [Dead Letter Channel] will not kick in, so our processor receives the Exchange directly, without any redeliver attempted. In our processor we need to determine what to do. Camel regards the Exchange as *failure handled*. So our processor is the end of the route. So lets look the code for our processor.
{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionProcessorInspectCausedExceptionTest.java}
Notice how we get the *caused by* exception using a property on the Exchange. This is where Camel stores any caught exception during processing. So you can fetch this property and check what the exception message and do what you want. In the code above we just route it to a mock endpoint using a producer template from Exchange.

h2. Marking exceptions as being handled
*Available as of Camel 1.5*

{tip:title=Continued}
See also the section _Handle and continue exceptions_ below
{tip}

Using *onException* to handle known exceptions is a very powerful feature in Camel. However prior to Camel 1.5 you could not mark the exception as being handled, so the caller would still receive the caused exception as a response. In Camel 1.5 you can now change this behavior with the new *handle* DSL. The handle is a [Predicate] that is overloaded to accept three types of parameters:
- Boolean
- [Predicate]
- [Expression] that will be evaluates as a [Predicate] using this rule set: If the expressions returns a Boolean its used directly. For any other response its regarded as {{true}} if the response is {{not null}}.

For instance to mark all {{ValidationException}} as being handled we can do this:
{code}
  onException(ValidationException).handled(true);
{code}

h3. Example using handled
In this route below we want to do special handling of all OrderFailedException as we want to return a customized response to the caller. First we setup our routing as:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelHandledExampleTest.java}
Then we have our service beans that is just plain POJO demonstrating how you can use [Bean Integration] in Camel to avoid being tied to the Camel API:
{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelHandledExampleTest.java}
And finally the exception that is being thrown is just a regular exception:
{snippet:id=e3|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelHandledExampleTest.java}

So what happens?

If we sent an order that is being processed OK then the caller will receive an Exchange as reply containing {{Order OK}} as the payload and {{orderid=123}} in a header.

If the order could *not* be processed and thus an OrderFailedException was thrown the caller will *not* receive this exception (as opposed to in Camel 1.4, where the caller received the OrderFailedException) but our customized response that we have fabricated in the {{orderFailed}} method in our {{OrderService}}. So the caller receives an Exchange with the payload {{Order ERROR}} and a {{orderid=failed}} in a header.

h3. Using handled with Spring DSL
The same route as above in Spring DSL:
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/deadLetterChannelHandledExampleTest.xml}

h3. Handling and sending a fixed response back to the client
In the route above we handled the exception but routed it to a different endpoint. What if you need to alter the response and send a fixed response back to the original caller (the client). No secret here just do as you do in normal Camel routing, use [transform|Message Translator] to set the response, as shown in the sample below:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionHandleAndTransformTest.java}

We modify the sample slightly to return the original caused exception message instead of the fixed text Sorry:
{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionHandleAndTransformTest.java}

And we can use the [Simple] language to set a readable error message with the caused excepetion message:
{snippet:id=e3|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionHandleAndTransformTest.java}


h2. Handle and continue exceptions
*Available as of Camel 2.3*

In Camel 2.3 we introduced a new option {{continued}} which allows you to both *handle* and *continue* routing in the original route as if the exception did not occur. 

For instance to just ignore and continue if the {{IDontCareException}} was thrown we can do this:
{code}
  onException(IDontCareException).continued(true);
{code}

You can maybe compare continued with a having a {{try ... catch}} block around each step and then just ignore the exception.
Using continued makes it easier in Camel as you otherwise had to use [Try Catch Finally] style for this kind of use case.

h3. Example using continued
In this route below we want to do special handling of all IllegalArgumentException as we just want to continue routing.
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionContinueTest.java}

And the same example in Spring XML:
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/OnExceptionContinueTest.xml}

h3. What is the difference between handled and continued?
If handled is true, then the thrown exception will be _handled_ and Camel will *not* continue routing in the original route, but break out. However you can configure a route in the {{onException}} which will be used instead. You use this route if you need to create some custom response message back to the caller, or do any other processing because that exception was thrown.

If continued is true, then Camel will catch the exception and in fact just ignore it and continue routing in the original route. However if you have a route configured in the {{onException}} it will route that route first, before it will continue routing in the original route.



h3. Using useOriginalMessage
*Available as of Camel 2.0*
The option *useOriginalMessage* is used for routing the original input body instead of the current body that potential is modified during routing.

For instance if you have this route:
{code}
   from("jms:queue:order:input")
       .to("bean:validateOrder");
       .to("bean:transformOrder")
       .to("bean:handleOrder");
{code}
The route listen for JMS messages and validates, transforms and handle it. During this the [Exchange] payload is transformed/modified. So in case something goes wrong and we want to move the message to another JMS destination, then we can add an *onException*. But when we move the [Exchange] to this destination we do not know in which state the message is in. Did the error happen in before the transformOrder or after? So to be sure we want to move the original input message we received from {{jms:queue:order:input}}. So we can do this by enabling the *useOriginalMessage* option as shown below:
{code:java}
    // will use original input body
    onException(MyOrderException.class)
       .useOriginalMessage().handled(true)
       .to("jms:queue:order:failed");
{code}

Then the messages routed to the {{jms:queue:order:failed}} is the original input. If we want to manually retry we can move the JMS message from the failed to the input queue, with no problem as the message is the same as the original we received.

h4. useOriginalMessage with Spring DSL
The *useOriginalMessage* option is defined as a boolean attribute on the <onException> XML tag in Spring DSL. So the definition above would be:
{code:xml}
    <onException useOriginalMessage="true">
        <exception>com.mycompany.MyOrderException</exception>
        <handled><constant>true</constant></handled>
        <to uri="jms:queue:order:failed"/>
    </onException>
{code}

h2. Advanced Usage of [Exception Clause]

h3. Using global and per route exception clauses
Camel supports quite advanced configuration of exception clauses.

You can define exception clauses either as:
- global
- or route specific

We start off with the sample sample that we change over time. First off we use only global exception clauses:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRouteTest.java}

In the next sample we change the global exception policies to be pure route specific.
{info:title=Must use .end() for route specific exception policies}
*Important:* This requires to end the *onException* route with {{.end()}} to indicate where it stops and when the regular route continues.
{info}
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionSubRouteTest.java}

And now it gets complex as we combine global and route specific exception policies as we introduce a 2nd route in the sample:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionComplexRouteTest.java}
Notice that we can define the same exception MyFunctionalException in both routes, but they are configured differently and thus is handled different depending on the route. You can of course also add a new onException to one of the routes so it has an additional exception policy. 

And finally we top this by throwing in a nested error handler as well, as we add the 3rd route shown below:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionComplexWithNestedErrorHandlerRouteTest.java}

{info:title=Global exception policies and nested error handlers}
The sample above with both nested error handlers and both global and per route exception clauses is a bit advanced. It's important to get the fact straight that the *global* exception clauses is really global so they also applies for nested error handlers. So if a {{MyTechnicalException}} is thrown then it's the global exception policy that is selected.
{info}

h3. Using fine grained selection using onWhen predicate
*Available as of Camel 1.5.1 or later*

You can attach an [Expression] to the exception clause to have fine grained control when a clause should be selected or not. As it's an [Expression] you can use any kind of code to perform the test. Here is a sample:

{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategyUsingWhenTest.java}

In the sample above we have two onException's defined. The first has an *onWhen* expression attached to only trigger if the message has a header with the key user that is not null. If so this clause is selected and is handling the thrown exception. The 2nd clause is a for coarse gained selection to select the same exception being thrown but when the expression is evaluated to false. *Notice:* this is not required, if the 2nd clause is omitted, then the default error handler will kick in.

h3. Using onRedelivery processor
*Available as of Camel 2.0*

[Dead Letter Channel] has support for *onRedelivery* to allow custom processing of a Message before its being redelivered. It can be used to add some customer header or whatnot. In Camel 2.0 we have added this feature to [Exception Clause] as well, so you can use per exception scoped on redelivery. Camel will fallback to use the one defined on [Dead Letter Channel] if any, if none exists on the [Exception Clause]. See [Dead Letter Channel] for more details on *onRedelivery*.

In the code below we want to do some custom code before redelivering any IOException. So we configure an *onException* for the IOException and set the *onRedelivery* to use our custom processor:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelOnExceptionOnRedeliveryTest.java}

And in our custom processor we set a special timeout header to the message. You can of course do anything what you like in your code.
{snippet:id=e4|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/DeadLetterChannelOnExceptionOnRedeliveryTest.java}

h4. Using onRedelivery in Spring DSL
In Spring DSL you need to use the *onRedeliveryRef* attribute to refer to a spring bean id that is your custom processor:
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/DeadLetterChannelOnExceptionOnRedeliveryTest.xml}

And our processor is just a regular spring bean (we use $ for the inner class as this code is based on unit testing)
{snippet:id=e2|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/DeadLetterChannelOnExceptionOnRedeliveryTest.xml}


h3. Using fine grained retry using retryWhile predicate
*Available as of Camel 2.0*

{info:RetryUntil}
In Camel 2.0 to 2.3 its called *retryUntil*. From Camel 2.4 onwards its named *retryWhile* because Camel will continue doing retries _while_ the predicate returns true.
{info}

When you need fine grained control for determining if an exchange should be retried or not you can use the *retryWhile* predicate. Camel will redeliver until the predicate returns false.
This is demonstrated in the sample below:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRetryUntilTest.java}

Where the bean myRetryHandler is computing if we should retry or not:
{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/onexception/OnExceptionRetryUntilTest.java}

h3. Using custom ExceptionPolicyStrategy
*Available in Camel 1.4*

The default [ExceptionPolicyStrategy|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/processor/exceptionpolicy/ExceptionPolicyStrategy.html] in Camel should be sufficient in nearly all use-cases (see section _How does Camel select which clause should handle a given thrown Exception_). However if you need to use your own this can be configued as the sample below illustrates:
{snippet:id=e1|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/exceptionpolicy/CustomExceptionPolicyStrategyTest.java}

Using our own strategy *MyPolicy* we can change the default behavior of Camel with our own code to resolve which [ExceptionType|http://camel.apache.org/maven/camel-core/apidocs/org/apache/camel/model/ExceptionType.html] from above should be handling the given thrown exception. 
{snippet:id=e2|lang=java|url=camel/trunk/camel-core/src/test/java/org/apache/camel/processor/exceptionpolicy/CustomExceptionPolicyStrategyTest.java}

h3. Using the exception clause in Spring DSL

You can use all of the above mentioned exception clause features in the Spring DSL as well. Here are a few examples:

* Global scoped - *Available in Camel 2.0*
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/deadLetterChannelHandledExampleTest.xml}

* Route specific scoped
{snippet:id=e1|lang=xml|url=camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/onexception/onExceptionSubRouteTest.xml}

h3. See also
The [Error Handler] for the general error handling documentation
The [Dead Letter Channel] for further details.
The [Transactional Client] for transactional behavior


