h2. Castor
*Available as of Camel 2.1*

Castor is a [Data Format] which uses the [Castor XML library|http://www.castor.org/] to unmarshal an XML payload into Java objects or to marshal Java objects into an XML payload.

As usually you can use either Java DSL or Spring XML to work with Castor Data Format. 

h3. Using the Java DSL
{code}
from("direct:order").
  marshal().castor().
  to("activemq:queue:order");
{code}

For example the following uses a named DataFormat of Castor which uses default Castor data binding features.

{code}
CastorDataFormat castor = new CastorDataFormat ();

from("activemq:My.Queue").
  unmarshal(castor).
  to("mqseries:Another.Queue");
{code}



If you prefer to use a named reference to a data format which can then be defined in your Registry such as via your Spring XML file. e.g.

{code}
from("activemq:My.Queue").
  unmarshal("mycastorType").
  to("mqseries:Another.Queue");
{code}



If you want to override default mapping schema by providing a mapping file you can set it as follows.

{code}
CastorDataFormat castor = new CastorDataFormat ();
castor.setMappingFile("mapping.xml");
{code}


Also if you want to have more control on Castor Marshaller and Unmarshaller you can access them as below.

{code}
castor.getMarshaller();
castor.getUnmarshaller();
{code}



h3. Using Spring XML
The following example shows how to use Castor to unmarshal using Spring configuring the castor data type

{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <route>
    <from uri="direct:start"/>
    <unmarshal>
      <castor validation="true" />
    </unmarshal>
    <to uri="mock:result"/>
  </route>
</camelContext>
{code}

This example shows how to configure the data type just once and reuse it on multiple routes. You have to set the <castor> element directly in <camelContext>.

{code}
<camelContext>
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <dataFormats>
    <castor id="myCastor"/>
  </dataFormats>

  <route>
    <from uri="direct:start"/>
    <marshal ref="myCastor"/>
    <to uri="direct:marshalled"/>
  </route>
  <route>
    <from uri="direct:marshalled"/>
    <unmarshal ref="myCastor"/>
    <to uri="mock:result"/>
  </route>

</camelContext>
{code}


h3. Options
Castor supports the following options

|| Option || Type || Default || Description ||
| encoding | String | UTF-8 | Encoding to use when marshalling an Object to XML |
| validation | Boolean | false | Whether validation is turned on or off. |
| mappingFile | String | null | Path to a Castor mapping file to load from the classpath. |
| packages | String[] | null | Add additional packages to Castor XmlContext |
| classNames | String[] | null | Add additional class names to Castor XmlContext |

h3. Dependencies

To use Castor in your camel routes you need to add the a dependency on *camel-castor* which implements this data format. 

If you use maven you could just add the following to your pom.xml, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-castor</artifactId>
  <version>2.1.0</version>
</dependency>
{code}
