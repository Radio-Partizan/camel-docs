The Zip [Data Format] is a message compression and de-compression format. Messages marshalled using Zip compression can be unmarshalled using Zip decompression just prior to being consumed at the endpoint. The compression capability is quite useful when you deal with large XML and Text based payloads. It facilitates more optimal use of network bandwidth while incurring a small cost in order to compress and decompress payloads at the endpoint.

h3. Options

|| Option || Default || Description ||
| compressionLevel | null | To specify a specific compression Level use {{java.util.zip.Deflater}} settings. The possible settings are&nbsp; \\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - {{Deflater.BEST_SPEED}} \\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - {{Deflater.BEST_COMPRESSION}} \\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - {{Deflater.DEFAULT_COMPRESSION}} \\
\\
If compressionLevel is not explicitly specified the compressionLevel employed is {{Deflater.DEFAULT_COMPRESSION}} |

h3. Marshal

In this example we marshal a regular text/XML payload to a compressed payload employing zip compression {{Deflater.BEST_COMPRESSION}} and send it an ActiveMQ queue called MY_QUEUE.
{code}
from("direct:start").marshal().zip(Deflater.BEST_COMPRESSION).to("activemq:queue:MY_QUEUE");
{code}
Alternatively if you would like to use the default setting you could send it as
{code}
from("direct:start").marshal().zip().to("activemq:queue:MY_QUEUE");
{code}

h3. Unmarshal

In this example we unmarshal&nbsp;a zipped&nbsp;payload from an ActiveMQ queue called MY_QUEUE&nbsp;to its original format,&nbsp;and forward it for&nbsp;processing&nbsp;to the UnZippedMessageProcessor. Note that the compression Level employed during the marshalling should be identical to the one employed during unmarshalling to avoid errors.
{code}
from("activemq:queue:MY_QUEUE").unmarshal().zip().process(new UnZippedMessageProcessor());Ê
{code}

h3. Dependencies

This data format is provided in *camel-core* so no additional dependencies is needed.
