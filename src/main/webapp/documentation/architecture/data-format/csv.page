---
title: CSV
page_version: 14
page_creator: gertvanthienen
page_modifier: muellerc
--- pipeline:conf
h2. CSV

The CSV [Data Format] uses [Apache Commons CSV|http://commons.apache.org/sandbox/csv/] to handle CSV payloads (Comma Separated Values) such as those exported/imported by Excel.

h3. Options

|| Option || Type || Description ||
| config | CSVConfig | Can be used to set a custom CSVConfig object. |
| strategy | CSVStrategy | Camel uses by default {{CSVStrategy.DEFAULT_STRATEGY}}. |
| autogenColumn | boolean | *Camel 1.6.1/2.0:* Is default true. By default, columns are autogenerated in the resulting CSV. Subsequent messages use the previously created columns with new fields being added at the end of the line. |
| delimiter | String | *Camel 2.4:* Is default {{,}}. Can be used to configure the delimiter, if it's not the comma. |

h3. Marshalling a Map to CSV
The component allows you to marshal a Java Map (or any other message type that can be [converted|Type Converter] in a Map) into a CSV payload.

An example: if you send a message with this map...
{snippet:id=marshalInput|lang=java|url=camel/trunk/components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvRouteTest.java}
... through this route ...
{snippet:id=marshalRoute|lang=java|url=camel/trunk/components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvRouteTest.java}

... you will end up with a String containing this CSV message
{noformat}abc,123{noformat}
Sending the Map below through this route will result in a CSV message that looks like {{foo,bar}}

h3. Unmarshalling a CSV message into a Java List
Unmarshalling will transform a CSV messsage into a Java List with CSV file lines (containing another List with all the field values).

An example: we have a CSV file with names of persons, their IQ and their current activity.
{snippet:lang=sql|url=camel/trunk/components/camel-csv/src/test/resources/daltons.csv}

We can now use the CSV component to unmarshal this file:
{snippet:id=unmarshalRoute|lang=java|url=camel/trunk/components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvRouteTest.java}

The resulting message will contain a {{List<List<String>>}} like...
{snippet:id=unmarshalResult|lang=java|url=camel/trunk/components/camel-csv/src/test/java/org/apache/camel/dataformat/csv/CsvRouteTest.java}

h3. Marshalling a List<Map> to CSV
*Available as of Camel 2.1*

If you have multiple rows of data you want to be marshalled into CSV format you can now store the message payload as a {{List<Map<String, Object>>}} object where the list contains a Map for each row.

h3. File Poller of CSV, then unmarshaling

Given a bean which can handle the incoming data...
{code:title=MyCsvHandler.java}
// Some comments here
public void doHandleCsvData(List<List<String>> csvData)
{
    // do magic here
}
{code} 

... your route then looks as follows

{code:xml}
<route>
        <!-- poll every 10 seconds -->
        <from uri="file:///some/path/to/pickup/csvfiles?delete=true&amp;consumer.delay=10000" />
        <unmarshal><csv /></unmarshal>
        <to uri="bean:myCsvHandler?method=doHandleCsvData" />
</route>
{code}


h3. Marshaling with a pipe as delimiter

Using the Spring/XML DSL:
{code:xml}
<route>
  <from uri="direct:start" />
  <marshal>
    <csv delimiter="|" />
  </marshal>
  <to uri="bean:myCsvHandler?method=doHandleCsv" />
</route>
{code}

Or the Java DSL:
{code}
CsvDataFormat csv = new CsvDataFormat();
CSVConfig config = new CSVConfig();
config.setDelimiter('|');
csv.setConfig(config);

from("direct:start")
  .marshal(csv)
  .convertBodyTo(String.class)
.to("bean:myCsvHandler?method=doHandleCsv");
{code}

{code}
CsvDataFormat csv = new CsvDataFormat();
csv.setDelimiter("|");

from("direct:start")
  .marshal(csv)
  .convertBodyTo(String.class)
.to("bean:myCsvHandler?method=doHandleCsv");
{code}

h3. Unmarshaling with a pipe as delimiter

Using the Spring/XML DSL:
{code:xml}
<route>
  <from uri="direct:start" />
  <unmarshal>
    <csv delimiter="|" />
  </unmarshal>
  <to uri="bean:myCsvHandler?method=doHandleCsv" />
</route>
{code}

Or the Java DSL:
{code}
CsvDataFormat csv = new CsvDataFormat();
CSVStrategy strategy = CSVStrategy.DEFAULT_STRATEGY;
strategy.setDelimiter('|');
csv.setStrategy(strategy);

from("direct:start")
  .unmarshal(csv)
.to("bean:myCsvHandler?method=doHandleCsv");
{code}

{code}
CsvDataFormat csv = new CsvDataFormat();
csv.setDelimiter("|");

from("direct:start")
  .unmarshal(csv)
.to("bean:myCsvHandler?method=doHandleCsv");
{code}

h3. Dependencies

To use CSV in your camel routes you need to add the a dependency on *camel-csv* which implements this data format. 

If you use maven you could just add the following to your pom.xml, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-csv</artifactId>
  <version>2.0.0</version>
</dependency>
{code}
