---
title: JSON
page_version: 4
page_creator: njiang
page_modifier: davsclaus
--- pipeline:conf
h2. JSON
JSON is a [Data Format] to marshal and unmarshal Java objects to and from [JSON|http://www.json.org/].

In Camel 1.6 its only the XStream library that is supported and its default.

In Camel 2.0 we added support for more libraries:
Camel provides integration with two popular JSon libraries:
- The [XStream library|http://xstream.codehaus.org/] and [Jettsion |http://jettison.codehaus.org/]
- The [Jackson library|http://xircles.codehaus.org/projects/jackson]

By default Camel uses the XStream library. 

h3. Using JSon data format with the XStream library
{code}
// lets turn Object messages into json then send to MQSeries
from("activemq:My.Queue").
  marshal().json().
  to("mqseries:Another.Queue");
{code}

h3. Using Json data format with the Jackson library
{code}
// lets turn Object messages into json then send to MQSeries
from("activemq:My.Queue").
  marshal().json(JsonLibrary.Jackson).
  to("mqseries:Another.Queue");
{code}

h4. Using Json in Spring DSL
When using [Data Format] in Spring DSL you need to declare the data formats first. This is done in the *DataFormats* XML tag.
{code:xml}
        <dataFormats>
            <!-- here we define a Json data format with the id jack and that it should use the TestPojo as the class type when
                 doing unmarshal. The unmarshalTypeName is optional, if not provided Camel will use a Map as the type -->
            <json id="jack" library="Jackson" unmarshalTypeName="org.apache.camel.component.jackson.TestPojo"/>
        </dataFormats>
{code}

And then you can refer to this id in the route:
{code:xml}
       <route>
            <from uri="direct:back"/>
            <unmarshal ref="jack"/>
            <to uri="mock:reverse"/>
        </route>
{code}

h3. Dependencies for XStream

To use JSON in your camel routes you need to add the a dependency on *camel-xstream* which implements this data format. 

If you use maven you could just add the following to your pom.xml, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-xstream</artifactId>
  <version>2.0</version>
</dependency>
{code}

h3. Dependencies for Jackson

To use JSON in your camel routes you need to add the a dependency on *camel-jackson* which implements this data format. 

If you use maven you could just add the following to your pom.xml, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-jackson</artifactId>
  <version>2.0</version>
</dependency>
{code}

