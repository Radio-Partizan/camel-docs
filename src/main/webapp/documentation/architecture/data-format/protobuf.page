---
title: Protobuf
page_version: 5
page_creator: pledge
page_modifier: njiang
--- pipeline:conf
h1. Protobuf - Protocol Buffers

"Protocol Buffers - Google's data interchange format"

{info}Available from Camel 2.2{info}

Camel provides a [Data Format] to serialse between Java and the Protocol Buffer protocol.  The project's site details why you may wish to [choose this format over xml|http://code.google.com/apis/protocolbuffers/docs/overview.html].  Protocol Buffer is language-neutral and platform-neutral, so messages produced by your Camel routes may be consumed by other language implementations.

[API Site|http://code.google.com/apis/protocolbuffers/]
[Protobuf Implementation|http://code.google.com/p/protobuf/]
[Protobuf Java Tutorial|http://code.google.com/apis/protocolbuffers/docs/javatutorial.html]

h2. Protobuf overview

This quick overview of how to use Protobuf. For more detail see the [complete tutorial|http://code.google.com/apis/protocolbuffers/docs/javatutorial.html]

h3. Defining the proto format

The first step is to define the format for the body of your exchange.  This is defined in a .proto file as so:

{code:title=addressbook.proto}

package org.apache.camel.component.protobuf;

option java_package = "org.apache.camel.component.protobuf";
option java_outer_classname = "AddressBookProtos";

message Person {
  required string name = 1;
  required int32 id = 2;
  optional string email = 3;

  enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  message PhoneNumber {
    required string number = 1;
    optional PhoneType type = 2 [default = HOME];
  }

  repeated PhoneNumber phone = 4;
}

message AddressBook {
  repeated Person person = 1;
}

{code}

h3. Generating Java classes

The Protobuf SDK provides a compiler which will generate the Java classes for the format we defined in our .proto file.  You can run the compiler for any additional supported languages you require.

{{protoc --java_out=. ./addressbook.proto}}

This will generate a single Java class named AddressBookProtos which contains inner classes for Person and AddressBook.  Builders are also implemented for you.  The generated classes implement com.google.protobuf.Message which is required by the serialisation mechanism.  For this reason it important that only these classes are used in the body of your exchanges.  Camel will throw an exception on route creation if you attempt to tell the [Data Format] to use a class that does not implement com.google.protobuf.Message.  Use the generated builders to translate the data from any of your existing domain classes.

h2. Java DSL

You can use create the ProtobufDataFormat instance and pass it to Camel DataFormat marshal and unmarsha API like this.
{code}
   ProtobufDataFormat format = new ProtobufDataFormat(Person.getDefaultInstance());

   from("direct:in").marshal(format);
   from("direct:back").unmarshal(format).to("mock:reverse");
{code}

Or use the DSL protobuf() passing the unmarshal default instance or default instance class name like this.
{code}
   // You don't need to specify the default instance for protobuf marshaling               
   from("direct:marshal").marshal().protobuf();
   from("direct:unmarshalA").unmarshal().
       protobuf("org.apache.camel.dataformat.protobuf.generated.AddressBookProtos$Person").
       to ("mock:reverse");
                
   from("direct:unmarshalB").unmarshal().protobuf(Person.getDefaultInstance()).to("mock:reverse");
{code}


h2. Spring DSL

The following example shows how to use Castor to unmarshal using Spring configuring the protobuf data type

{code}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <route>
    <from uri="direct:start"/>
    <unmarshal>
      <protobuf instanceClass="org.apache.camel.dataformat.protobuf.generated.AddressBookProtos$Person" />
    </unmarshal>
    <to uri="mock:result"/>
  </route>
</camelContext>
{code}

h3. Dependencies

To use Protobuf in your camel routes you need to add the a dependency on *camel-protobuf* which implements this data format. 

If you use maven you could just add the following to your pom.xml, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-protobuf</artifactId>
  <version>2.2.0</version>
</dependency>
{code}