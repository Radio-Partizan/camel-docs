h2. JAXB

JAXB is a [Data Format] which uses the JAXB2 XML marshalling standard which is included in Java 6 to unmarshal an XML payload into Java objects or to marshal Java objects into an XML payload.

h3. Using the Java DSL

For example the following uses a named DataFormat of _jaxb_ which is configured with a number of Java package names to initialize the [JAXBContext|http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html]. 

{code}
DataFormat jaxb = new JaxbDataFormat("com.acme.model");

from("activemq:My.Queue").
  unmarshal(jaxb).
  to("mqseries:Another.Queue");
{code}

You can if you prefer use a named reference to a data format which can then be defined in your [Registry] such as via your [Spring] XML file. e.g. 

{code}
from("activemq:My.Queue").
  unmarshal("myJaxbDataType").
  to("mqseries:Another.Queue");
{code}


h3. Using Spring XML

The following example shows how to use JAXB to unmarshal using [Spring] configuring the jaxb data type

{snippet:id=example|lang=xml|url=camel/trunk/components/camel-jaxb/src/test/resources/org/apache/camel/example/springDataFormat.xml}

This example shows how to configure the data type just once and reuse it on multiple routes. For Camel versions below 1.5.0 you have to set the <jaxb> element directly in <camelContext>.

{snippet:id=example|lang=xml|url=camel/trunk/components/camel-jaxb/src/test/resources/org/apache/camel/example/marshalAndUnmarshalWithRef.xml}

{tip:title=Multiple context paths}
It is possible to use this data format with more than one context path. You can specify context path using {{:}} as separator, for example {{com.mycompany:com.mycompany2}}. Note that this is handled by JAXB implementation and might change if you use different vendor than RI.
{tip}

h3. Partial marshalling/unmarshalling
*This feature is new to Camel 2.2.0.*
JAXB 2 supports marshalling and unmarshalling XML tree fragments. By default JAXB looks for {{@XmlRootElement}} annotation on given class to operate on whole XML tree. This is useful but not always - sometimes generated code does not have @XmlRootElement annotation, sometimes you need unmarshall only part of tree.
In that case you can use partial unmarshalling. To enable this behaviours you need set property {{partClass}}. Camel will pass this class to JAXB's unmarshaler.

{snippet:id=example|lang=xml|url=camel/trunk/components/camel-jaxb/src/test/resources/org/apache/camel/example/springDataFormatPartial.xml}

For marshalling you have to add {{partNamespace}} attribute with QName of destination namespace. Example of Spring DSL you can find above.

h3. Ignoring the NonXML Character
*This feature is new to Camel 2.2.0.*
JaxbDataFromat supports to ignore the [NonXML Character|http://www.w3.org/TR/2004/REC-xml-20040204/#NT-Char], you just need to set the filterNonXmlChars property to be true, JaxbDataFromat will replace the NonXML character with " " when it is marshaling or unmarshaling the message. You can also do it by setting the [Exchange] property {{Exchange.FILTER_NON_XML_CHARS}}.

| || JDK 1.5 || JDK 1.6+ ||
|| Filtering in use | StAX API and implementation | No |
|| Filtering not in use | StAX API only | No |

This feature has been tested with Woodstox 3.2.9 and Sun JDK 1.6 StAX implementation.

h3. Working with the ObjectFactory

If you use XJC to create the java class from the schema, you will get an ObjectFactory for you JAXB context. Since the ObjectFactory uses [JAXBElement|http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html] to hold the reference of the schema and element instance value, from Camel 1.5.1 jaxbDataformat will ignore the JAXBElement by default and you will get the element instance value instead of the JAXBElement object form the unmarshaled message body. 
If you want to get the JAXBElement object form the unmarshaled message body, you need to set the JaxbDataFormat object's ignoreJAXBElement property to be false.


h3. Setting encoding
In Camel 1.6.1 and newer you can set the *encoding* option to use when marshalling. Its the {{Marshaller.JAXB_ENCODING}} encoding property on the JAXB Marshaller.
You can setup which encoding to use when you declare the JAXB data format. You can also provide the encoding in the [Exchange] property {{Exchange.CHARSET_NAME}}. This property will overrule the encoding set on the JAXB data format.

In this Spring DSL we have defined to use {{iso-8859-1}} as the encoding:
{snippet:id=example|lang=xml|url=camel/trunk/components/camel-jaxb/src/test/resources/org/apache/camel/example/springDataFormatWithEncoding.xml}


h3. Dependencies

To use JAXB in your camel routes you need to add the a dependency on *camel-jaxb* which implements this data format. 

If you use maven you could just add the following to your pom.xml, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-jaxb</artifactId>
  <version>1.6.0</version>
</dependency>
{code}

