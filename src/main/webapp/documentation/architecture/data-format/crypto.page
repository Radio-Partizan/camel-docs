---
title: Crypto
page_version: 5
page_creator: sgargan
page_modifier: sgargan
--- pipeline:conf
h2. Crypto
*Available as of Camel 2.3*

The Crypto [Data Format] integrates the Java Cryptographic Extension into Camel, allowing simple and flexible encryption and decryption of messages using Camel's familiar marshall and unmarshal formatting mechanism. It assumes marshalling to mean encryption to cyphertext and unmarshalling decryption back to the original plaintext.

h3. Options
{div:class=confluenceTableSmall}
|| Name || Type || Default || Description ||
| {{algorithm}} | {{String}} | {{DES/CBC/PKCS5Padding}} | The JCE algoorithm name indicating the cryptographic algorithm that will be used. |
| {{algorithmParamterSpec}} | {{AlgorithmParameterSpec}} | {{null}} |A JCE AlgorithmParameterSpec used to initialize the Cipher. |
| {{bufferSize}} | {{Integer}} | {{2048}} | the size of the buffer used in the signature process. |
| {{cryptoProvider}} | {{String}} | {{null}} | The name of the JCE Security Provider that should be used. |
| {{initializationVector}} | {{byte[]}} | {{null}} | A byte array containing the Initialization Vector that will be used to initialize the Cipher. |
| {{inline}} | {{boolean}} | {{false}} | Flag indicating that the configured IV should be inlined into the encrypted data stream. |
| {{macAlgorithm}} | {{String}} | {{null}} | The JCE algorithm name indicating the Message Authentication algorithm. |
| {{shouldAppendHMAC}} | {{boolean}} | {{null}} | Flag indicating that a Message Authentication Code should be calculated and appended to the encrypted data.|
{div}

h3. Basic Usage
At its most basic all that is required to encrypt/decrypt an exchange is a shared secret key. If one or more instances of the Crypto data format are configured with this key the format can be used to encrypt the payload in one route (or part of one) and decrypted in another. For example, using the Java DSL as follows:

{snippet:id=basic|lang=java|url=camel/trunk/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/CryptoDataFormatTest.java}

In Spring the dataformat is configured first and then used in routes 

{code: lang=xml}
<camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
  <dataFormats>
    <crypto id="basic" algorithm="DES" keyRef="desKey" />
  </dataFormats>
    ...
  <route>
    <from uri="direct:basic-encryption" />
    <marshal ref="basic" />
    <to uri="mock:encrypted" />
    <unmarshal ref="basic" />
    <to uri="mock:unencrypted" />
  </route>
</camelContext>
{code}

h3. Specifying the Encryption Algorithm.

Changing the algorithm is a matter of supplying the JCE algorithm name. If you change the algorithm you will need to use a compatible key.

{snippet:id=algorithm|lang=java|url=camel/trunk/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/CryptoDataFormatTest.java}

h3. Specifying an Initialization Vector.

Some crypto algorhithms, particularly block algorithms, require configuration with an initial block of data known as an Initialization Vector. In the JCE this is passed as an AlgorithmParameterSpec when the Cipher is initialized. To use such a vector with the CryptoDataFormat you can configure it with a byte[] contianing the required data e.g.

{snippet:id=init-vector|lang=java|url=camel/trunk/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/CryptoDataFormatTest.java}

or with spring, suppling a reference to a byte[]

{snippet:id=init-vector|lang=xml|url=camel/trunk/components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/SpringCryptoDataFormatTest.xml}

The same vector is required in both the encryption and decryption phases. As it is not necessary to keep the IV a secret, the DataFormat allows for it to be inlined into the encrypted data and subsequently read out in the decryption phase to initialize the Cipher. To inline the IV set the /oinline flag.

{snippet:id=inline-init-vector|lang=java|url=camel/trunk/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/CryptoDataFormatTest.java}

or with spring.

{snippet:id=inline|lang=xml|url=camel/trunk/components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/SpringCryptoDataFormatTest.xml}

For more information of the use of Initialization Vectors, consult

 * [http://en.wikipedia.org/wiki/Initialization_vector]
 * [http://www.herongyang.com/Cryptography/]
 * [http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation]

h3. Hashed Message Authentication Codes (HMAC)

To avoid attacks against the encrypted data while it is in transit the CryptoDataFormat can also calculate a Message Authentication Code forthe encrypted exchange contents based on a configurable MAC algorithm. The calculated HMAC is appended to the stream after encryption. It is separated from the stream in the decryption phase. The MAC is recalculated and verified against the transmitted version to insure nothing was tampered with in transit.For more information on Message Authentication Codes see [http://en.wikipedia.org/wiki/HMAC]

{snippet:id=hmac|lang=java|url=camel/trunk/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/CryptoDataFormatTest.java}

or with spring.

{snippet:id=hmac|lang=xml|url=camel/trunk/components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/SpringCryptoDataFormatTest.xml}

By default the HMAC is calculated using the HmacSHA1 mac algorithm though this can be easily changed by supplying a different algorithm name. See [here] for how to check what algorithms are available through the configured security providers

{snippet:id=hmac-algorithm|lang=java|url=camel/trunk/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/CryptoDataFormatTest.java}

or with spring.

{snippet:id=hmac-algorithm|lang=xml|url=camel/trunk/components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/SpringCryptoDataFormatTest.xml}

h3. Supplying Keys dynamically.

When using a Recipient list or similar EIP the recipient of an exchange can vary dynamically. Using the same key across all recipients may neither be feasible or desirable. It would be useful to be able to specify keys dynamically on a per exchange basis. The exchange could then be dynamically enriched with the key of its target recipient before being processed by the data format. To facilitate this the DataFormat allow for keys to be supplied dynamically via the message headers below 

* {{CryptoDataFormat.KEY}} {{"CamelCryptoKey"}}

{snippet:id=key-in-header|lang=java|url=camel/trunk/components/camel-crypto/src/test/java/org/apache/camel/converter/crypto/CryptoDataFormatTest.java}

or with spring.

{snippet:id=header-key|lang=xml|url=camel/trunk/components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/SpringCryptoDataFormatTest.xml}

h3. Dependencies

To use the [Crypto] dataformat in your camel routes you need to add the following dependency to your pom.

{code:xml}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-crypto</artifactId>
  <version>2.3.0</version>
</dependency>
{code}


h3. See Also
* [Data Format]
* [Crypto (Digital Signatures)]