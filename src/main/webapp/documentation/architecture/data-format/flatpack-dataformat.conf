h2. Flatpack DataFormat
The [Flatpack] component ships with the Flatpack data format that can be used to format between fixed width or delimited text messages to a {{List}} of rows as {{Map}}. 
- marshal = from {{List<Map<String, Object>>}} to {{OutputStream}} (can be converted to {{String}})
- unmarshal = from {{java.io.InputStream}} (such as a {{File}} or {{String}}) to a {{java.util.List}} as an {{org.apache.camel.component.flatpack.DataSetList}} instance.
The result of the operation will contain all the data. If you need to process each row one by one you can split the exchange, using [Splitter].

*Notice:* The Flatpack library does currently not support header and trailers for the marshal operation.

h3. Options
The data format has the following options:
|| Option || Default || Description ||
| {{definition}} | {{null}} | The flatpack pzmap configuration file. Can be omitted in simpler situations, but its preferred to use the pzmap. |
| {{fixed}} | {{false}} | Delimited or fixed. |
| {{ignoreFirstRecord}} | {{true}} | Whether the first line is ignored for delimited files (for the column headers). |
| {{textQualifier}} | {{"}} | If the text is qualified with a char such as {{"}}. |
| {{delimiter}} | {{,}} | The delimiter char (could be {{;}} {{,}} or similar) |
| {{parserFactory}} | {{null}} | Uses the default Flatpack parser factory. |

h3. Usage
To use the data format, simply instantiate an instance and invoke the marhsal or unmarshal operation in the route builder:
{code:java}
  FlatpackDataFormat fp = new FlatpackDataFormat();
  fp.setDefinition(new ClassPathResource("INVENTORY-Delimited.pzmap.xml"));
  ...
  from("file:order/in").unmarshal(df).to("seda:queue:neworder");
{code}
The sample above will read files from the {{order/in}} folder and unmarshal the input using the Flatpack configuration file {{INVENTORY-Delimited.pzmap.xml}} that configures the structure of the files. The result is a {{DataSetList}} object we store on the SEDA queue.

{code:java}
FlatpackDataFormat df = new FlatpackDataFormat();
df.setDefinition(new ClassPathResource("PEOPLE-FixedLength.pzmap.xml"));
df.setFixed(true);
df.setIgnoreFirstRecord(false);

from("seda:people").marshal(df).convertBodyTo(String.class).to("jms:queue:people");
{code}
In the code above we marshal the data from a Object representation as a {{List}} of rows as {{Maps}}. The rows as {{Map}} contains the column name as the key, and the the corresponding value. This structure can be created in Java code from e.g. a processor. We marshal the data according to the Flatpack format and convert the result as a {{String}} object and store it on a JMS queue.

h3. Dependencies

To use Flatpack in your camel routes you need to add the a dependency on *camel-flatpack* which implements this data format. 

If you use maven you could just add the following to your pom.xml, substituting the version number for the latest & greatest release (see [the download page for the latest versions|Download]).

{code}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-flatpack</artifactId>
  <version>1.5.0</version>
</dependency>
{code}

