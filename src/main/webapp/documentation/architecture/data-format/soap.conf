h2. SOAP DataFormat
*Available as of Camel 2.3*

SOAP is a [Data Format] which uses JAXB2 and JAX-WS to marshal and unmarshal SOAP payloads. It provides the basic features of Apache CXF without need for the CXF Stack.

h3. ElementNameStrategy

An element name strategy is used for two purposes. The first is to find a xml element name for a given object and soap action when marshalling the object into a SOAP message. The second is to find an Exception class for a given soap fault name.
	
|| Strategy || Usage || 
| QNameStrategy | Uses a fixed qName that is configured on instantiation. Exception lookup is not supported |
| TypeNameStrategy | Uses the name and namespace from the @XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported |
| ServiceInterfaceStrategy | Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault|

If you have generated the web service stub code with cxf-codegen or a similar tool then you probably will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy.

h3. Using the Java DSL

The following example uses a named DataFormat of _soap_ which is configured with the package com.example.customerservice to initialize the [JAXBContext|http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html]. The second parameter is the ElementNameStrategy. The route is able to marshal normal objects as well as exceptions.  (Note the below just sends a SOAP Envelope to a queue. A web service provider would actually need to be listening to the queue for a SOAP call to actually occur, in which case it would be a one way SOAP request. If you need request reply then you should look at the next example.)

{code}
SoapJaxbDataFormat soap = new SoapJaxbDataFormat("com.example.customerservice", new ServiceInterfaceStrategy(CustomerService.class));
from("direct:start")
  .marshal(soap)
  .to("jms:myQueue");
{code}

{tip:title=See also}As the SOAP dataformat inherits from the [JAXB] dataformat most settings apply here as well{tip}

h3. Examples

h4. Webservice client

The following route supports marshalling the request and unmarshalling a response or fault. 

{code}
String WS_URI = "cxf://http://myserver/customerservice?serviceClass=com.example.customerservice&dataFormat=MESSAGE";
SoapJaxbDataFormat soapDF = new SoapJaxbDataFormat("com.example.customerservice", new ServiceInterfaceStrategy(CustomerService.class));
from("direct:customerServiceClient")
  .onException(Exception.class)
    .handled(true)
    .unmarshal(soapDF)
  .end()
  .marshal(soapDF)
  .to(WS_URI)
  .unmarshal(soapDF);
{code}

The below snippet creates a proxy for the service interface and makes a SOAP call to the above route. 

{code}
import org.apache.camel.Endpoint;
import org.apache.camel.component.bean.ProxyHelper;
...

Endpoint startEndpoint = context.getEndpoint("direct:customerServiceClient");
ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
// CustomerService below is the service endpoint interface, *not* the javax.xml.ws.Service subclass
CustomerService proxy = ProxyHelper.createProxy(startEndpoint, classLoader, CustomerService.class);
GetCustomersByNameResponse response = proxy.getCustomersByName(new GetCustomersByName());
{code}

h4. Webservice Server

Using the following route sets up a webservice server that listens on jms queue customerServiceQueue and processes requests using the class CustomerServiceImpl. The customerServiceImpl of course should implement the interface CustomerService. Instead of directly instantiating the server class it could be defined in a spring context as a regular bean.

{code}
SoapJaxbDataFormat soapDF = new SoapJaxbDataFormat("com.example.customerservice", new ServiceInterfaceStrategy(CustomerService.class));
CustomerService serverBean = new CustomerServiceImpl();
from("jms://queue:customerServiceQueue")
  .onException(Exception.class)
    .handled(true)
    .marshal(soapDF)
  .end()
  .unmarshal(soapDF)
  .bean(serverBean)
  .marshal(soapDF);
{code}

h3. Dependencies

To use the SOAP dataformat in your camel routes you need to add the following dependency to your pom.

{code:xml}
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-soap</artifactId>
  <version>2.3.0</version>
</dependency>
{code}
